type NodeId     = Nat, end_node; ## DO I NEED end_node?

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

<end_node>  end_node  = :end_node;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NodeId first_node(CodeTree* code_trees, NodeId next_node) = if code_trees != () then first_node(head(code_trees)) else next_node;


NodeId first_node(CodeTree tree) =
  std_node(i?)        = i,
  branch_node()       = tree.idx,
  nat_switch_node()   = tree.idx,
  symb_switch_node()  = tree.idx,
  loop_node(ts?)      = first_node(head(ts)),
  block_node(ts?)     = first_node(head(ts)),
  try_block_node()    = first_node(head(tree.body)),
  root_node()         = undefined;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[Nat]* reverse_flow_map(Nat** flow_map) = (set(ns) : ns <- reverse_adj_list(flow_map));

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NodeId** build_flow_map(CodeTree code_tree, NodeInfo+ leaf_nodes) {
  subtrees = match (code_tree) root_node(ts?) = ts; ## UGLY UGLY UGLY
  let leaf_nodes=leaf_nodes, next_node=end_node, loop_break_target=nothing, block_exit_target=nothing:
    flow_map = build_flow_map(subtrees);
  ;
  return flow_map;
}


implicit leaf_nodes : NodeInfo+, next_node : NodeId, loop_break_target : Maybe[NodeId], block_exit_target : Maybe[NodeId] {
  NodeId** build_flow_map(CodeTree code_tree) =
    std_node(i?)        = (std_node_exit(i)),
    branch_node()       = build_branch_flow_map(code_tree.idx, code_tree.if_body, code_tree.else_body),
    nat_switch_node()   = build_nat_switch_flow_map(code_tree.idx, code_tree.cases),
    symb_switch_node()  = build_symb_switch_flow_map(code_tree.idx, code_tree.cases, code_tree.else),
    loop_node(ts?)      = { new_next_node = first_node(head(ts));
                            new_loop_break_target = just(next_node);
                            return build_flow_map(ts, next_node=new_next_node, loop_break_target=new_loop_break_target);
                          },
    block_node(ts?)     = build_flow_map(ts, block_exit_target=just(next_node)),
    try_block_node()    = build_flow_map(code_tree.body),
    root_node(ts?)      = undefined;


  NodeId* std_node_exit(Nat idx) {
    return match (leaf_nodes(idx))
      std_node(i?)  = node_exit(i);

    NodeId* node_exit(JumpInstr instr) =
      break_loop  = (value_unsafe(loop_break_target)),
      exit_block  = (value_unsafe(block_exit_target)),
      ret_val()   = (),
      terminate   = ();

    NodeId* node_exit(BasicInstr) = (next_node);
  }


  NodeId** build_branch_flow_map(Nat idx, CodeTree+ if_body, CodeTree* else_body) {
    branch_exits = (first_node(if_body, next_node), first_node(else_body, next_node));
    if_body_flow_map = build_flow_map(if_body);
    else_body_flow_map = build_flow_map(else_body);
    return (branch_exits) & if_body_flow_map & else_body_flow_map;
  }


  NodeId** build_nat_switch_flow_map(Nat idx, CodeTree*+ cases) {
    branch_exits = (first_node(c, next_node) : c <- cases);
    case_flow_maps = (build_flow_map(c) : c <- cases);
    return (branch_exits) & join(case_flow_maps);
  }


  NodeId** build_symb_switch_flow_map(Nat idx, CodeTree++ cases, CodeTree* else) {
    exits = ((first_node(c, next_node) : c <- cases) | first_node(else, next_node));
    nested_flow_maps = ((build_flow_map(c) : c <- cases) | build_flow_map(else));
    return (exits) & join(nested_flow_maps);
  }


  NodeId** build_flow_map(CodeTree* code_trees) {
    next_nodes = (first_node(code_trees(i+1)) : i < |code_trees|-1);
    next_nodes = (next_nodes | next_node);
    flow_maps = (build_flow_map(t, next_node=next_nodes(i)) : t @ i <- code_trees);
    return join(flow_maps);
  }
}
