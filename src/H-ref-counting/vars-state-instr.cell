(VarsState, Instr*, Instr*) exit_vars_state(NodeInfo info, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  std_node(i?)        = exit_vars_state(i, entry_vars_state, live_vars_after_instr),
  branch_node()       = (entry_vars_state, (), ()),
  nat_switch_node()   = (entry_vars_state, (), ()),
  symb_switch_node()  = (entry_vars_state, (), ()),
  set_cls_par_node()  = (entry_vars_state, (), ());


## THIS IS A BIT UGLY...
VarsState exit_vars_state_only(NodeInfo info, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) {
  vars_state, unused_var_1, unused_var_2 = exit_vars_state(info, entry_vars_state, live_vars_after_instr);
  return vars_state;
}


(VarsState, Instr*, Instr*) exit_vars_state(JumpInstr instr, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  break_loop    = (entry_vars_state, (), ()),
  exit_block    = (entry_vars_state, (), ()),
  ret_val(e?)   = { unused_var, instrs = swallow_var(entry_vars_state, maybe_var(e), []);
                    return (unreachable_vars_state, instrs, ());
                  },
  terminate     = (unreachable_vars_state, (), ());


(VarsState, Instr*, Instr*) exit_vars_state(BasicInstr instr, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  set_var()     = set_var_exit_var_state(instr.var, instr.value, entry_vars_state, live_vars_after_instr),
  _             = { state, pre_instrs = exit_vars_state_no_post_instrs(instr, entry_vars_state, live_vars_after_instr);
                    return (state, pre_instrs, ());
                  };


(VarsState, Instr*, Instr*) set_var_exit_var_state(WriteObjVar var, ObjExpr val, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) {
  if var :: TrkObjVar and val :: StdObjVar:
    state, pre_instrs = make_var_copy(entry_vars_state, var, val);
    return (state, pre_instrs, ());
  ;

  maybe_src_var = get_src_var(val);
  if maybe_src_var != nothing:
    return set_owned_var(entry_vars_state, var, value(maybe_src_var), live_vars_after_instr);
  else
    // If there's no "source" variable for the returned object, then it's an inline object
    ## AM I SURE ABOUT THIS?
    state, pre_instrs = set_var_inline(entry_vars_state, var);
    return (state, pre_instrs, ());
  ;
}


(VarsState, Instr*, Instr*) set_var_exit_var_state(ImplArg var, ObjExpr value, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) {
  maybe_src_var = get_src_var(value);
  // If there's no "source" variable for the returned object, then it's an inline object
  ## AM I SURE ABOUT THIS?
  state, pre_instrs = release_var(entry_vars_state, var);
  post_instrs = ();
  if maybe_src_var != nothing:
    if value :: StdObjVar:
      state, pre_instrs_2 = swallow_var(state, value, live_vars_after_instr);
      pre_instrs = pre_instrs & pre_instrs_2;
    else
      post_instrs = (add_ref(var));
    ;
  ;
  return (state, pre_instrs, post_instrs);
}


(VarsState, Instr*) exit_vars_state_no_post_instrs(BasicInstr instr, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  init_stream()         = (entry_vars_state, ()),
  append()              = swallow_var(entry_vars_state, maybe_var(instr.obj), live_vars_after_instr),
  set_at()              = swallow_var(entry_vars_state, maybe_var(instr.value), live_vars_after_instr),
  get_set_iter()        = init_it_var(entry_vars_state, instr.var, maybe_var(instr.src)),
  get_seq_iter()        = init_it_var(entry_vars_state, instr.var, maybe_var(instr.src)),
  get_bin_rel_iter()    = init_it_var(entry_vars_state, instr.var, maybe_var(instr.src)),
  get_tern_rel_iter()   = init_it_var(entry_vars_state, instr.var, maybe_var(instr.src)),
  move_forward()        = (entry_vars_state, ()),
  set_var()             = undefined,
  set_bvar()            = (entry_vars_state, ()),
  set_ivar()            = (entry_vars_state, ()),
  set_rc_var()          = set_rc_var_exit_vars_state(instr.value, instr.var, entry_vars_state, live_vars_after_instr),
  init_memb_var()       = (entry_vars_state, ()),
  reset_memb_var()      = set_var_inline(entry_vars_state, instr.var),
  clear_loc_var(v?)     = set_var_inline(entry_vars_state, v),
  add_ref()             = undefined,
  release()             = undefined,
  print_obj()           = (entry_vars_state, ()),
  no_op                 = (entry_vars_state, ()),
  call_proc()           = if instr.var? then set_rc_var(entry_vars_state, instr.var) else (entry_vars_state, ()),
  call_cls()            = set_rc_var(entry_vars_state, instr.var),
  queue_update()        = (entry_vars_state, ()),
  insert_timer()        = (entry_vars_state, ()),
  clear_timer()         = (entry_vars_state, ()),
  auto_pre_init()       = (entry_vars_state, ()),
  auto_cleanup()        = (entry_vars_state, ()),
  set_input()           = swallow_var(entry_vars_state, maybe_var(instr.value), live_vars_after_instr),
  clear_input()         = (entry_vars_state, ()),
  auto_update_node()    = (entry_vars_state, ()),
  auto_apply()          = (entry_vars_state, ()),
  set_persistent_state()= (entry_vars_state, ()),
  init_db()             = (entry_vars_state, ()),
  cleanup_db()          = (entry_vars_state, ()),
  send_msg()            = (entry_vars_state, ()),
  try_update()          = (entry_vars_state, ()),
  set_state()           = (entry_vars_state, ()), ## SHOULD IT TAKE OWNERSHIP OF THE VARIABLE CONTAINING THE STATE?
  invoke_auto_method()  |
  invoke_db_method()    = set_rc_var(entry_vars_state, instr.res_var),
  init_value_store()    = (entry_vars_state, ()),
  cleanup_value_store() = (entry_vars_state, ()),
  init_table()          = (entry_vars_state, ()),
  cleanup_table()       = (entry_vars_state, ()),
  set_table()           = (entry_vars_state, ()),
  get_table_iter()      = (entry_vars_state, ()),
  queue_deletes()       = (entry_vars_state, ()),
  queue_insert_value()  = swallow_var(entry_vars_state, maybe_var(instr.value), live_vars_after_instr),
  queue_insert_tuple()  = (entry_vars_state, ()),
  push_call_info()      = (entry_vars_state, ()),
  pop_call_info         = (entry_vars_state, ()),
  runtime_check()       = (entry_vars_state, ());


(VarsState, Instr*) set_rc_var_exit_vars_state(FloatExpr expr, WriteObjVar var, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  set_rc_var(entry_vars_state, var);


(VarsState, Instr*) set_rc_var_exit_vars_state(RefObjExpr expr, WriteObjVar var, VarsState entry_vars_state, [TrkVar] live_vars_after_instr) =
  mk_tagged_obj()   = { state, instrs1 = swallow_var(entry_vars_state, maybe_var(expr.obj), live_vars_after_instr);
                        state, instrs2 = set_rc_var(state, var);
                        return (state, instrs1 & instrs2);
                      },
  append_to_seq()   = { new_elem = expr.new_elem;
                        assert new_elem :: <StdObjVar, InlineObj>;
                        live_vars_in_between = {live_vars_after_instr - [var]} & [new_elem if new_elem :: TrkVar]; ## NOT SURE ABOUT THIS ONE
                        state, instrs1 = swallow_var(entry_vars_state, maybe_var(expr.seq), live_vars_in_between);
                        state, instrs2 = swallow_var(state, maybe_var(expr.new_elem), live_vars_after_instr);
                        state, instrs3 = set_rc_var(state, var);
                        return (state, instrs1 & instrs2 & instrs3);
                      },
  update_seq_at()   = { state, instrs1 = swallow_var(entry_vars_state, maybe_var(expr.value), live_vars_after_instr);
                        state, instrs2 = set_rc_var(state, var);
                        return (state, instrs1 & instrs2);
                      },
  ## BAD BAD BAD: DANGEROUS, REPLACE WITH FULL LIST OF PATTERNS
  _                 = set_rc_var(entry_vars_state, var);




////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Maybe[<StdObjVar, TrkItVar>] get_src_var(NatObjOp op) =
  at()                = get_src_var(op.seq),
  lookup()            = get_src_var(op.rel),
  lookup_field()      = get_src_var(op.record),
  get_tag(e?)         = nothing,
  get_inner_obj(e?)   = get_src_var(e),
  bool_obj()          = nothing,
  int_obj()           = nothing,
  obj_neg(e?)         = nothing,
  to_symb(e?)         = nothing,
  get_curr_obj(v?)    = just(v),
  get_curr_arg()      = just(op.var),
  rand_elem(e?)       = get_src_var(e);

Maybe[StdObjVar] get_src_var(StdObjVar v) = just(v);

Nothing get_src_var(<InlineObj, FloatExpr>) = nothing;
