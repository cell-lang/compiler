type NodeInfo       = std_node(<BasicInstr, JumpInstr>),
                      branch_node(BoolExpr),
                      nat_switch_node(IntExpr),
                      symb_switch_node(value: ObjExpr, cases: [+SymbObj]+),
                      set_cls_par_node(var: ImplArg, cls: BoundCls);

type CodeTree       = std_node(Nat),
                      branch_node(idx: Nat, if_body: CodeTree+, else_body: CodeTree*),
                      nat_switch_node(idx: Nat, cases: CodeTree*+),
                      symb_switch_node(idx: Nat, cases: CodeTree++, else: CodeTree*),
                      loop_node(CodeTree+),
                      block_node(CodeTree+),
                      try_block_node(var: LocVar, body: CodeTree+),
                      root_node(CodeTree+);

type RCNodeInfo     = std_node(Instr*),
                      branch_node(cond: BoolExpr, if_post_instrs: Instr*, else_post_instrs: Instr*),
                      nat_switch_node(index: IntExpr, cases_instrs: Instr*+),
                      symb_switch_node(value: ObjExpr, cases: [+SymbObj]+, cases_instrs: Instr*+, else_instrs: Instr*),
                      set_cls_par_node(var: ImplArg, cls: BoundCls, post_instrs: Instr*);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NodeInfo std_node(<BasicInstr, JumpInstr> i)          = :std_node(i);
NodeInfo branch_node(BoolExpr e)                      = :branch_node(e);
NodeInfo nat_switch_node(IntExpr e)                   = :nat_switch_node(e);
NodeInfo symb_switch_node(ObjExpr e, [+SymbObj]+ cs)  = symb_switch_node(value: e, cases: cs);
NodeInfo set_cls_par_node(ImplArg var, BoundCls cls)  = set_cls_par_node(var: var, cls: cls);


CodeTree std_node(Nat i)                                      = :std_node(i);
CodeTree branch_node(Nat i, CodeTree+ ib, CodeTree* eb)       = branch_node(idx: i, if_body: ib, else_body: eb);
CodeTree nat_switch_node(Nat i, CodeTree*+ cs)                = nat_switch_node(idx: i, cases: cs);
CodeTree symb_switch_node(Nat i, CodeTree++ cs, CodeTree* e)  = symb_switch_node(idx: i, cases: cs, else: e);
CodeTree loop_node(CodeTree+ b)                               = :loop_node(b);
CodeTree block_node(CodeTree+ b)                              = :block_node(b);
CodeTree try_block_node(LocVar v, CodeTree+ b)                = try_block_node(var: v, body: b);
CodeTree root_node(CodeTree+ b)                               = :root_node(b);


RCNodeInfo std_node(Instr* instrs)                              = :std_node(instrs);
RCNodeInfo branch_node(BoolExpr c, Instr* iis, Instr* eis)      = branch_node(cond: c, if_post_instrs: iis, else_post_instrs: eis);
RCNodeInfo rc_nat_switch_node(IntExpr e, Instr*+ is)            = nat_switch_node(index: e, cases_instrs: is);
RCNodeInfo rc_symb_switch_node(ObjExpr e, [+SymbObj]+ cs, Instr*+ cis, Instr* eis) = symb_switch_node(value: e, cases: cs, cases_instrs: cis, else_instrs: eis);
RCNodeInfo set_cls_par_node(ImplArg v, BoundCls c, Instr* is)   = set_cls_par_node(var: v, cls: c, post_instrs: is);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

(NodeInfo+, CodeTree) build_root_code_graph(Instr+ instrs) {
  leaf_nodes, code_trees = build_code_graph(instrs, 0);
  return (leaf_nodes, root_node(code_trees));
}


(NodeInfo+, CodeTree) build_code_graph(<BasicInstr, JumpInstr> instr, Nat offset) =
  ((std_node(instr)), std_node(offset));

(NodeInfo+, CodeTree) build_code_graph(CompInstr instr, Nat offset) =
  branch()                = build_branch_code_graph(instr.cond, instr.when_true, instr.when_false, offset),
  switch_on_nat()         = build_switch_on_nat_code_graph(instr.value, instr.cases, offset),
  symb_switch()           = build_symb_switch_code_graph(instr.value, instr.cases, instr.else, offset),
  repeat(is?)             = build_loop_code_graph(is, offset),
  execute_block(is?)      = build_block_code_graph(is, offset),
  try_block()             = build_try_block_code_graph(instr.var, instr.body, offset);


(NodeInfo+, CodeTree) build_branch_code_graph(BoolExpr cond, Instr+ if_branch, Instr* else_branch, Nat offset) {
  if_branch_leaf_nodes, if_branch_code_trees = build_code_graph(if_branch, nat(offset+1));
  else_offset = nat(offset + 1 + |if_branch_leaf_nodes|);
  else_branch_leaf_nodes, else_branch_code_trees = build_code_graph(else_branch, else_offset);
  leaf_nodes = (branch_node(cond)) & if_branch_leaf_nodes & else_branch_leaf_nodes;
  code_tree = branch_node(offset, if_branch_code_trees, else_branch_code_trees);
  return (nonempty(leaf_nodes), code_tree);
}


(NodeInfo+, CodeTree) build_switch_on_nat_code_graph(IntExpr value, Instr*+ cases, Nat offset) {
  leaf_nodes = (nat_switch_node(value));
  code_trees = ();
  for c <- cases:
    case_leaf_nodes, case_code_trees = build_code_graph(c, nat(offset + |leaf_nodes|));
    leaf_nodes = leaf_nodes & case_leaf_nodes;
    code_trees = (code_trees | case_code_trees);
  ;
  return (nonempty(leaf_nodes), nat_switch_node(offset, nonempty(code_trees)));
}


(NodeInfo+, CodeTree) build_symb_switch_code_graph(ObjExpr value, [+([+SymbObj], Instr+)] cases, Instr* else, Nat offset) {
  case_values, case_instrs = unzip(rand_sort(cases));
  leaf_nodes = (symb_switch_node(value, nonempty(case_values)));
  case_code_trees = ();
  for is <- case_instrs:
    curr_leaf_nodes, curr_code_trees = build_code_graph(is, nat(offset + |leaf_nodes|));
    leaf_nodes = leaf_nodes & curr_leaf_nodes;
    case_code_trees = (case_code_trees | curr_code_trees);
  ;
  else_leaf_nodes, else_code_trees = build_code_graph(else, nat(offset + |leaf_nodes|));
  leaf_nodes = nonempty(leaf_nodes & else_leaf_nodes);
  return (leaf_nodes, symb_switch_node(offset, nonempty(case_code_trees), else_code_trees));
}


(NodeInfo+, CodeTree) build_loop_code_graph(Instr+ body, Nat offset) {
  leaf_nodes, code_trees = build_code_graph(body, offset);
  return (leaf_nodes, loop_node(code_trees));
}


(NodeInfo+, CodeTree) build_block_code_graph(Instr+ body, Nat offset) {
  leaf_nodes, code_trees = build_code_graph(body, offset);
  return (leaf_nodes, block_node(code_trees));
}


(NodeInfo+, CodeTree) build_try_block_code_graph(LocVar var, Instr+ body, Nat offset) {
  leaf_nodes, code_trees = build_code_graph(body, offset);
  return (leaf_nodes, try_block_node(var, code_trees));
}


((), ()) build_code_graph((), Nat) = ((), ());

(NodeInfo+, CodeTree+) build_code_graph(Instr+ instrs, Nat initial_offset) {
  offset = initial_offset;
  leaf_subnodes = ();
  code_trees = ();
  for instr @ i <- instrs:
    leaf_nodes, code_tree = build_code_graph(instr, offset);
    offset = nat(offset + |leaf_nodes|);
    leaf_subnodes = (leaf_subnodes | leaf_nodes);
    code_trees = (code_trees | code_tree);
  ;
  return (nonempty(join(leaf_subnodes)), nonempty(code_trees));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Instr* reconstruct(CodeTree code_tree, RCNodeInfo+ rc_nodes) =
  std_node(id?)       = {match (rc_nodes(id)) std_node(is?) = is}, ## UGLY UGLY UGLY
  branch_node()       = (reconstruct_branch(code_tree.idx, code_tree.if_body, code_tree.else_body, rc_nodes)),
  nat_switch_node()   = (reconstruct_nat_switch(code_tree.idx, code_tree.cases, rc_nodes)),

  symb_switch_node()  = reconstruct_symb_switch(code_tree.idx, code_tree.cases, code_tree.else, rc_nodes),

  loop_node(ts?)      = (repeat(nonempty(reconstruct(ts, rc_nodes)))),
  block_node(ts?)     = (execute_block(nonempty(reconstruct(ts, rc_nodes)))),
  try_block_node()    = (try_block(code_tree.var, nonempty(reconstruct(code_tree.body, rc_nodes)))),
  root_node(ts?)      = reconstruct(ts, rc_nodes);


Instr reconstruct_branch(Nat idx, CodeTree+ if_code_trees, CodeTree* else_code_trees, RCNodeInfo+ rc_nodes) {
  cond, if_instrs, else_instrs = match (rc_nodes(idx)) branch_node() n? = (n.cond, n.if_post_instrs, n.else_post_instrs); ## UGLY UGLY UGLY
  if_body = if_instrs & reconstruct(if_code_trees, rc_nodes);
  else_body = else_instrs & reconstruct(else_code_trees, rc_nodes);
  return branch(cond, if_body, else_body);
}


Instr reconstruct_nat_switch(Nat idx, CodeTree*+ case_code_trees, RCNodeInfo+ rc_nodes) {
  index, instrs = match (rc_nodes(idx)) nat_switch_node() n? = (n.index, n.cases_instrs); ## UGLY UGLY UGLY
  cases_code = (instrs(i) & reconstruct(ct, rc_nodes) : ct @ i <- case_code_trees);
  return switch_on_nat(index, cases_code);
}


Instr* reconstruct_symb_switch(Nat idx, CodeTree++ cases, CodeTree* else, RCNodeInfo+ rc_nodes) {
  expr, cases_values, cases_instrs, else_instrs = match (rc_nodes(idx)) symb_switch_node() n? = (n.value, n.cases, n.cases_instrs, n.else_instrs); ## UGLY UGLY UGLY
  cases_code = (nonempty(cases_instrs(i) & reconstruct(ct, rc_nodes)) : ct @ i <- cases);
  else_code = else_instrs & reconstruct(else, rc_nodes);
  return (symb_switch(expr, set(nonempty(zip(cases_values, cases_code))), else_code));
}


Instr* reconstruct(CodeTree* code_trees, RCNodeInfo+ rc_nodes) = join((reconstruct(t, rc_nodes) : t <- code_trees));
