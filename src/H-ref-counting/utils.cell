// Variables that require full reference counting
//   var(Atom)
//   lvar(Nat)


// Always inline, no reference counting of any sort is needed
//   bvar(Nat)
//   ivar(Nat)


// External, constant and outside the control of the function.
//   fn_arg(Nat)
//   capt_var(Nat)


// Can be managed deterministicly. No need to track them
// ELABORATE ON THEIR USAGE A BIT
//   memb_var(Atom)
//   signal_var(Atom)
//   auto_memb_var_copy(Atom)
//   pending_input_var(Atom)
//   pending_state_var(Atom)  ## NOT AT ALL SURE ABOUT THIS ONE


// Can be temporarily set, and in that case both the current
// and the old value must be kept alive
//   impl_arg(Atom)


// Always local, with deterministic scope, and no need for reference counting
// The collection object they iterate over must be kept alive for as long as
// they are in scope
//   set_it_var(Nat)
//   seq_it_var(Nat)
//   bin_rel_it_var(Nat)
//   tern_rel_it_var(Nat)


// Always local, and with deterministic scope, so again no need for reference counting
// They own the objects they contain. evar() can only be assigned to, and never read from.
// Moreover, they are always assigned at most once, so no need to ever release their
// content. The corresponding vvar() must be used once and only once. svar() can only
// be appended to, and they must be used once and only once.
//   svar(Nat)
//   evar(id: Nat, idx: <Nat, IntVar>)
//   vvar(id: Nat, size: NzNat)

type TrkItVar   = SeqItVar, SetItVar, BinRelItVar, TernRelItVar;
type TrkObjVar  = StdVar, LocVar;
type TrkVar     = TrkObjVar, TrkItVar;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Maybe[StdObjVar] maybe_var(AtomicExpr expr) = if expr :: StdObjVar then just(expr) else nothing;

Nothing maybe_var(AtomicBoolExpr) = undefined;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[TrkVar] tracked_vars_used(AnyTypeExpr expr) = tracked_vars_used_by_any_type_expr(expr);

[TrkVar] tracked_vars_used(RefObjExpr expr) =
  retrieve_from_nested_low_level_exprs(expr, tracked_vars_used_by_any_type_expr);

[TrkVar] tracked_vars_used_by_any_type_expr(AnyTypeExpr expr) {
  return [expr] if expr :: TrkObjVar;
  return match (expr)
    is_out_of_range(iv?)  = [iv if iv :: TrkItVar],
    get_curr_obj(iv?)     = [iv],
    get_curr_arg()        = [expr.var],
    _                     = retrieve_from_nested_low_level_exprs(expr, tracked_vars_used_by_any_type_expr);
}

[<StdVar, LocVar>] tracked_vars_used(BoundCls cls) =
  cls_var()       |
  capt_cls_var()  = [],
  bound_cls()     = [v : v <~ cls.capt_vars, v :: <StdVar, LocVar>];

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[TrkVar] trk_vars(AnyVar v)    = [v if v :: TrkVar];
[TrkVar] trk_vars([AnyVar] vs)  = [v : v <- vs, v :: TrkVar];

////////////////////////////////////////////////////////////////////////////////

[TrkVar] vars_set(NodeInfo info) =
  std_node(i?)        = vars_set(i),
  branch_node()       = [],
  nat_switch_node()   = [],
  symb_switch_node()  = [],
  set_cls_par_node()  = [];


[TrkVar] vars_set(BasicInstr instr) =
  init_stream()           = [],
  append()                = [],
  set_at()                = [],
  get_set_iter()          = trk_vars(instr.var),
  get_seq_iter()          = trk_vars(instr.var),
  get_bin_rel_iter()      = trk_vars(instr.var),
  get_tern_rel_iter()     = trk_vars(instr.var),
  move_forward()          = [],
  set_var()               = trk_vars(instr.var),
  set_bvar()              = [],
  set_ivar()              = [],
  set_rc_var()            = trk_vars(instr.var),
  init_memb_var()         = [], ## NOT SURE ABOUT THIS ONE...
  reset_memb_var()        = [], ## NOT SURE ABOUT THIS ONE...
  clear_loc_var(v?)       = [v],
  add_ref()               = [],
  release()               = [],
  print_obj()             = [],
  no_op                   = [],
  call_proc()             = trk_vars([instr.var if instr.var?]),
  call_cls()              = trk_vars(instr.var),
  queue_update()          = [],
  insert_timer()          = [],
  clear_timer()           = [],
  auto_pre_init()         = [],
  auto_cleanup()          = [],
  set_input()             = [],
  clear_input()           = [],
  auto_update_node()      = [],
  auto_apply()            = [],
  set_persistent_state()  = [],
  init_db()               = [],
  cleanup_db()            = [],
  send_msg()              = [],
  try_update()            = [],
  set_state()             = [],
  invoke_auto_method()    |
  invoke_db_method()      = trk_vars(instr.res_var),
  init_value_store()      = [],
  cleanup_value_store()   = [],
  init_table()            = [],
  cleanup_table()         = [],
  set_table()             = [],
  get_table_iter()        = trk_vars(instr.it_var),
  queue_deletes()         = [],
  queue_insert_value()    = [],
  queue_insert_tuple()    = [],
  push_call_info()        = [],
  pop_call_info           = [],
  runtime_check()         = [];


[TrkVar] vars_set(JumpInstr) = [];


[TrkVar] vars_used(NodeInfo info) =
  std_node(i?)        = vars_used(i),
  branch_node(e?)     = tracked_vars_used(e),
  nat_switch_node()   = [],
  symb_switch_node()  = tracked_vars_used(info.value),
  set_cls_par_node()  = tracked_vars_used(info.cls);


[TrkVar] vars_used(BasicInstr instr) =
  init_stream()         = [],
  append()              = tracked_vars_used(instr.obj),
  set_at()              = tracked_vars_used(instr.value) & trk_vars(instr.var), ## NOT SURE ABOUT THIS ONE.
  get_set_iter()        = tracked_vars_used(instr.src),
  get_seq_iter()        = tracked_vars_used(instr.src),
  get_bin_rel_iter()    |
  get_tern_rel_iter()   = tracked_vars_used(instr.src) & seq_union((tracked_vars_used(a) : a <- values(instr.args))),
  // move_forward(iv?)    = {iv},
  move_forward()        = [],
  set_var()             = tracked_vars_used(instr.value),
  set_bvar()            = tracked_vars_used(instr.value),
  set_ivar()            = tracked_vars_used(instr.value),
  set_rc_var()          = tracked_vars_used(instr.value),
  init_memb_var()       = [],
  reset_memb_var()      = [],
  clear_loc_var()       = [],
  add_ref()             = undefined,
  release()             = undefined,
  print_obj(e?)         = tracked_vars_used(instr.obj),
  no_op                 = [],
  call_proc()           = seq_union((tracked_vars_used(p) : p <- instr.args)),
  call_cls()            = seq_union((tracked_vars_used(p) : p <- instr.args)),
  queue_update()        = [],
  insert_timer()        = tracked_vars_used(instr.idx) & tracked_vars_used(instr.time),
  clear_timer()         = [],
  auto_pre_init()       = [],
  auto_cleanup()        = [],
  set_input()           = tracked_vars_used(instr.value),
  clear_input()         = [],
  auto_update_node()    = [],
  auto_apply()          = [],
  set_persistent_state()= tracked_vars_used(instr.state),
  init_db()             = [],
  cleanup_db()          = [],
  send_msg()            = tracked_vars_used(instr.msg),
  try_update()          = seq_union((tracked_vars_used(a) : a <- instr.args)),
  set_state()           = tracked_vars_used(instr.state),
  invoke_auto_method()  |
  invoke_db_method()    = seq_union((tracked_vars_used(a) : a <- instr.args)),
  init_value_store()    = [],
  cleanup_value_store() = [],
  init_table()          = [],
  cleanup_table()       = [],
  get_table_iter()      = [],
  set_table()           = tracked_vars_used(instr.state),
  queue_deletes()       = [],
  queue_insert_value()  = tracked_vars_used(instr.value),
  queue_insert_tuple()  = [],
  push_call_info()      = [],
  pop_call_info         = [],
  runtime_check()       = tracked_vars_used(instr.cond) & [v : v <~ instr.vars, v :: TrkVar];


[TrkVar] vars_used(JumpInstr instr) =
  break_loop    = [],
  exit_block    = [],
  ret_val(e?)   = tracked_vars_used(e),
  terminate     = [];
