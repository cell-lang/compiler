([TrkVar]*, [TrkVar]*) build_live_vars_maps(NodeInfo* leaf_nodes, Nat** flow_map) {
  vars_used_map = (vars_used(n) : n <- leaf_nodes);
  vars_set_map = (vars_set(n) : n <- leaf_nodes);
  forward_flow_map = ((n : n <- ns, n > i) : ns @ i <- flow_map);
  backward_flow_map = (maybe_only((n : n <- ns, n <= i)) : ns @ i <- flow_map);

  curr_map = build_initial_map(forward_flow_map, vars_used_map, vars_set_map);
  loop
    new_map, start_idx = propagate_backward(curr_map, backward_flow_map, vars_set_map);
    break if start_idx == nothing;
    new_map = propagate_forward(new_map, value(start_idx), forward_flow_map, vars_set_map);
    break if new_map == curr_map;
    curr_map = new_map;
  ;

  after_instr_map = (live_vars_downstream(ns, curr_map) : ns <- flow_map);
  return (curr_map, after_instr_map);
}


[TrkVar]* build_initial_map(Nat** forward_flow_map, [TrkVar]* vars_used_map, [TrkVar]* vars_set_map) {
  len = |forward_flow_map|;
  rev_new_map = ();
  for ri < len:
    i = len - ri - 1;
    next_nodes = (nat(len-j-1) : j <- forward_flow_map(i));
    live_vars_downstream = live_vars_downstream(next_nodes, rev_new_map);
    live_vars = vars_used_map(i) & {live_vars_downstream - vars_set_map(i)};
    rev_new_map = (rev_new_map | live_vars);
  ;
  return reverse(rev_new_map);
}


([TrkVar]*, Maybe[Nat]) propagate_backward([TrkVar]* curr_map, Maybe[Nat]* backward_flow_map, [TrkVar]* vars_set_map) {
  new_map = (curr_map(s) & if t != nothing then {curr_map(value(t)) - vars_set_map(s)} else [] : t @ s <- backward_flow_map);
  len = |curr_map|;
  for ri < len:
    i = nat(len - ri - 1);
    return (new_map, just(i)) if new_map(i) != curr_map(i);
  ;
  return (new_map, nothing);
}


[TrkVar]* propagate_forward([TrkVar]* curr_map, Nat start_idx, Nat** forward_flow_map, [TrkVar]* vars_set_map) {
  len = |curr_map|;
  rev_new_map = ();
  for ri < len:
    i = len - ri - 1;
    live_vars = curr_map(i);
    if i <= start_idx:
      next_nodes = (nat(len-j-1) : j <- forward_flow_map(i));
      live_vars_downstream = live_vars_downstream(next_nodes, rev_new_map);
      live_vars = live_vars & {live_vars_downstream - vars_set_map(i)};
    ;
    rev_new_map = (rev_new_map | live_vars);
  ;
  return reverse(rev_new_map);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

([TrkVar]*, [TrkVar]*) ref_build_live_vars_maps(NodeInfo* leaf_nodes, Nat** flow_map) {
  vars_used_map = (vars_used(n) : n <- leaf_nodes);
  vars_set_map = (vars_set(n) : n <- leaf_nodes);
  curr_map = vars_used_map;
  loop
    new_map = (update_node(flow_map(i), curr_map, vars_used_map(i), vars_set_map(i)) : vs @ i <- curr_map);
    if new_map == curr_map:
      after_instr_map = (live_vars_downstream(ns, curr_map) : ns <- flow_map);
      return (curr_map, after_instr_map);
    ;
    curr_map = new_map;
  ;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[TrkVar] update_node(Nat* next_nodes, [TrkVar]* live_vars_map, [TrkVar] vars_used, [TrkVar] vars_set) =
  vars_used & {live_vars_downstream(next_nodes, live_vars_map) - vars_set};


[TrkVar] live_vars_downstream(Nat* next_nodes, [TrkVar]* live_vars_map) =
  seq_union((live_vars_map(id) : id <- next_nodes));
