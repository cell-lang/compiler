Nat+ choose_disp_args(NeType++ types, [TypeName -> Type] typedefs) {
  count = |types(0)|;
  ptypes = ((pseudotype(t, typedefs) : t <- ts) : ts <- types);

  ## IF THERE'S MORE THAN ONE CHOICE OF DISPATCH ARGUMENTS,
  ## WE SHOULD CHOOSE THE ONE THAT IS THE MOST EFFICIENT
  for n = 1...count {
    for idxs <- ordered_combinations(n, count)
      return idxs if are_sufficient(idxs, ptypes, typedefs);
  }

  fail;


  Bool are_sufficient(Nat+ arg_idxs, PseudoType++ ptypes, [TypeName -> Type] typedefs) {
    count = |ptypes|;
    for i1 < count-1; i2 = i1+1..count {
      pts1 = ptypes(i1);
      pts2 = ptypes(i2);
      // Two subsignatures are disjoint if and only if a pair of corresponding
      // sets/types are disjoint. If none of the corresponding pairs are disjoint
      // then you can build a tuple that belongs in both signatures by taking its
      // elements from the intersections of the corresponding pairs of sets/types
      disjoint = (j <~ arg_idxs : are_disjoint(pts1(j), pts2(j)));
      return false if not disjoint;
    }
    return true;
  }
}


// Nat+ optimal_dispatch_args([+[+NeType+]] signatures_sets, [TypeName -> Type] typedefs) {
Nat+ optimal_dispatch_args([+NeType+] signatures, [TypeName -> Type] typedefs) {
  ## THIS IS A HACK, THE FUNCTION WAS ORIGINALLY WRITTEN FOR A MORE GENERAL INPUT
  signatures_sets = [[s] : s <- signatures];

  arity = only([|s| : ss <- signatures_sets, s <- ss]); ## BAD
  ptypes = [[(pseudotype(t, typedefs) : t <- s) : s <- ss] : ss <- signatures_sets];

  ## IF THERE'S MORE THAN ONE CHOICE OF DISPATCH ARGUMENTS,
  ## WE SHOULD CHOOSE THE ONE THAT IS THE MOST EFFICIENT
  for n = 1 ... arity {
    for idxs <- ordered_combinations(n, arity)
      return idxs if are_sufficient(idxs, ptypes, typedefs);
  }

  fail;


  Bool are_sufficient(Nat+ args_idxs, [+[+PseudoType+]] psgns, [TypeName -> Type] typedefs) {
    ord_psgns = isort(psgns);
    count = |psgns|;
    for i1 < count-1; i2 = i1+1 .. count {
      // Two sets of subsignatures are disjoint if every pairs of
      // signatures from their cartesian product is disjoint. Otherwise
      // you could take a pair that belongs in both non-disjoint
      // signatures and that would belong to both sets of signatures
      for ps1 <- isort(ord_psgns(i1)); ps2 <- isort(ord_psgns(i2)) {
        disjoint = (j <~ args_idxs : are_disjoint(ps1(j), ps2(j)));
        return false if not disjoint;
      }
    }
    return true;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[Int+] retrieve_nested_int_seqs(Expr expr) =
  tuple_expr(es?)   = if es :: IntObj+
                        then [(match (e) object(n?) = n : e <- es)]
                        else seq_union((retrieve_nested_int_seqs(e) : e <- es)),
  _                 = retrieve_from_nested_exprs(expr, retrieve_nested_int_seqs);


[Int+] retrieve_nested_int_seqs(Program prg) =
  union([
    retrieve_from_nested_exprs(obj, retrieve_nested_int_seqs)
    : obj <- prg.fndefs | obj <- prg.proc_defs | obj <- prg.auto_defs | obj <- prg.data_bases
  ]);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  BoolExpr value_store_guard(ValueStoreType, AtomicExpr expr, Type type) =
    object                  |
    integer                 = true,
    mono_tagged_integer(s?) = if not is_subset(type, tag_obj_type(symb_type(s), integer))
                                then and_then(
                                       is_tagged_obj(expr),
                                       is_int(get_inner_obj(expr)),
                                       are_eq(get_tag(expr), object(s))
                                     )
                                else true;
}


<AtomicExpr, IntExpr> value_store_encoded_expr(ValueStoreType, AtomicExpr expr) =
  object                  = expr,
  integer                 = get_int_val(expr),
  mono_tagged_integer()   = get_int_val(get_inner_obj(expr));


Instr surr_to_decoded_value(WriteObjVar var, AnyValueStoreId store_id, ValueStoreType store_type, Int32Var surr) =
  match (store_type)
    object                  = surr_to_value(var, store_id, surr),
    integer                 = set_var(var, int_obj(surr_to_int_value(store_id, surr))),
    mono_tagged_integer(s?) = set_var(var, mk_tagged_obj(object(s), int_obj(surr_to_int_value(store_id, surr))));


Instr surr_to_decoded_value(IntVar var, AnyValueStoreId store_id, ValueStoreType store_type, Int32Var surr) =
  match (store_type)
    integer               = set_ivar(var, surr_to_int_value(store_id, surr)),
    object                = undefined, ## CAN THIS ACTUALLY HAPPEN?
    mono_tagged_integer() = undefined;


Instr surr_to_decoded_value(FloatVar var, AnyValueStoreId store_id, ValueStoreType store_type, Int32Var surr) =
  match (store_type)
    object                = set_fvar(var, float_value(surr_to_value(store_id, surr))),
    integer               = undefined,
    mono_tagged_integer() = undefined;


Instr surr_to_decoded_value(BoolVar var, AnyValueStoreId store_id, ValueStoreType store_type, Int32Var surr) =
  match (store_type)
    object                = set_bvar(var, bool_value(surr_to_value(store_id, surr))),
    integer               = undefined,
    mono_tagged_integer() = undefined;


Instr surr_to_decoded_value(LocOptTagRecVar var, AnyValueStoreId store_id, ValueStoreType store_type, Int32Var surr) =
  match (store_type)
    object                = set_var(var, surr_to_value(store_id, surr)),
    integer               = undefined,
    mono_tagged_integer() = undefined;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type GenVarType = obj, int, int32, float, bool, array, tag_rec,
                  set_it, seq_it, bin_rel_it, tern_rel_it, table_it, column_it, stream, vector;

type VarGen = CounterSet[GenVarType];


VarGen blank_var_gen = counter_set(nz_ctrs: []);


(T, VarGen) next_var(VarGen gen, GenVarType var_type, (Nat -> T) mk_var) =
  (mk_var(next_value(gen, var_type)), increment(gen, var_type));
  ## BUG BUG BUG: THE COMPILER FAILED TO DETECT THE WRONG NUMBER
  ## OF ARGUMENTS IN THE next_value() CALL, AND THE DESUGARING CRASHED
  ## WHAT'S GOING ON HERE? WAS IT BECAUSE IT WAS AN ARGUMENT TO A CLOSURE?
  // (mk_var(next_value(gen)), increment(gen, var_type));


(LocVar,       VarGen) next_obj_var(VarGen gen)   = next_var(gen, :obj, lvar);
(LocIntVar,    VarGen) next_int_var(VarGen gen)   = next_var(gen, :int, ivar);
(LocFloatVar,  VarGen) next_float_var(VarGen gen) = next_var(gen, :float, fvar);
(LocBoolVar,   VarGen) next_bool_var(VarGen gen)  = next_var(gen, :bool, bvar);
(Int32Var,     VarGen) next_int32_var(VarGen gen) = next_var(gen, :int32, ivar32);

(SeqItVar,     VarGen) next_seq_it_var(VarGen gen)      = next_var(gen, :seq_it, seq_it_var);
(SetItVar,     VarGen) next_set_it_var(VarGen gen)      = next_var(gen, :set_it, set_it_var);
(BinRelItVar,  VarGen) next_bin_rel_it_var(VarGen gen)  = next_var(gen, :bin_rel_it, bin_rel_it_var);
(TernRelItVar, VarGen) next_tern_rel_it_var(VarGen gen) = next_var(gen, :tern_rel_it, tern_rel_it_var);

(TableItVar, VarGen) next_table_it_var(VarGen gen, NzNat arity, Bool symmetric) =
  next_var(gen, :table_it, table_it_var($, arity, symmetric));

(ColumnItVar, VarGen) next_column_it_var(VarGen gen, ColumnRepr repr) =
  next_var(gen, :column_it, column_it_var($, repr));

(StreamVar,  VarGen) next_stream_var(VarGen gen)                      = next_var(gen, :stream, svar);
(VecVar,     VarGen) next_vector_var(VarGen gen, NzNat size)          = next_var(gen, :vector, vvar($, size));
(ArrayVar,   VarGen) next_array_var(VarGen gen, LowLevelEltRepr repr) = next_var(gen, :array, avar($, repr));
(ArrayVar,   VarGen) next_array_var(VarGen gen, OptTagRecRepr repr)   = next_var(gen, :array, avar($, :object));

(LocOptTagRecVar, VarGen) next_opt_tag_rec_var(VarGen gen, Symbol tag, Nat idx)  = next_var(gen, :tag_rec, opt_tag_rec_var($, tag, idx));

(LocIntVar*,  VarGen) next_int_vars(VarGen gen, Nat count)    = apply_seed(count, gen, next_int_var);
(Int32Var*,   VarGen) next_int32_vars(VarGen gen, Nat count)  = apply_seed(count, gen, next_int32_var);
(LocBoolVar*, VarGen) next_bool_vars(VarGen gen, Nat count)   = apply_seed(count, gen, next_bool_var);
(LocVar*,     VarGen) next_obj_vars(VarGen gen, Nat count)    = apply_seed(count, gen, next_obj_var);
(StreamVar*,  VarGen) next_stream_vars(VarGen gen, Nat count) = apply_seed(count, gen, next_stream_var);

([T -> Int32Var], VarGen) next_int32_vars(VarGen gen, [T] keys) {
  vars, ret_gen = next_int32_vars(gen, |keys|);
  return ([k -> vars(i) : k @ i <~ isort(keys)], ret_gen);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program {
  ## WHAT'S THE DIFFERENCE BETWEEN THIS AND state_type()? IS IT JUST THE DEPTH?
  ## AND DO I REALLY NEED THIS ONE, OR CAN I MAKE DO WITH JUST state_type()?
  // NeType deep_state_type(Database data_base) {
  //   state_var_field_types = [object(bare_id(v)) -> info.type : v, info <- data_base.state_vars];
  //   rel_var_field_types = [
  //       object(bare_id(v)) -> {
  //         sgns = info.signatures;
  //         return type_set(ne_union_superset([only(s) : s <- sgns])) if sgns :: [+(NeType)];
  //         return type_bin_rel(sgns, false)  if sgns :: [+(NeType, NeType)];
  //         return type_tern_rel(sgns, false) if sgns :: [+(NeType, NeType, NeType)];
  //         fail; ## BAD BAD BAD
  //       }
  //     : v, info <- data_base.rel_vars
  //   ];
  //   nested_db_field_types = [object(bare_id(v)) -> deep_state_type(automaton_by_id(s)) : v, s <- data_base.nested_dbs];
  //   all_field_types = state_var_field_types & rel_var_field_types & nested_db_field_types;
  //   return empty_rel_type if all_field_types == [];
  //   all_fields = [s -> (type: t, optional: false) : s, t <- all_field_types];
  //   return ne_record_type(all_fields);
  // }


  NeType deep_state_type(Automaton auto) {
    inputs = [v -> i.type : v, i <- auto.inputs, not i.discrete and not i.volatile];
    state_vars = [v -> s.type : v, s <- auto.state, not s.volatile];
    nested_autos = [v -> deep_state_type(automaton_by_id(a.type)) : v, a <- auto.nested_autos, not a.volatile];

    fields = inputs & state_vars & nested_autos;
    return empty_rel_type if fields == [];

    return ne_record_type([object(bare_id(v)) -> (type: t, optional: false) : v, t <- fields]);
  }
}
