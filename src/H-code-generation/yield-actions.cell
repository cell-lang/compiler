type YieldValueAction   = yield_value_action(var: AnyLocVar, expr: Expr, instrs: Instr+);

type SetYieldAction     = set_yield_action(var: Maybe[StdVar], src_set: Expr, next: YieldAction);
type RelYieldAction     = rel_yield_action(
                            vars: Maybe[StdVar]+, src_rel: Expr, args: Maybe[Expr]+, next: YieldAction
                          );

type RelVarYieldAction  = relvar_yield_action(
                            vars: Maybe[StdVar]+, relvar: AnyRelVar, args: Maybe[Expr]+, next: YieldAction
                          );

type SeqYieldAction     = seq_yield_action(
                            vars: Maybe[StdVar]+, idx_var: Maybe[StdVar], src_seq: Expr, next: YieldAction
                          );

type MatchYieldAction   = match_yield_action(ptrn: Pattern, expr: Expr, next: YieldAction);
type LetYieldAction     = let_yield_action(var: StdVar, expr: Expr, next: YieldAction);
type CondYieldAction    = cond_yield_action(cond: Expr, next: YieldAction);

type YieldActions       = yield_actions(YieldAction+);

type YieldAction        = YieldValueAction, SetYieldAction, RelYieldAction, RelVarYieldAction, SeqYieldAction,
                          MatchYieldAction, LetYieldAction, CondYieldAction, YieldActions;

////////////////////////////////////////////////////////////////////////////////

YieldValueAction yield_value_action(AnyLocVar v, Expr e, Instr+ is) =
  yield_value_action(var: v, expr: e, instrs: is);

CondYieldAction cond_yield_action(Expr c, YieldAction a) = cond_yield_action(cond: c, next: a);

RelVarYieldAction relvar_yield_action(Maybe[StdVar]+ vs, AnyRelVar r, Maybe[Expr]+ as, YieldAction a) =
  relvar_yield_action(vars: vs, relvar: r, args: as, next: a);

YieldAction yield_actions(YieldAction+ actions) =
  if |actions| != 1 then :yield_actions(actions) else only(actions);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program           : Program,
         typedefs          : [TypeName -> NeType],
         context           : Context,
         cluster           : Expr+,
         types             : Type+,
         environments      : [EnvVar -> Type]+,
         surrogates        : [SurrExpr -> ObjExpr],
         expr_id           : Nat,
         options           : CompOptions
{
  YieldAction yield_action(Clause cls, YieldAction next) {
    return match (cls)
      set_or_seq_clause() = set_or_seq_yield_action(cls.var, cls.src, next),
      rel_clause()        = rel_yield_action(vars: cls.vars, src_rel: cls.src, args: cls.args, next: next),
      relvar_clause()     = relvar_yield_action(vars: cls.vars, relvar: cls.rel_var, args: cls.args, next: next),
      seq_clause()        = seq_yield_action(vars: cls.vars, idx_var: cls.idx_var, src_seq: cls.src, next: next),
      and_clause()        = yield_action(cls.left, yield_action(cls.right, next)),
      or_clause()         = yield_actions((yield_action(cls.left, next), yield_action(cls.right, next))),
      match_clause()      = match_yield_action(ptrn: cls.ptrn, expr: cls.expr, next: next),
      asgnm_clause()      = let_yield_action(var: cls.var, expr: cls.expr, next: next),
      filter_clause(e?)   = cond_yield_action(cond: e, next: next);


    YieldAction set_or_seq_yield_action(Maybe[StdVar] var, Expr src, YieldAction next) {
      src_type = subexpr_type(src);
      return if is_subset(src_type, type_set)
        then set_yield_action(var: var, src_set: src, next: next)
        else seq_yield_action(vars: (var), idx_var: nothing, src_seq: src, next: next);
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  Instr* yield_action_opt_code(YieldAction action, VarGen var_gen) =
    yield_value_action()    = yield_value_action_opt_code(action, var_gen),
    set_yield_action()      = set_yield_action_opt_code(action, var_gen),
    rel_yield_action()      = rel_yield_action_opt_code(action, var_gen),
    relvar_yield_action()   = if is_columnar_relvar(action.relvar) then
                                columnar_relvar_yield_action_opt_code(action, var_gen)
                              else if is_ternary_slave_column(action.relvar) then
                                ternary_slave_column_yield_action_opt_code(action, var_gen)
                              else
                                relvar_yield_action_opt_code(action, var_gen),
    seq_yield_action()      = seq_yield_action_opt_code(action, var_gen),
    match_yield_action()    = match_yield_action_opt_code(action, var_gen),
    let_yield_action()      = let_yield_action_opt_code(action, var_gen),
    cond_yield_action()     = cond_yield_action_opt_code(action, var_gen),
    yield_actions(as?)      = join((yield_action_opt_code(a, var_gen) : a <- as));


  // relvar_yield_action(vars: StdVar+, relvar: AnyRelVar, args: Maybe[Expr]+, next: YieldAction)
  Instr* ternary_slave_column_yield_action_opt_code(RelVarYieldAction action, VarGen var_gen) {
    fail if |action.args| != 3;

    vars = action.vars;
    relvar = action.relvar;
    a0, a1, a2 = action.args;
    next = action.next;

    return match (a0, a1, a2)
      nothing,    nothing,    nothing   = full_relvar_iter_code(vars, relvar, next, var_gen), // a b c <- relvar
      nothing,    just(e?),   nothing   = relvar_by_one_arg_iter_code(vars, relvar, e, 1, next, var_gen), // a c <- relvar(?, b, ?)
      just(e?),   nothing,    nothing   = relvar_by_one_arg_iter_code(vars, relvar, e, 0, next, var_gen), // b c <- relvar(a, ?, ?)
      just(e0?),  just(e1?),  nothing   = relvar_by_first_and_second_arg_iter_code(vars, relvar, e0, e1, next, var_gen), // c <- relvar(a, b, ?)
      _,          _,          _         = undefined;



    Instr* full_relvar_iter_code(Maybe[StdVar]+ vars, AnyRelVar relvar, YieldAction next_action, VarGen init_var_gen) {
      assert |vars| == 3;

      surr_var_01, var_gen = next_int32_var(init_var_gen);
      surr_var_0, var_gen = next_int32_var(var_gen);
      surr_var_1, var_gen = next_int32_var(var_gen);

      // Selecting the candidate tables among those the logical relation is partitioned into
      // In this specific case, that means all of them
      candidate_tables = overlapping_tables(relvar, (nothing, nothing, nothing));

      code = ();

      // Iterating through all candidate tables
      for tv <- isort(candidate_tables) {
        info = cast_slave_column(table_info(tv));
        sign = table_signature(tv);
        reprs = (low_level_repr(t) : t <- sign);
        ll_vars = (apply(v, low_level_var(reprs(i), $)) : v @ i <- vars);

        store_ids = (table_col_store_id(tv, i) : i <- (0, 1));
        store_types = (value_store_type(rel_auto_type(relvar), unqualified(id)) : id <- store_ids);
        store_ids = (substitute(id) : id <- store_ids);

        col_repr = column_repr(sign(2));
        it_var, var_gen = next_slave_column_it_var(var_gen, col_repr); ## DO WE NEED TO USE A DIFFERENT ITERATOR VAR EVERY TIME? SEE ALSO ANALOGUES DOWN BELOW

        master_table = master_table(tv);
        master_table_info = cast_master_bin_table(table_info(master_table));
        master_table = substitute(master_table);
        vars_setup_code = (
          set_ivar32(surr_var_01, get_unknown_arg(it_var, 0)),
          set_ivar32(surr_var_0, get_arg_by_assoc_surr(master_table, master_table_info, 0, surr_var_01)) if ll_vars(0) != nothing,
          set_ivar32(surr_var_1, get_arg_by_assoc_surr(master_table, master_table_info, 1, surr_var_01)) if ll_vars(1) != nothing,
          surr_to_decoded_value(value_unsafe(ll_vars(0)), store_ids(0), store_types(0), surr_var_0) if ll_vars(0) != nothing,
          surr_to_decoded_value(value_unsafe(ll_vars(1)), store_ids(1), store_types(1), surr_var_1) if ll_vars(1) != nothing,
          set_any_var(value_unsafe(ll_vars(2)), column_lookup(substitute(tv), table_info(tv), surr_var_01)) if ll_vars(2) != nothing
        );

        new_surrs = [value(v) -> obj_expr(value_unsafe(ll_vars(i))) : v @ i <- vars, v != nothing];
        next_action_surrs = surrogates & new_surrs;
        action_code = yield_action_opt_code(next_action, var_gen, surrogates = next_action_surrs);

        loop_code = (break_if(is_out_of_range(it_var))) & vars_setup_code & action_code & (move_forward(it_var));

        table_code = (
          get_slave_col_iter(it_var, substitute(tv), info, (nothing : i < 3)),
          repeat(nonempty(loop_code))
        );

        code = code & table_code;
      }

      return code;
    }


    Instr* relvar_by_one_arg_iter_code(Maybe[StdVar]+ vars, AnyRelVar relvar, Expr bound_arg, <0..1> bound_arg_idx, YieldAction next, VarGen init_var_gen) {
      // b c <- relvar(a, ?, ?)
      fail if |vars| != 2;

      free_arg_idx = if bound_arg_idx == 0 then 1 else 0;

      free_arg_var, value_var = vars;

      assoc_surr_var, var_gen = next_int32_var(init_var_gen);
      bound_surr_var, var_gen = next_int32_var(var_gen);
      free_surr_var, var_gen = next_int32_var(var_gen);

      // it_var_id, var_gen = next_table_it_var_id(var_gen);

      bound_arg_eval_code, bound_arg_alias, var_gen = opt_eval_info(bound_arg, var_gen);

      bound_arg_type = subexpr_type(bound_arg);
      return (terminate(true)) if bound_arg_type == empty_type;

      // Selecting the candidate tables among those the logical relation is partitioned into
      candidate_tables = overlapping_tables(relvar, (just(bound_arg_type), nothing, nothing));

      code = bound_arg_eval_code;
      for tv <- candidate_tables {
        master_table = master_table(tv);
        master_table_info = cast_master_bin_table(table_info(master_table));

        sign = table_signature(tv);
        free_arg_repr = low_level_repr(sign(free_arg_idx));
        value_repr = low_level_repr(sign(2));
        ll_free_arg_var = apply(free_arg_var, low_level_var(free_arg_repr, $));
        ll_value_var = apply(value_var, low_level_var(value_repr, $));

        // it_var = table_it_var(it_var_id, [bound_arg_idx], master_table_info, 2, false);

        bound_arg_store_id = table_col_store_id(tv, bound_arg_idx);
        free_arg_store_id = table_col_store_id(tv, free_arg_idx);
        assert bound_arg_store_id == table_col_store_id(master_table, bound_arg_idx) and free_arg_store_id == table_col_store_id(master_table, free_arg_idx);

        bound_arg_store_type = value_store_type(rel_auto_type(relvar), unqualified(bound_arg_store_id));
        free_arg_store_type = value_store_type(rel_auto_type(relvar), unqualified(free_arg_store_id));

        bound_arg_store_id = substitute(bound_arg_store_id);
        free_arg_store_id = substitute(free_arg_store_id);

        new_surrs = [
          value(free_arg_var) -> obj_expr(value_unsafe(ll_free_arg_var)) if free_arg_var != nothing,
          value(value_var) -> obj_expr(value_unsafe(ll_value_var)) if value_var != nothing
        ];
        next_action_surrs = surrogates & new_surrs;
        action_code = yield_action_opt_code(next, var_gen, surrogates = next_action_surrs);

        loop_body_instr = do_if(
          table_contains(substitute(tv), table_info(tv), (just(assoc_surr_var), nothing), false),
          ( surr_to_decoded_value(value(ll_free_arg_var), free_arg_store_id, free_arg_store_type, free_surr_var) if ll_free_arg_var != nothing,
            set_any_var(
              value(ll_value_var),
              column_lookup(substitute(tv), table_info(tv), assoc_surr_var)
            ) if ll_value_var != nothing
          ) & action_code
        );

        iter = get_table_foreach_iter(
          substitute(master_table),
          master_table_info,
          (maybe(bound_surr_var, i == bound_arg_idx) : i <- (0, 1)),
          (maybe(free_surr_var, i != bound_arg_idx)  : i <- (0, 1)),
          assoc_surr_var
        );

        value_to_surr_expr = value_to_surr(bound_arg_store_id, bound_arg_store_type, value_store_encoded_expr(bound_arg_store_type, bound_arg_alias));

        code = code & (
          set_ivar32(bound_surr_var, value_to_surr_expr),
          do_if_not(
            is_eq(bound_surr_var, -1),
            foreach(iter, (loop_body_instr))

            ## WASN'T THE (just(bound_surr_var), nothing) A BUG? WHAT IF THE BOUND INDEX IS THE SECOND ONE?
            ## TEST THIS WITH THE OLD VERSION OF THE COMPILER

            // ( get_table_iter(it_var, substitute(master_table), master_table_info, (just(bound_surr_var), nothing)),
            //   repeat((
            //     break_if(is_out_of_range(it_var)),

            //     set_ivar32(free_surr_var, get_unknown_arg(it_var, 0)),
            //     set_ivar32(assoc_surr_var, get_assoc_surr(substitute(master_table), master_table_info, (bound_surr_var, free_surr_var))),

            //     loop_body_instr

            //     move_forward(it_var)
            //   ))
            // )
          )
        );
      }

      return code;
    }


    Instr* relvar_by_first_and_second_arg_iter_code(Maybe[StdVar]+ vars, AnyRelVar relvar, Expr arg_0, Expr arg_1, YieldAction next, VarGen init_var_gen) {
      value_var = only_unsafe(vars);

      surr_var_01, var_gen = next_int32_var(init_var_gen);
      surr_var_0, var_gen = next_int32_var(var_gen);
      surr_var_1, var_gen = next_int32_var(var_gen);

      args_eval_code, args_aliases, var_gen = opt_eval_info((arg_0, arg_1), var_gen);

      arg_0_type = subexpr_type(arg_0);
      arg_1_type = subexpr_type(arg_1);
      return (terminate(true)) if arg_0_type == empty_type or arg_1_type == empty_type;

      // Selecting the candidate tables among those the logical relation is partitioned into
      candidate_tables = overlapping_tables(relvar, (just(arg_0_type), just(arg_1_type), nothing));

      cases = [{
        master_table = master_table(tv);
        master_table_info = cast_master_bin_table(table_info(master_table));

        sign = table_signature(tv);
        value_repr = low_level_repr(sign(2));
        ll_value_var = apply(value_var, low_level_var(value_repr, $));

        store_0_id = table_col_store_id(tv, 0);
        store_1_id = table_col_store_id(tv, 1);
        assert store_0_id == table_col_store_id(master_table, 0) and store_1_id == table_col_store_id(master_table, 1);

        store_0_type = value_store_type(rel_auto_type(relvar), unqualified(store_0_id));
        store_1_type = value_store_type(rel_auto_type(relvar), unqualified(store_1_id));

        store_0_id = substitute(store_0_id);
        store_1_id = substitute(store_1_id);

        new_surrs = [value(value_var) -> obj_expr(value_unsafe(ll_value_var)) if value_var != nothing];
        next_action_surrs = surrogates & new_surrs;
        action_code = yield_action_opt_code(next, var_gen, surrogates = next_action_surrs);

        code = (
          set_ivar32(surr_var_0, value_to_surr(store_0_id, store_0_type, value_store_encoded_expr(store_0_type, args_aliases(0)))),
          do_if_not(
            is_eq(surr_var_0, -1),
            ( set_ivar32(surr_var_1, value_to_surr(store_1_id, store_1_type, value_store_encoded_expr(store_1_type, args_aliases(1)))),
              do_if_not(
                is_eq(surr_var_1, -1),
                ( set_ivar32(surr_var_01, get_assoc_surr(substitute(master_table), master_table_info, (surr_var_0, surr_var_1))),
                  do_if_not(
                    is_eq(surr_var_01, -1),
                    do_if(
                      table_contains(substitute(tv), table_info(tv), (just(surr_var_01), nothing), false),
                      ( set_any_var(
                          value(ll_value_var),
                          column_lookup(substitute(tv), table_info(tv), surr_var_01)
                        ) if ll_value_var != nothing
                      ) & action_code

                      // ( set_any_var(
                      //     value(ll_value_var),
                      //     column_lookup(substitute(tv), surr_var_01, column_repr(sign(2)))
                      //   ),
                      //   do_if_not(
                      //     is_null_value(ll_value_var),
                      //     action_code
                      //   )
                      // )

                    )
                  )
                )
              )
            )
          )
        );

        return ((sign(0), sign(1)), code);
      } : tv <- candidate_tables];

      iter_code = if |cases| != 1
        ## BUG BUG BUG: CAN I ACTUALLY DO THIS OR ARE THERE EDGE CASES THAT MAY CAUSE IT TO FAIL?
        then (execute_block(dynamic_dispatch_code(args_aliases, cases)))
        else right(only(cases));

      return args_eval_code & iter_code;
    }
  }


  // relvar_yield_action(vars: StdVar+, relvar: AnyRelVar, args: Maybe[Expr]+, next: YieldAction)
  Instr* columnar_relvar_yield_action_opt_code(RelVarYieldAction action, VarGen var_gen) {
    fail if not action.args :: (Maybe[ExprRef], Nothing);

    arg0 = action.args(0);
    if arg0 == nothing {
      fail if |action.vars| != 2;
      var_0, var_1 = action.vars;
      return full_column_iter_code(var_0, var_1, action.relvar, action.next, var_gen);
    }
    else {
      key_arg = value(arg0);
      value_var = only_unsafe(action.vars);
      return one_value_iter_code(key_arg, value_var, action.relvar, action.next, var_gen);
    }


    Instr* one_value_iter_code(Expr key_arg, Maybe[StdVar] value_var, AnyRelVar relvar, YieldAction next_action, VarGen init_var_gen) {
      key_arg_eval_code, key_arg_alias, var_gen = opt_eval_info(key_arg, init_var_gen);

      key_arg_surr, var_gen = next_int32_var(var_gen);

      // Selecting the candidate tables among those the logical relation is partitioned into
      key_arg_type = subexpr_type(key_arg);
      return (terminate(true)) if key_arg_type == empty_type;
      candidate_tables = overlapping_tables(relvar, (just(key_arg_type), nothing));

      cases = [{
        sign = table_signature(tv);
        value_repr = low_level_repr(sign(1));
        ll_value_var = apply(value_var, low_level_var(value_repr, $));

        store_id = table_col_store_id(tv, 0);
        store_type = value_store_type(rel_auto_type(relvar), unqualified(store_id));
        store_id = substitute(store_id);

        new_surrs = [value(value_var) -> obj_expr(value_unsafe(ll_value_var)) if value_var != nothing];
        next_action_surrs = surrogates & new_surrs;
        action_code = yield_action_opt_code(next_action, var_gen, surrogates = next_action_surrs);

        code = (
          set_ivar32(key_arg_surr, value_to_surr(store_id, store_type, value_store_encoded_expr(store_type, key_arg_alias))),
          do_if_not(
            is_eq(key_arg_surr, -1),
            do_if(
              table_contains(tv, table_info(tv), (just(key_arg_surr), nothing), false),
              ( set_any_var(
                  value(ll_value_var),
                  column_lookup(substitute(tv), table_info(tv), key_arg_surr)
                ) if ll_value_var != nothing
              ) & action_code
            )
          )
        );

        return ((sign(0)), code);
      } : tv <- candidate_tables];

      iter_code = if |cases| != 1
        then (execute_block(dynamic_dispatch_code((key_arg_alias), cases)))
        else right(only(cases));

      return key_arg_eval_code & iter_code;
    }


    Instr* full_column_iter_code(Maybe[StdVar] var_0, Maybe[StdVar] var_1, AnyRelVar relvar, YieldAction next_action, VarGen init_var_gen) {
      if var_0 != nothing {
        surr_var_0 = shadow_surr_var(value(var_0));
        var_gen = init_var_gen;
      }
      else
        surr_var_0, var_gen = next_int32_var(init_var_gen);

      // Selecting the candidate tables among those the logical relation is partitioned into
      // In this specific case, that means all of them
      candidate_tables = overlapping_tables(relvar, (nothing, nothing));

      code = ();

      // Iterating through all candidate tables
      for tv <- isort(candidate_tables) {
        sign = table_signature(tv);
        repr_0 = low_level_repr(sign(0));
        repr_1 = low_level_repr(sign(1));
        ll_var_0 = apply(var_0, low_level_var(repr_0, $));
        ll_var_1 = apply(var_1, low_level_var(repr_1, $));

        store_id = table_col_store_id(tv, 0);
        store_type = value_store_type(rel_auto_type(relvar), unqualified(store_id));
        store_id = substitute(store_id);

        mandatory = column_is_mandatory(tv);
        col_repr = column_repr(sign(1));

        it_var, var_gen = next_column_it_var(var_gen, mandatory, col_repr);

        vars_setup_code = (
          set_ivar32(surr_var_0, get_unknown_arg(it_var, 0)),
          surr_to_decoded_value(value(ll_var_0), store_id, store_type, surr_var_0) if ll_var_0 != nothing,
          set_any_var(value(ll_var_1), column_lookup(substitute(tv), table_info(tv), surr_var_0)) if ll_var_1 != nothing
        );

        new_surrs = [
          value(var_0) -> obj_expr(value_unsafe(ll_var_0)) if var_0 != nothing,
          value(var_1) -> obj_expr(value_unsafe(ll_var_1)) if var_1 != nothing
        ];
        next_action_surrs = surrogates & new_surrs;
        action_code = yield_action_opt_code(next_action, var_gen, surrogates = next_action_surrs);

        loop_code = (break_if(is_out_of_range(it_var))) & vars_setup_code & action_code & (move_forward(it_var));

        table_code = (
          get_column_iter(it_var, substitute(tv), cast_any_bin_col(table_info(tv))),
          repeat(nonempty(loop_code))
        );

        code = code & table_code;
      }

      return code;
    }
  }


  // relvar_yield_action(vars: StdVar+, relvar: AnyRelVar, args: Maybe[Expr]+, next: YieldAction)
  Instr* relvar_yield_action_opt_code(RelVarYieldAction action, VarGen init_var_gen) {
    args = action.args;
    set_args = values(args);

    bound_args_idxs = (i : a @ i <- args, a != nothing);
    free_args_idxs = (i : a @ i <- args, a == nothing);
    arg_idx_bound_arg_idx = [i -> j : i @ j <- bound_args_idxs];
    arg_idx_free_arg_idx = [i -> j : i @ j <- free_args_idxs];

    args_eval_code, args_aliases, var_gen = opt_eval_info(set_args, init_var_gen);

    surr_vars, var_gen = next_int32_vars(var_gen, |set_args|);
    shadow_surr_vars_map, var_gen = next_int32_vars(var_gen, [i : v @ i <- action.vars, v != nothing]);
    shadow_surr_vars = ({
      if a == nothing {
        // The argument is a free one
        free_arg_idx = arg_idx_free_arg_idx(i);
        if action.vars(free_arg_idx) != nothing
          // There's a variable for it
          return just(shadow_surr_vars_map(free_arg_idx));
      }
      return nothing;
    } : a @ i <- args);

    surr_args = (apply(a, surr_vars(arg_idx_bound_arg_idx(i))) : a @ i <- args);

    assoc_surr_var, var_gen = next_int32_var(var_gen);

    symmetric = symmetric(action.relvar);

    // Selecting the candidate tables among those the logical relation is partitioned into
    args_types = (apply(a, subexpr_type) : a <- action.args);
    return (terminate(true)) if not args_types :: Maybe[NeType]+;
    candidate_tables = overlapping_tables(action.relvar, args_types);

    code = args_eval_code;

    // Iterating through all candidate tables
    for tv <- isort(candidate_tables) {
      assert (a <- surr_args : a == nothing);

      tv_info = cast_any_surr_table(table_info(tv));

      sign = table_signature(tv);
      vars_types = (sign(free_args_idxs(i)) : i < |action.vars|);
      low_level_vars = (apply(v, low_level_var(low_level_repr(vars_types(i)), $)) : v @ i <- action.vars);

      // it_var = table_it_var(it_var_id, set(bound_args_idxs), tv_info, |args|, symmetric);

      vars_setup_code = ({
        shadow_surr_var = shadow_surr_vars_map(i);
        store_id = table_col_store_id(tv, free_args_idxs(i));
        store_type = value_store_type(rel_auto_type(action.relvar), unqualified(store_id));
        store_id = substitute(store_id);
        return surr_to_decoded_value(value(v), store_id, store_type, shadow_surr_var);
        // return (
        //   set_ivar32(shadow_surr_var, get_unknown_arg(it_var, i)),
        //   surr_to_decoded_value(value(v), store_id, store_type, shadow_surr_var)
        // );
      } : v @ i <- low_level_vars, v != nothing);

      new_surrs = [
        value(v) -> obj_expr(value_unsafe(low_level_vars(i)))
        : v @ i <- action.vars, v != nothing
      ];
      next_action_surrs = surrogates & new_surrs;
      action_code = yield_action_opt_code(action.next, var_gen, surrogates = next_action_surrs);

      iter = get_table_foreach_iter(substitute(tv), tv_info, nonempty(surr_args), nonempty(shadow_surr_vars));
      table_code = (foreach(iter, vars_setup_code & action_code));

      // loop_code = vars_setup_code & action_code;

      // table_code = (
      //   get_table_iter(it_var, substitute(tv), tv_info, nonempty(surr_args)),
      //   repeat(nonempty(loop_code))
      // );

      for e @ i <- reverse(args_aliases) {
        idx = rat(bound_args_idxs, i);
        arg_type = value_unsafe(args_types(idx));
        store_id = table_col_store_id(tv, idx);
        store_type = value_store_type(rel_auto_type(action.relvar), unqualified(store_id));
        store_id = substitute(store_id);
        surr_var = rat(surr_vars, i);
        table_code = opt_do_if(
          value_store_guard(store_type, e, arg_type),
          ( set_ivar32(surr_var, value_to_surr(store_id, store_type, value_store_encoded_expr(store_type, e))),
            do_if_not(is_eq(surr_var, -1), table_code)
          )
        );
      }

      code = code & table_code;
    }

    return code;
  }


  // rel_yield_action(vars: StdVar+, src_rel: Expr, args: Maybe[Expr]+, next: YieldAction)
  Instr* rel_yield_action_opt_code(RelYieldAction action, VarGen init_var_gen) {
    args_surrs : Maybe[ObjExpr]*;

    code, src_surr, var_gen = opt_eval_info(action.src_rel, init_var_gen);
    if |action.args| == 2 {
      it_var, var_gen = next_bin_rel_it_var(var_gen);
    }
    else {
      assert |action.args| == 3;
      it_var, var_gen = next_tern_rel_it_var(var_gen);
    }

    args_surrs = ();
    for a <- action.args {
      if a != nothing {
        arg_code, arg_surr, var_gen = opt_eval_info(value(a), var_gen);
        code = code & arg_code;
        args_surrs = (args_surrs | just(arg_surr));
      }
      else {
        args_surrs = (args_surrs | nothing);
      }
    }
    code = (code | get_any_rel_iter(it_var, src_surr, args_surrs));

    body = (break_if(is_out_of_range(it_var)));

    vars_idxs = (i : a @ i <- action.args, a == nothing);
    body = body & (get_curr_arg(value(v), it_var, vars_idxs(i)) : v @ i <- action.vars, v != nothing);

    body = body & yield_action_opt_code(action.next, var_gen);
    body = (body | move_forward(it_var));

    return (code | repeat(body));
  }


  // yield_value_action(var: LocVar, expr: Expr, instrs: Instr+)
  Instr* yield_value_action_opt_code(YieldValueAction action, VarGen var_gen) {
    code, surr, _ = opt_eval_info(action.expr, var_gen);
    code = store_result(code, surr, action.var);
    return code & action.instrs;
  }


  // set_yield_action(var: Mayb[StdVar], src_set: Expr, next: YieldAction)
  Instr* set_yield_action_opt_code(SetYieldAction action, VarGen init_var_gen) {
    src_eval_code, src_surr, var_gen = opt_eval_info(action.src_set, init_var_gen);
    it_var, var_gen = next_set_it_var(var_gen);

    nested_code = yield_action_opt_code(action.next, var_gen);

    return src_eval_code & (
      get_iter(it_var, src_surr),
      repeat((
        break_if(is_out_of_range(it_var)),
        set_var(value(action.var), get_curr_obj(it_var)) if action.var != nothing
        ) & nested_code & (
        move_forward(it_var)
      ))
    );
  }


  // seq_yield_action(vars: Maybe[StdVar]+, idx_var: Maybe[StdVar], src_seq: Expr, next: YieldAction)
  Instr* seq_yield_action_opt_code(SeqYieldAction action, VarGen init_var_gen) {
    // Calculating source type, and returning early if the type is trivial
    src_type = subexpr_type(action.src_seq);
    if src_type == empty_type
      return (terminate);
    else if is_subset(src_type, empty_seq_type)
      return ();

    // Types of elements of source and destination sequences
    src_elt_type = seq_elem_supertype(src_type);
    elt_type = subexpr_type(action.src_seq);
    assert src_elt_type != empty_type and elt_type != empty_type;
    fail if src_elt_type == empty_type or elt_type == empty_type;

    // Low-level representation of elements of source and destination sequences
    src_repr = opt_repr(src_elt_type);

    // Evaluation of source expression
    eval_code, src_surr, var_gen = opt_eval_info(action.src_seq, init_var_gen);
    if not src_surr :: <LocVar, StdVar> {
      src_var, var_gen = next_obj_var(var_gen);
      eval_code = (eval_code | set_var(src_var, src_surr));
      src_surr = src_var;
    }

    // Temporary buffer for source data
    src_array_var, var_gen = next_array_var(var_gen, src_repr);

    // Input sequence size variable
    array_size_var, var_gen = next_int32_var(var_gen);
    set_size_var = set_ivar32(array_size_var, get_size(src_surr));

    vars = action.vars;
    body = ();

    if |vars| == 1 {
      var = only(vars); ## CHECK IF THIS IS ALWAYS VERIFIED...
      if var != nothing {
        var = value(var);
        it_var = low_level_var(src_repr, var);
        surrs = surrogates & [var -> obj_expr(it_var) if it_var != var];
      }
      else {
        ## THIS IS UNNECESSARY, BECAUSE THE VALUE IS NOT BEING USED,
        ## BUT SINCE IT'S SUCH A MARGINAL USE CASE...
        it_var, var_gen = next_var(src_repr, var_gen);
        surrs = surrogates;
      }
    }
    else {
      assert src_repr == :object;
      vars_types = tuple_field_supertypes(src_elt_type, |vars|);
      ## REMOVE WHEN DONE
      assert vars_types == (restricted_seq_elem_supertype(src_elt_type, singleton_type(i)) : i < |vars|);
      reprs = (opt_repr(t) : t <- vars_types);
      it_var, var_gen = next_obj_var(var_gen);
      surrs = surrogates;
      for mv @ i <- vars {
        if mv != nothing {
          v = value(mv);
          phys_var = low_level_var(reprs(i), v);
          surrs = surrs & [v -> obj_expr(phys_var) if v != phys_var];
          body = (body | set_any_var(phys_var, at(it_var, i, :object)));
        }
      }
    }

    // Index variables
    hidden_idx_var, var_gen = next_int32_var(var_gen);
    surrs = surrs & [value(action.idx_var) -> int_obj(hidden_idx_var)] if action.idx_var != nothing;

    // Evaluation of nested yield action
    body = body & yield_action_opt_code(action.next, var_gen, surrogates = surrs);

    // Looping over the source sequence
    loop_instr_iter = seq_iter(
      seq:        src_surr,
      src_array:  src_array_var,
      // tmp_buffer: array_var,
      count_var:  array_size_var,
      idx_var:    hidden_idx_var,
      it_var:     it_var
    );
    loop_instr = foreach(loop_instr_iter, body);

    return (eval_code | set_size_var, loop_instr);
  }


  // match_yield_action(ptrn: Pattern, expr: Expr, next: YieldAction)
  Instr* match_yield_action_opt_code(MatchYieldAction action, VarGen init_var_gen) {
    eval_code, expr_surr, var_gen = opt_eval_info(action.expr, init_var_gen);
    expr_type = subexpr_type(action.expr);

    ptrn_env = generate_env(action.ptrn, expr_type);
    vars_reprs = [v -> low_level_var(opt_repr(t), v) : v t <- ptrn_env];
    surrs = surrogates & [v -> obj_expr(pv) : v pv <- vars_reprs];

    let surrogates = surrs, vars_reprs = vars_reprs {
      nested_code = yield_action_opt_code(action.next, var_gen);
      code = opt_ptrn_match_code(action.ptrn, expr_surr, expr_type, nested_code);
    }

    return eval_code & code;
  }


  // let_yield_action(var: StdVar, expr: Expr, next: YieldAction);
  Instr* let_yield_action_opt_code(LetYieldAction action, VarGen init_var_gen) {
    repr = opt_repr(subexpr_type(action.expr));
    phys_var = low_level_var(repr, action.var);
    eval_code, surr, var_gen = opt_eval_info(action.expr, init_var_gen);
    eval_code = store_result(eval_code, surr, phys_var);
    surrs = surrogates & [action.var -> obj_expr(phys_var) if action.var != phys_var];
    nested_code = yield_action_opt_code(action.next, var_gen, surrogates = surrs);
    return eval_code & nested_code;
  }


  // cond_yield_action(cond: Expr, next: YieldAction);
  Instr* cond_yield_action_opt_code(CondYieldAction action, VarGen init_var_gen) {
    eval_code, cond_surr, var_gen = opt_eval_info(action.cond, init_var_gen);
    nested_code = yield_action_opt_code(action.next, var_gen);
    return (eval_code | do_if(bool_value(cond_surr), nested_code));
  }
}
