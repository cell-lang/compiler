LowLevelRepr+ atomic_low_level_reprs = (:bool, :int, :float);

// LowLevelEltRepr* atomic_low_level_elt_reprs = (:bool, :int, :float);
LowLevelEltRepr+ atomic_low_level_elt_reprs = (:bool, :int8, :nat8, :int16, :int32, :int, :float);


NeType low_level_repr_type(LowLevelRepr) =
  bool    = type_bool,
  int     = integer,
  symbol  = atom_type,
  float   = float_type,
  object  = type_any;


NeType low_level_repr_type(SmallIntRepr) =
  int8    = type_int8,
  nat8    = type_byte,
  int16   = type_int16,
  int32   = type_int32;
  // nat16   = type_nat16,
  // nat32   = type_nat32,


LowLevelRepr low_level_repr(BoolExpr)                         = :bool;
LowLevelRepr low_level_repr(<IntExpr, Int32Var, Int32NatOp>)  = :int;
LowLevelRepr low_level_repr(FloatExpr)                        = :float;

LowLevelRepr low_level_repr(<InlineObj, StdObjVar, ObjNatOp>) = :object;

OptTagRecRepr low_level_repr(OptTagRecExpr expr) = opt_tag_rec_repr(expr.tag, expr.index);

////////////////////////////////////////////////////////////////////////////////

Bool is_subset(LowLevelRepr r1, LowLevelRepr r2) {
  return true if r1 == r2 or r2 == :object;

  return match (r1)
    bool      = r2 == :symbol,
    int       |
    float     |
    symbol    |
    object    = false,
    array()   = undefined; ## IMPLEMENT
}


Bool overlap(LowLevelRepr r1, LowLevelRepr r2) {
  return true if r1 == r2 or r1 == :object or r2 == :object;

  return match (r1)
    bool    = r2 == :symbol,
    int     |
    float   |
    symbol  = false;
}

////////////////////////////////////////////////////////////////////////////////

AnyLowLevelRepr aggr_repr(AnyLowLevelRepr repr1, AnyLowLevelRepr repr2) =
  bool,   symbol  = :symbol,
  symbol, bool    = :symbol,
  _,      _       = if repr1 == repr2 then repr1 else :object;

AnyLowLevelRepr aggr_repr([+AnyLowLevelRepr] reprs) = reduce(reprs, aggr_repr);


LowLevelSign aggr_sign([+LowLevelSign] signs) {
  assert |[|s.args| : s <- signs]| == 1;

  a_sign = an_elem(signs);
  args = (aggr_repr([s.args(i) : s <- signs]) : a @ i <- a_sign.args);
  ret_value = aggr_repr([s.ret_value : s <- signs]);
  return low_level_sign(args: args, ret_value: ret_value);
}


BoolVar low_level_bvar(StdVar var) =
  var(id?) = bvar(id);


AnyLocVar low_level_var(LowLevelRepr repr, StdVar var) =
  bool      = bvar(untag(var)),
  int       = ivar(untag(var)),
  float     = fvar(untag(var)),
  symbol    |
  object    = var;


LocOptTagRecVar low_level_var(OptTagRecRepr repr, StdVar var) =
  opt_tag_rec_var(untag(var), repr.tag, repr.index);


ObjProcArg low_level_arg(<StdVar, FnArg> var, AnyLowLevelRepr repr) {
  id = untag(var);
  return match (repr)
    bool                = bool_arg(id),
    int                 = int_arg(id),
    float               = float_arg(id),
    opt_tag_rec_repr()  = opt_tag_rec_fn_arg(id, repr.tag, repr.index),
    symbol              |
    object              = var;
}


AnyTypeExpr low_level_expr(LowLevelRepr repr, ObjExpr expr) =
  bool      = bool_value(expr),
  int       = get_int_val(expr),
  symbol    = expr, ## TEMPORARY TEMPORARY TEMPORARY
  float     = float_value(expr),
  object    = expr;


AnyTypeExpr low_level_expr(SmallIntRepr repr, ObjExpr expr) =
  int8    = get_int_val(expr),
  nat8    = get_int_val(expr),
  int16   = get_int_val(expr),
  int32   = get_int_val(expr);


ObjExpr low_level_expr(OptTagRecRepr repr, ObjExpr expr) =
  if expr :: OptTagRecExpr then expr else cast_opt_tag_rec(repr.tag, repr.index, expr);


implicit typedefs : [TypeName -> NeType] {
  LowLevelRepr low_level_repr(NeType type) {
    for r <- atomic_low_level_reprs
      return r if is_subset(type, low_level_repr_type(r));
    return :object;
  }


  LowLevelEltRepr low_level_elt_repr(NeType type) {
    for r <- atomic_low_level_elt_reprs
      return r if is_subset(type, low_level_repr_type(r));
    return :object;
  }
}


implicit program : Program, typedefs : [TypeName -> NeType], options : CompOptions {
  AnyLowLevelRepr opt_repr(NeType type) {
    for r <- atomic_low_level_reprs
      return r if is_subset_wrapper_1(type, low_level_repr_type(r));

    res = try_mono_tag_type(type);
    if res != nothing {
      tag, obj_type = value(res);
      if optimized_tagged_records(tag, *) {
        for r @ i <- optimized_tagged_records(tag, !!) {
          rec_type = low_level_repr_type(r);
          return opt_tag_rec_repr(tag, i) if is_subset_wrapper_2(obj_type, rec_type);
        }
      }
    }

    return :object;


    Bool is_subset_wrapper_1(NeType subset, NeType superset) = is_subset(subset, superset);
    Bool is_subset_wrapper_2(NeType subset, NeType superset) = is_subset(subset, superset);


    Maybe[(Symbol, NeType)] try_mono_tag_type(NeType type) =
      tag_obj_type()  = try_mono_tag_type(type.tag_type, type.obj_type),
      union_type(ts?) = try_mono_tag_type(isort(ts)),
      type_ref(ts?)   = try_mono_tag_type(nonempty_type(expand_type_ref(ts, typedefs))),
      _               = nothing;


    Maybe[(Symbol, NeType)] try_mono_tag_type(TagType tag_type, NeType obj_type) =
      symb_type(s?)   = just((untag(s), obj_type)),
      atom_type       = nothing;


    Maybe[(Symbol, NeType)] try_mono_tag_type(NeType+ types) {
      only_tag = nothing;
      obj_types = ();
      for t <- types {
        res = try_mono_tag_type(t);
        return nothing if res == nothing;
        tag, obj_type = value(res);
        if only_tag == nothing
          only_tag = just(tag);
        else if only_tag != just(tag)
          return nothing;
        obj_types = (obj_types | obj_type);
      }
      return just((value_unsafe(only_tag), ne_union_superset(nonempty(set(obj_types)))));
    }
  }


  LowLevelRepr opt_repr(<empty_type>) = :object;
}

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType], options : CompOptions {
  LowLevelSign low_level_sign(Function fn) =
    low_level_sign(
      args:       (opt_repr(t) : unused_var, t <- fn.args),
      ret_value:  opt_repr(fn.res_type)
    );


  (FnId, LowLevelSign) low_level_sign(FnFamilyId fn_id, Type* args_types) {
    for id, s, ts <- signatures_info_by_family_id(fn_id, !!)
      return (id, s) if not (t @ i <~ args_types : not is_subset(t, ts(i)));
    return (fn_id, aggr_sign_by_fn_family_id(fn_id, !!));


    [FnFamilyId -> LowLevelSign] aggr_sign_by_fn_family_id =
      [id -> aggr_sign([s : unused_var_1, s, unused_var_2 <~ info]) : id, info <- signatures_info_by_family_id];


    [FnFamilyId -> (FnId, LowLevelSign, NeType*)+] signatures_info_by_family_id {
      family_ids = [id : id, unused_var <- signature_info];
      return [id -> nonempty(isort([info : info <- signature_info(id, ?)])) : id <- family_ids];
    }


    [FnFamilyId, (FnId, LowLevelSign, NeType*)] signature_info =
      [family_id(fn.id), (fn.id, low_level_sign(fn), (t : unused_var, t <- fn.args)) : fn <- program.fndefs];
  }


  LowLevelSign low_level_sign(Method method) =
    low_level_sign(
      args:       (opt_repr(t) : t, unused_var <- method.args),
      ret_value:  opt_repr(method.ret_type)
    );


  (MethodId, LowLevelSign) low_level_sign(DBSymbol rel_auto_id, MethodSymbol symbol, Type* args_types) {
    family_id = method_id(symbol, |args_types|);
    methods = signatures_map(rel_auto_id, !!)(family_id);
    for id, s, ts <- isort(methods)
      return (id, s) if not (t @ i <~ args_types : not is_subset(t, ts(i)));
    return (family_id, aggr_signatures_map(rel_auto_id, !!)(family_id));


    [DBSymbol -> [MethodFamilyId -> LowLevelSign]] aggr_signatures_map = [
      auto_id -> [id -> aggr_sign([m(1) : m <- ms]) : id, ms <- auto_map]
      : auto_id, auto_map <- signatures_map
    ];


    [DBSymbol -> [MethodFamilyId -> [+(MethodId, LowLevelSign, NeType*)]]] signatures_map = [
      a.name -> [
        fid -> [(m.id, low_level_sign(m), (t : t, unused_var <- m.args)) : m <- ms]
        : fid, ms <- group_by(a.methods, family_id($.id))
      ] : a <- program.data_bases
    ];
  }
}


