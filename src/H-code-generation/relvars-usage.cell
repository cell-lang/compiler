implicit program : Program, typedefs : [TypeName -> NeType] {
  [DBSymbol, RelVar, Bool+] relvars_usages {
    usages = union([
      relvars_usages(a) : a <- program.data_bases | a <- program.auto_defs | a <- program.proc_defs
    ]);
    return [u(0), u(1), u(2) : u <- usages];
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Database rel_auto) {
    methods_usages = union([relvars_usages(m.expr) : m <- rel_auto.methods]);
    updates_usages = union([
      search_stmts(u.body, relvars_usages($))
      : u <- rel_auto.handlers | u <- rel_auto.updates
    ]);
    foreign_keys_usages = union([
      [(logical_rel_var(k.source_rel_var), (a != nothing : a <- k.source_args))] &
      [(logical_rel_var(v), (a != nothing : a <- k.target_args)) : v <- k.target_rel_vars]
      : k <- rel_auto.foreign_keys
    ]);

    usages = methods_usages & updates_usages & foreign_keys_usages;

    let context = rel_auto
      usages_by_auto_type_and_relvar = [(rel_auto_type(left(u)), unqualified(left(u)), right(u)) : u <- usages];
    return usages_by_auto_type_and_relvar;
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Automaton react_auto) {
    return []; ## IMPLEMENT IMPLEMENT IMPLEMENT
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Procedure proc) {
    usages_by_relvar = search_stmts(proc.body, relvars_usages($));
    let context = proc {
      usages_by_auto_type_and_relvar = [
        (rel_auto_type(left(u)), unqualified(left(u)), right(u)) : u <- usages_by_relvar
      ];
    }
    return usages_by_auto_type_and_relvar;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[(AnyRelVar, Bool+)] relvars_usages(Expr expr) =
  rel_var_size_expr()   |
  relvar_memb_test()    |
  relvar_lookup()       = [(expr.rel_var, (a != nothing : a <- expr.args))] &
                          union([relvars_usages(value(a)) : a <- expr.args, a != nothing]),
  do_expr()             = search_stmts(expr.body, relvars_usages($)),
  _                     = search_nested(expr, relvars_usages($), relvars_usages($));


[(AnyRelVar, Bool+)] relvars_usages(Statement stmt) {
  expr_usages = search_exprs(stmt, relvars_usages($), relvars_usages($));
  stmt_usages = match (stmt)
    delete_stmt()     = [(stmt.var, (a != nothing : a <- stmt.args))] &
                        union([relvars_usages(value(a)) : a <- stmt.args, a != nothing]),
    foreach_stmt()    = relvars_usages(stmt.iter) & search_stmts(stmt.body, relvars_usages($)),
    _                 = search_nested(stmt, relvars_usages($));
  return expr_usages & stmt_usages;
}


[(AnyRelVar, Bool+)] relvars_usages(Clause clause) =
  relvar_clause() = [(clause.rel_var, (a != nothing : a <- clause.args))] &
                    union([relvars_usages(value(a)) : a <- clause.args, a != nothing]),
  and_clause()    |
  or_clause()     = relvars_usages(clause.left) & relvars_usages(clause.right),
  _               = search_exprs(clause, relvars_usages($));


[(AnyRelVar, Bool+)] relvars_usages(Iter iter) =
  coll_value_iter()   = relvars_usages(iter.src_expr),
  rel_subset_iter()   = union([relvars_usages(value(a)) : a <- iter.args, a != nothing]),
  rel_var_iter()      = [(iter.rel_var, (a != nothing : a <- iter.args))] &
                        union([relvars_usages(value(a)) : a <- iter.args, a != nothing]);