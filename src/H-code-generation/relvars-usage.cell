// A binary relation can be implemented as a column if and only if:
//   It has one and only one key, and it's on the first column
//   It's not symmetric
//   There are no expressions, clauses, iterators, statements, or keys of the form:
//     |relvar(?, y)|
//     relvar(*, y)
//     relvar(!, y)
//     x <- relvar(?, y) (both in clauses and for loops)
//     delete relvar(*, y)
//     relvar(_, a) -> ...
//     ... -> relvar(_, a)

implicit program : Program, typedefs : [TypeName -> NeType], context : Context {
  Bool is_columnar_relvar(AnyRelVar rel_var) = is_columnar_relvar(rel_auto_type(rel_var), unqualified(rel_var));

  Bool is_ternary_slave_column(AnyRelVar rel_var) = is_ternary_slave_column(rel_auto_type(rel_var), unqualified(rel_var));

  Bool column_is_mandatory(TableVar table_var)     = column_is_mandatory(this_db_symbol, table_var);
  Bool column_is_mandatory(QualTableVar table_var) = column_is_mandatory(var_type(table_var.db_var), table_var.table_var);
}


implicit program : Program, typedefs : [TypeName -> NeType] {
  Bool column_is_mandatory(DBSymbol rel_auto_id, TableVar table_var) =
    match (bin_rel_only_master_info(rel_auto_id, original_rel_var(table_var)))
      just(_, true) = true,
      _             = false;

  PhysRelVar column_master(DBSymbol rel_auto_id, TableVar table_var) =
    match (bin_rel_only_master_info(rel_auto_id, original_rel_var(table_var)))
      just(v?, true)  = v,
      _               = undefined;


  [PhysRelVar] slave_columns(DBSymbol rel_auto_id, PhysRelVar relvar) {
    assert arity(table_info(rel_auto_id, table_var(relvar))) == 1;

    ## IMPLEMENT IMPLEMENT IMPLEMENT: THIS IS SUPER SLOW, IMPLEMENT THE MEMOIZATION

    rel_auto = automaton_by_id(rel_auto_id);
    return [v : v _ <- rel_auto.rel_vars, is_slave_of(rel_auto_id, v, relvar)];

    Bool is_slave_of(DBSymbol rel_auto_id, PhysRelVar v, PhysRelVar master) =
      match (bin_rel_only_master_info(rel_auto_id, v))
        just((m?, true))  = m == master,
        _                 = false;
  }


  Maybe[(PhysRelVar, Bool)] bin_rel_only_master_info(DBSymbol rel_auto_id, PhysRelVar relvar) {
    return nothing if not is_columnar_relvar(rel_auto_id, logical_rel_var(relvar));

    rel_auto = automaton_by_id(rel_auto_id);

    // type ForeignKey = foreign_key(
    //                     source_rel_var:   PhysRelVar,
    //                     source_args:      Maybe[Symbol]+,
    //                     target_rel_vars:  [+PhysRelVar],
    //                     target_args:      Maybe[Symbol]+
    //                   );

    ## IMPLEMENT IMPLEMENT IMPLEMENT: THIS IS SUPER SLOW, IMPLEMENT THE MEMOIZATION

    fks = [fk : fk <- rel_auto.foreign_keys, fk.source_rel_var == relvar];
    assert not (fk <- fks : |fk.target_rel_vars| != 1);
    masters = [rv : fk <- fks, rv <- fk.target_rel_vars];
    return nothing if |masters| != 1;
    master = only(masters);
    mandatory = (fk <- rel_auto.foreign_keys : fk.source_rel_var == master and fk.target_rel_vars == [relvar]);
    return just((master, mandatory));
  }


  Bool is_columnar_relvar(DBSymbol rel_auto_id, RelVar rel_var) {
    col_rvars = columnar_relvars;
    return col_rvars(rel_auto_id, rel_var);


    [DBSymbol, RelVar] columnar_relvars =
      [a.name, v : a <- program.data_bases, v <- columnar_relvars(a)];


    [RelVar] columnar_relvars(Database rel_auto) {
      candidates = [logical_rel_var(v) : v info <- rel_auto.rel_vars, is_candidate_column(info)];
      usages = relvars_usages;
      auto_id = rel_auto.name;
      return [v : v <- candidates, not usages(rel_auto.name, v, (false, true))];
    }


    Bool is_candidate_column(RelVarInfo info) =
      |info.signature| == 2 and info.keys == [[0]] and not info.symmetric;
  }
}


implicit program : Program {
  Bool is_master_relvar(DBSymbol rel_auto_id, PhysRelVar rel_var) {
    masters_slaves = masters_slaves_relvars;
    return masters_slaves(rel_auto_id, rel_var, _);
  }


  Bool is_slave_relvar(DBSymbol rel_auto_id, PhysRelVar rel_var) {
    masters_slaves = masters_slaves_relvars;
    return masters_slaves(rel_auto_id, _, rel_var);
  }


  Bool is_ternary_slave_column(DBSymbol rel_auto_id, RelVar rel_var) {
    masters_slaves = masters_ternary_slave_columns;
    return only([masters_slaves(rel_auto_id, _, prv) : prv <- physical_rel_vars(rel_auto_by_id(rel_auto_id), rel_var)]);
  }


  PhysRelVar master_relvar(DBSymbol rel_auto_id, PhysRelVar slave_relvar) {
    masters_slaves = masters_slaves_relvars;
    return only([mrv : mrv <- masters_slaves(rel_auto_id, ?, slave_relvar)]);
  }


  [DBSymbol, PhysRelVar, PhysRelVar] masters_ternary_slave_columns {
    return [a, m, s : a m s <- masters_slaves_relvars, is_columnar_relvar(a, logical_rel_var(s))];


    Bool is_columnar_relvar(DBSymbol rel_auto_id, RelVar slave_relvar) =
      not (prv <- physical_rel_vars(rel_auto_by_id(rel_auto_id), slave_relvar) : not is_columnar_relvar(rel_auto_id, prv));


    Bool is_columnar_relvar(DBSymbol rel_auto_id, PhysRelVar slave_relvar) {
      rel_auto = rel_auto_by_id(rel_auto_id);
      relvar_info = rel_auto.rel_vars(slave_relvar);
      return false if relvar_info.keys != [[0, 1]];
      usages = relvars_usages(typedefs = program.typedefs);
      return not (u <- usages(rel_auto_id, logical_rel_var(slave_relvar), ?) : not is_valid_slave_column_usage(u));
    }


    Bool is_valid_slave_column_usage(Bool+ usage) =
      (false, false, false) |
      (true,  true,  true)  |
      (true,  _,     false) |
      (_,     true,  false) = true,
      _                     = false;
  }


  [DBSymbol, PhysRelVar, PhysRelVar] masters_slaves_relvars {
    return [a.name, mrv, srv : a <- program.data_bases, mrv srv <- masters_slaves(a)];


    [PhysRelVar, PhysRelVar] masters_slaves(Database rel_auto) {
      foreign_keys_by_src = [fk.source_rel_var, fk : fk <- rel_auto.foreign_keys];
      slaves = [r : r info <- rel_auto.rel_vars, is_ternary_slave(r, info, foreign_keys_by_src)];
      return [master(s, foreign_keys_by_src), s : s <- slaves];
    }


    PhysRelVar master(PhysRelVar slave, [PhysRelVar, ForeignKey] foreign_keys_by_src) =
      only([only(fk.target_rel_vars) : fk <- foreign_keys_by_src(slave, ?), |fk.target_args| == 2]);


    Bool is_ternary_slave(PhysRelVar relvar, RelVarInfo info, [PhysRelVar, ForeignKey] foreign_keys_by_src) {
      // In order to be implemented as a slave, a ternary relation:
      //   Must have a single foreign key of the form r3(a, b, _) -> r2(a, b),
      //   May have another foreign key of the form r3(_, _, c) -> r1(c).
      //   Must not have any other foreign keys
      //   May have a key on the first two columns
      //   May have a key on the third column
      //   Must not be declared symmetric

      if |info.signature| != 3 or info.symmetric
        return false;

      if (k <- info.keys : k != [0, 1] and k != [2])
        return false;

      fks = [fk : fk <- foreign_keys_by_src(relvar, ?)];

      if (fk <- fks : |fk.target_rel_vars| != 1)
        return false;

      if |fks| == 1
        return is_ternary_to_binary(only(fks));

      else if |fks| == 2
        return (fk <- fks : is_ternary_to_binary(fk)) and (fk <- fks : is_ternary_to_unary(fk));

      else
        return false;
    }


    Bool is_ternary_to_binary(ForeignKey foreign_key) =
      match (foreign_key.source_args, foreign_key.target_args)
        (just(s1?), just(s2?), nothing),  (just(t1?), just(t2?))  = s1 == t1 and s2 == t2,
        _,                                _                       = false;


    Bool is_ternary_to_unary(ForeignKey foreign_key) =
      match (foreign_key.source_args, foreign_key.target_args)
        (nothing, nothing, just(_)),  (just(_))   = true,
        _,                            _           = false;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType] {
  [DBSymbol, RelVar, Bool+] relvars_usages {
    usages = union([
      relvars_usages(a) : a <- program.data_bases | a <- program.auto_defs | a <- program.proc_defs
    ]);
    return [u(0), u(1), u(2) : u <- usages];
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Database rel_auto) {
    methods_usages = union([relvars_usages(m.expr) : m <- rel_auto.methods]);
    updates_usages = union([
      search_stmts(u.body, relvars_usages($))
      : u <- rel_auto.handlers | u <- rel_auto.updates
    ]);
    foreign_keys_usages = union([
      [(logical_rel_var(k.source_rel_var), (a != nothing : a <- k.source_args))] &
      [(logical_rel_var(v), (a != nothing : a <- k.target_args)) : v <- k.target_rel_vars]
      : k <- rel_auto.foreign_keys
    ]);

    usages = methods_usages & updates_usages & foreign_keys_usages;

    let context = rel_auto
      usages_by_auto_type_and_relvar = [(rel_auto_type(left(u)), unqualified(left(u)), right(u)) : u <- usages];
    return usages_by_auto_type_and_relvar;
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Automaton react_auto) {
    return []; ## IMPLEMENT IMPLEMENT IMPLEMENT
  }


  [(DBSymbol, RelVar, Bool+)] relvars_usages(Procedure proc) {
    usages_by_relvar = search_stmts(proc.body, relvars_usages($));
    let context = proc {
      usages_by_auto_type_and_relvar = [
        (rel_auto_type(left(u)), unqualified(left(u)), right(u)) : u <- usages_by_relvar
      ];
    }
    return usages_by_auto_type_and_relvar;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[(AnyRelVar, Bool+)] relvars_usages(Expr expr) =
  rel_var_size_expr()   |
  relvar_memb_test()    |
  relvar_lookup()       = [(expr.rel_var, (a != nothing : a <- expr.args))] &
                          union([relvars_usages(value(a)) : a <- expr.args, a != nothing]),
  do_expr()             = search_stmts(expr.body, relvars_usages($)),
  _                     = search_nested(expr, relvars_usages($), relvars_usages($));


[(AnyRelVar, Bool+)] relvars_usages(Statement stmt) {
  expr_usages = search_exprs(stmt, relvars_usages($), relvars_usages($));
  stmt_usages = match (stmt)
    delete_stmt()     = [(stmt.var, (a != nothing : a <- stmt.args))] &
                        union([relvars_usages(value(a)) : a <- stmt.args, a != nothing]),
    foreach_stmt()    = relvars_usages(stmt.iter) & search_stmts(stmt.body, relvars_usages($)),
    _                 = search_nested(stmt, relvars_usages($));
  return expr_usages & stmt_usages;
}


[(AnyRelVar, Bool+)] relvars_usages(Clause clause) =
  relvar_clause() = [(clause.rel_var, (a != nothing : a <- clause.args))] &
                    union([relvars_usages(value(a)) : a <- clause.args, a != nothing]),
  and_clause()    |
  or_clause()     = relvars_usages(clause.left) & relvars_usages(clause.right),
  _               = search_exprs(clause, relvars_usages($));


[(AnyRelVar, Bool+)] relvars_usages(Iter iter) =
  coll_value_iter()   = relvars_usages(iter.src_expr),
  rel_subset_iter()   = union([relvars_usages(value(a)) : a <- iter.args, a != nothing]),
  rel_var_iter()      = [(iter.rel_var, (a != nothing : a <- iter.args))] &
                        union([relvars_usages(value(a)) : a <- iter.args, a != nothing]);