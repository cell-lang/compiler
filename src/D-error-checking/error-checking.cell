[CoreWFError] core_wf_errors(Program prg) = core_wf_errors(program = prg, typedefs = prg.typedefs);

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType] {
  [CoreWFError] core_wf_errors {
    fndefs_families = group_by(program.fndefs, family_id($.id));
    functions_errs = union([function_family_errors(fs) : _ fs <- fndefs_families]);
    return typedefs_errors & functions_errs & aggregate_functions_errors & databases_errors & automata_errors;
  }

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] typedefs_errors {
    shallow_refs_map = [n -> direct_refs(t) : n t <- typedefs];
    deep_refs_map = transitive_closure(shallow_refs_map);
    return [non_nested_self_ref(t) : t ts <- deep_refs_map, ts(t)];

    [TypeName] direct_refs(NeType type) =
      type_ref(type_symbol() ts?)     = [type_name(ts, 0)],
      type_ref(par_type_symbol() ts?) = [type_name(ts.symbol, |ts.params|)],
      union_type(ts?)                 = union([direct_refs(t) : t <- ts]),
      _                               = [];
  }

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] function_family_errors([+Function] functions) {
    ord_fns = rand_sort(functions);
    return [overlapping_signatures(f1, f2) : f1 @ i1 <- ord_fns, f2 <- drop(ord_fns, i1+1), overlap(f1, f2)];

    Bool overlap(Function f1, Function f2) =
      not ((a1, a2) <- zip(f1.args, f2.args) : are_ptype_disjoint(right(a1), right(a2)));
  }

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] aggregate_functions_errors = [
    overlapping_signatures(f1, f2)
    : _ fs <- group_by(program.aggr_fn_defs, (plain_id($.id), |$.extra_args|)),
      f1 f2 <- symmetric_cart_prod(fs),
      not are_ptype_disjoint(f1.elt_type, f2.elt_type)
  ];

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] databases_errors {
    db_errs = union([database_errors(db) : db <- program.data_bases]);

    shallow_deps = [db.name -> set(db.links) : db <- program.data_bases];
    deep_deps = transitive_closure(shallow_deps);
    rec_errs = [recursively_defined_auto_or_db(automaton_by_id(db_type)) : db_type deps <- deep_deps, deps(db_type)];

    return db_errs & rec_errs;
  }


  [CoreWFError] database_errors(Database database) {
    rel_vars_errs = rel_vars_errors(database.rel_vars);

    foreign_key_errs = union([foreign_key_errors(database, f) : f <- database.foreign_keys]);

    method_errs = union([
      [overlapping_signatures(m1, m2) : m1 m2 <- symmetric_cart_prod(ms), overlap(m1, m2)]
      : _ ms <- group_by(database.methods, family_id($.id))
    ]);

    updates_errs = updates_errors(database);

    handler_errs = [
      overlapping_signatures(h1, h2)
      : h1 h2 <- symmetric_cart_prod(database.handlers), not are_ptype_disjoint(h1.type, h2.type)
    ];

    errs = rel_vars_errs & foreign_key_errs & method_errs & updates_errs & handler_errs;
    return [error_cluster(database, errs)] if errs != [];

    sgns = [v -> info.signature : v info <- database.rel_vars];
    keys = [logical_rel_var(v) -> info.keys : v info <- database.rel_vars];
    res = try_to_split(sgns, database.foreign_keys, keys);
    return [unpartitionable_foreign_key(get_error(res)) if failed(res)];
  }


  [CoreWFError] updates_errors(Database database) {
    // Signatures must not overlap
    overlapping_signatures_errors = union([
      [overlapping_signatures(u1, u2) : u1 u2 <- symmetric_cart_prod(us), overlap(u1, u2)]
      : _ us <- group_by(database.updates, ($.name, arity($)))
    ]);
    return overlapping_signatures_errors if overlapping_signatures_errors != [];

    // Mutator methods must not be recursive
    untyped_update_ids = [untyped_update_id(u) : u <- database.updates];
    shallow_graph = [id -> [m : u <- database.updates, id == untyped_update_id(u), m <- invoked_mutators(u)] : id <- untyped_update_ids];
    deep_graph = transitive_closure(shallow_graph);
    recursive_updates = [u : u us <- deep_graph, us(u)];
    return [recursive_mutator(u(0), u(1)) : u <- recursive_updates] if recursive_updates != [];

    return [];


    (UpdateSymbol, Nat) untyped_update_id(Update update) = (update.name, |update.args|);
  }


  [CoreWFError] rel_vars_errors([PhysRelVar -> RelVarInfo] rel_vars) {
    rel_vars_by_log_id = group_by_left_arg([logical_rel_var(v), v : v _ <- rel_vars]);
    return union([rel_var_family_errors(lv, pvs, rel_vars) : lv pvs <- rel_vars_by_log_id]);


    [CoreWFError] rel_var_family_errors(RelVar rel_var, [+PhysRelVar] phys_rel_vars, [PhysRelVar -> RelVarInfo] rel_vars) {
      for s1, s2 <- isort(symmetric_cart_prod(phys_rel_vars)) {
        info1 = rel_vars(s1);
        info2 = rel_vars(s2);

        sgn1 = info1.signature;
        sgn2 = info2.signature;

        // The relvars must have the same arity
        arity = |sgn1|;
        return [multiple_rel_var_arities(rel_var, [arity, |sgn2|])] if arity != |sgn2|;

        // They must have the same keys
        keys = info1.keys;
        return [differing_keys_in_poly_rel_var(rel_var, keys, info2.keys)] if keys != info2.keys;

        // Their signatures must be disjoint
        return [overlapping_rel_var_signatures(rel_var, sgn1, sgn2)] if not are_ptype_disjoint(sgn1, sgn2);

        // For each key, the projections of the signatures
        // over the arguments of the key must be disjoint
        for k <- isort(keys) {
          subsgn1 = nonempty((sgn1(i) : i < arity, k(i)));
          subsgn2 = nonempty((sgn2(i) : i < arity, k(i)));
          if not are_ptype_disjoint(subsgn1, subsgn2)
            return [overlapping_rel_var_key_subsignatures(rel_var, (sgn1, sgn2), k)];
        }
      }
      return [];
    }
  }


  [CoreWFError] foreign_key_errors(Database database, ForeignKey key) {
    log_tgts = [logical_rel_var(v) : v <- key.target_rel_vars];
    return [unspecified_foreign_key_error(key)] if |log_tgts| != 1;

    src_args = key.source_args;
    tgt_args = key.target_args;

    is_supported = match (src_args, tgt_args)
      // unary -> unary
      (just()),                     (just())                    = true,

      // unary -> binary
      (just()),                     (just(),  nothing)          = true,
      (just()),                     (nothing, just())           = true,

      // unary -> ternary
      (just()),                     (just(), nothing, nothing)  = true,
      (just()),                     (nothing, just(), nothing)  = true,
      (just()),                     (nothing, nothing, just())  = true,

      // binary -> unary
      (just(), nothing),            (just())                    = true,
      (nothing, just()),            (just())                    = true,

      // ternary -> unary
      (just(), nothing, nothing),   (just())                    = true,
      (nothing, just(), nothing),   (just())                    = true,
      (nothing, nothing, just()),   (just())                    = true,

      // binary -> ternary
      (just(s1?), just(s2?)), (just(t1?), just(t2?), nothing)   = s1 == t1 and s2 == t2,

      // ternary -> binary
      (just(s1?), just(s2?), nothing),  (just(t1?), just(t2?))  = s1 == t1 and s2 == t2,

      _,                        _                               = false;

    return [unsupported_foreign_key_type(key)] if not is_supported;

    if |src_args| == 3 and |tgt_args| == 2
      for r <- key.target_rel_vars {
        tgt_info = database.rel_vars(r);
        if tgt_info.keys != []
          return [tern_bin_foreign_key_target_has_keys(key)];
      }

    if |src_args| == 2 and |tgt_args| == 3 {
      src_info = database.rel_vars(key.source_rel_var);
      if src_info.keys != []
        return [bin_tern_foreign_key_origin_has_keys(key)];
    }

    perm_map = rel_vars_perm_map(database.name, !);
    src_perm = perm_map(logical_rel_var(key.source_rel_var));
    src_is_perm = (i j <- src_perm : i != j);
    tgt_perm = only([perm_map(logical_rel_var(r)) : r <- key.target_rel_vars]);
    tgt_is_perm = (i j <- tgt_perm : i != j);

    perms_are_fine = match (src_args, tgt_args)
      (just(), just()),           (just(), just(), nothing) = not src_is_perm and not tgt_is_perm,
      (just(), just(), nothing),  (just(), just())          = not src_is_perm and not tgt_is_perm,
      _,                          _                         = true;

    return [unsupported_combination_of_keys_and_foreign_keys(key)] if not perms_are_fine;


    src_symm = database.rel_vars(key.source_rel_var).symmetric;
    tgt_symms = [database.rel_vars(v).symmetric : v <- key.target_rel_vars];
    return [unspecified_foreign_key_error(key)] if |tgt_symms| != 1;
    tgt_symm = only(tgt_symms);

    ## ARE THESE THE ONLY CASES WHERE WE EXPECT TABLES TO HAVE MATCHING SYMMETRIES?
    symmetry_is_fine = match (src_args, tgt_args)
      (just(), just()),           (just(), just(), nothing) = src_symm == tgt_symm,
      (just(), just(), nothing),  (just(), just())          = src_symm == tgt_symm,
      _,                          _                         = true;

    return [foreign_key_symmetry_mismatch(key, src_symm)] if not symmetry_is_fine;

    // Checking that the types of the arguments in the source relvars are a
    // subtype of the types of the corresponding arguments in the target relvar

    ## THIS CHECK WILL LET SOME ERRORS SLIP THROUGH. EXAMPLE:
    ##   bin_rel(<A, B>, <C, D>)
    ##   tern_rel(A, C, _)
    ##   tern_rel(B, D, _)
    ##   bin_rel(x, y) -> tern_rel(x, y, _)

    src_info = database.rel_vars(key.source_rel_var);
    src_types = [value(a) -> src_info.signature(i) : a @ i <- key.source_args, a != nothing];

    tgt_types = [
      value(a) ->
        ne_union_superset([database.rel_vars(r).signature(i) : r <- key.target_rel_vars])
      : a @ i <- key.target_args, a != nothing
    ];

    errs = [
      target_type_not_a_superset_of_src_type(key, arg, src_type, tgt_types(arg))
      : arg src_type <- src_types, not is_subset(src_type, tgt_types(arg))
    ];
    return errs if errs != [];

    ## IS THERE ANYTHING ELSE I'M SUPPOSED TO CHECK HERE?

    return [];
  }

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] automata_errors {
    auto_errs = union([automaton_errors(automaton=a) : a <- program.auto_defs]);

    shallow_deps = [auto.name -> [a.type : _ a <- auto.nested_autos] : auto <- program.auto_defs];
    deep_deps = transitive_closure(shallow_deps);
    rec_errs = [recursively_defined_auto_or_db(automaton_by_id(auto_type)) : auto_type deps <- deep_deps, deps(auto_type)];

    return auto_errs & rec_errs;
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType], automaton : Automaton {
  [CoreWFError] automaton_errors {
    overlap_errs = union([
      [overlapping_signatures(m1, m2) : m1 m2 <- symmetric_cart_prod(ms), overlap(m1, m2)]
      : _ ms <- group_by(automaton.methods, ($.name, arity($)))
    ]);
    var_errs = union(union([
      [param_errs(id, info.value) : id info <- automaton.params],
      [state_var_errs(id, state_var) : id state_var <- automaton.state],
      [rule_errs(id, expr) : id expr <- automaton.rules],
      [time_rule_errs(id, rule) : id rule <- automaton.time_rules],
      [discrete_rules_errs(id, rules) : id rules <- automaton.discrete_rules],
      [nested_auto_errs(id, info.type, info.args) : id info <- automaton.nested_autos]
    ]));
    errs = overlap_errs & var_errs & output_errs;
    errs = dependency_errors if errs == [];
    return if errs != [] then [error_cluster(automaton, errs)] else [];


    [CoreWFError] output_errs {
      candidate_outputs = merge([
        [id -> false : id _ <- automaton.params],
        [id -> input.discrete : id input <- automaton.inputs],
        [id -> false : id _ <- automaton.state],
        [id -> false : id _ <- automaton.rules],
        [id -> false : id _ <- automaton.time_rules],
        [id -> true : id _ <- automaton.discrete_rules]
      ]);

      return [
        if candidate_outputs(id, _) then wrong_output_nature(id, output.discrete) else undefined_output(id)
        : id output <- automaton.outputs, not candidate_outputs(id, _) or candidate_outputs[id] != output.discrete
      ];
    }

    [CoreWFError] param_errs(SignalVar id, Expr value) = [
      invalid_auto_var(v, id, value) : v <- auto_expr_extern_vars(value), not is_key(v, automaton.params)
    ];


    [CoreWFError] state_var_errs(SignalVar id, StateVar state_var) {
      ## HERE I SHOULD ALSO CHECK THAT THE UPDATES ARE NOT GUARANTEED TO FIRE TOGETHER...
      init_vars = continuous_signals_level_1;
      init_errs = [
        invalid_auto_var(v, id, state_var.init_value)
        : v <- auto_expr_extern_vars(state_var.init_value),
          not in(v, init_vars)
      ];
      update_errs = union([state_var_update_errs(id, u) : u <- state_var.updates]);
      return init_errs & update_errs;
    }


    [CoreWFError] state_var_update_errs(SignalVar id, StateVarUpdate update) {
      continuous_signals = continuous_signals_level_2;
      delayed_signals = delayed_signals;
      discrete_signals = enabled_discrete_signals(update.cond);
      // Condition expression check
      cond_expr_vars = auto_expr_extern_vars(update.cond.cond);
      cond_expr_errs = [
        invalid_auto_var(v, id, update.cond.cond)
        : v <- cond_expr_vars,
          not (in(v, continuous_signals) or in(v, discrete_signals))
      ];
      // Value expression check
      value_expr_vars = auto_expr_extern_vars(update.value);
      value_expr_errs = [
        invalid_auto_var(v, id, update.value)
        : v <- cond_expr_vars,
          not (in(v, continuous_signals) or in(v, delayed_signals) or in(v, discrete_signals))
      ];
      return cond_expr_errs & value_expr_errs;
    }


    [CoreWFError] rule_errs(SignalVar id, Expr value) {
      signals = continuous_signals_level_2;
      return [
        invalid_auto_var(v, id, value)
        : v <- auto_expr_extern_vars(value), not in(v, signals)
      ];
    }


    [CoreWFError] time_rule_errs(SignalVar id, TimeRule rule) {
      continuous_signals = continuous_signals_level_2;
      return match (rule)
        boolean_time_rule()   |
        unchanged_time_rule() = [ invalid_auto_var(v, id, rule.expr)
                                  : v <- auto_expr_extern_vars(rule.expr),
                                    not in(v, continuous_signals)
                                ],
        since_time_rule()     = [invalid_auto_var(v, id, v) : v <- rule.signals, not is_discrete(v)];
    }


    // [CoreWFError] discrete_rules_errs(SignalVar id, [+DiscreteRule] rules) {
    ## RESTORE THE ABOVE SIGNATURE ONE THE TYPECHECKING BUG HAS BEEN FIXED
    [CoreWFError] discrete_rules_errs(SignalVar id, [DiscreteRule] rules) {
      ## HERE I SHOULD ALSO CHECK THAT THE RULES ARE NOT GUARANTEED TO FIRE TOGETHER...
      continuous_signals = continuous_signals_level_2;
      return [
        invalid_auto_var(v, id, e)
        : r <- rules,
          discrete_signals = enabled_discrete_signals(r.cond),
          e <- [r.cond.cond, r.value], v <- auto_expr_extern_vars(e),
          not (in(v, continuous_signals) or in(v, discrete_signals) or in(v, delayed_signals))
      ];
    }


    [CoreWFError] nested_auto_errs(NestedAutoVar id, AutoSymbol type, [Atom -> Expr] args) {
      nested_auto = automaton_by_id(type);
      exp_inputs = [bare_id(v) : v _ <- nested_auto.inputs];
      errs  = [invalid_input(id, type, input_id) : input_id _ <- args, not exp_inputs(input_id)] &
              [undefined_input(id, type, input_id) : input_id <- exp_inputs, not args(input_id, _)];
      return errs if errs != [];
      return union([{
          input_is_discrete = nested_auto.inputs[signal_var(input_id)].discrete;
          discrete_vars = [v : v <- auto_expr_extern_vars(e), is_discrete(v)];
          return if input_is_discrete
            then [continous_expr_for_discrete_input(id, input_id) if discrete_vars == []]
            else [invalid_nested_auto_input_var(v, id, input_id, e) : v <- discrete_vars];
        } : input_id e <- args
      ]);
    }
  }

  //////////////////////////////////////////////////////////////////////////////

  [CoreWFError] dependency_errors {
    shallow_deps = merge([
      [id -> dependencies(info.value) : id info <- automaton.params],
      [id -> dependencies(id, sv) : id sv <- automaton.state],
      [id -> dependencies(e) : id e <- automaton.rules],
      [id -> dependencies(r) : id r <- automaton.time_rules],
      [id -> union([dependencies(r) : r <- rs]) : id rs <- automaton.discrete_rules],
      [id -> union([dependencies(e) : _ e <- info.args]) : id info <- automaton.nested_autos]
    ]);
    deep_deps = transitive_closure(shallow_deps);
    return [dependency_loop(v, nonempty(ds)) : v ds <- deep_deps, ds(v)];


    [SignalVar]     dependency(SignalVar var)       = [var];
    [NestedAutoVar] dependency(QualSignalVar var)   = [cast_nested_auto_var(var.auto_var)];
    []              dependency(PrevVarValue)        = [];


    [<SignalVar, NestedAutoVar>] dependencies(Expr expr) =
      union([dependency(v) : v <- auto_expr_extern_vars(expr)]);


    [<SignalVar, NestedAutoVar>] dependencies(ReactCond cond) {
      signals_deps = match (cond)
        react_cond()            = union([dependency(v) : v _ <- cond.signals_state]),
        on_becoming_true_cond() = [];
      return dependencies(cond.cond) & signals_deps;
    }


    [<SignalVar, NestedAutoVar>] dependencies(SignalVar id, StateVar state_var) {
      init_deps = dependencies(state_var.init_value);
      update_deps = union([dependencies(u.value) & dependencies(u.cond) : u <- state_var.updates]) - [id];
      return init_deps & update_deps;
    }


    [<SignalVar, NestedAutoVar>] dependencies(TimeRule rule) =
      boolean_time_rule()   |
      unchanged_time_rule() = dependencies(rule.expr),
      since_time_rule()     = rule.signals;


    [<SignalVar, NestedAutoVar>] dependencies(DiscreteRule rule) =
      dependencies(rule.value) & dependencies(rule.cond);
  }

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  [AnySignalVar] enabled_discrete_signals(ReactCond cond) =
    on_becoming_true_cond() = [],
    react_cond()            = [v : v s <- cond.signals_state, s, is_discrete(v)];

  //////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////

  [SignalVar] continuous_signals_level_1 =
    keys(automaton.params) &
    [id : id input <- automaton.inputs, not input.discrete] &
    keys(automaton.state) &
    keys(automaton.rules);

  [AnySignalVar] continuous_signals_level_2 =
    continuous_signals_level_1 &
    keys(automaton.time_rules) &
    [ qual_signal_var(id, out_id)
      : id info <- automaton.nested_autos,
        out_id out_info <- automaton_by_id(info.type).outputs,
        not out_info.discrete
    ];

  [<AnySignalVar, PrevVarValue>] delayed_signals =
    [prev_var_value(id) : id input <- automaton.inputs, not input.discrete] &
    [prev_var_value(id) : id _ <- automaton.state];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THE IMPLICIT ARGUMENTS ARE TOTALLY UNNECESSARY, BUT THE TYPECHECKER IS TO DUMB TO FIGURE THAT OUT
implicit program : Program, automaton : Automaton {
  Bool is_discrete(<PrevVarValue, QualMembVar>) = false;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  Bool overlap(<Method, Update> d1, <Method, Update> d2) =
    none((are_ptype_disjoint(left(a1), left(a2)) : a1, a2 <- zip(d1.args, d2.args)));

  Bool overlap(ReactMethod d1, ReactMethod d2) =
    none((are_ptype_disjoint(left(a1), left(a2)) : a1, a2 <- zip(d1.args, d2.args)));
}
