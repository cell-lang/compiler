type SynParTypeSymbol = par_type_symbol(symbol: BasicTypeSymbol, params: SynType+);
type SynTypeSymbol    = BasicTypeSymbol, SynParTypeSymbol;

/////////////////////////////////////////////////////////////////////////////////////

type SynType        = SynLeafType, SynTypeRef, SynTypeVar, SynNeSeqType, SynNeSetType,
                      SynNeMapType, SynRecordType, SynNeBinRelType, SynNeTernRelType,
                      SynTupleType, SynTagObjType, SynUnionType;

type SynTypeVar     = type_var(Symbol);

type SynLeafType    = LeafType, syn_int_range(min: Int, max: Int);
type SynTypeRef     = type_ref(SynTypeSymbol);

type SynNeSeqType   = ne_seq_type(elem_type: SynType);
type SynNeSetType   = ne_set_type(elem_type: SynType);
type SynNeMapType   = ne_map_type(key_type: SynType, value_type: SynType);

type SynNeBinRelType  = ne_bin_rel_type(signatures: (SynType, SynType)+);
type SynNeTernRelType = ne_tern_rel_type(signatures: (SynType, SynType, SynType)+);

type SynRecordType  = record_type(SynRecordField+);
type SynRecordField = (label: SymbObj, type: SynType, optional: Bool);

type SynTupleType   = tuple_type(SynType+);

type SynTagObjType  = tag_obj_type(tag_type: SynType, obj_type: SynType);

type SynUnionType   = union_type(SynType+);

/////////////////////////////////////////////////////////////////////////////////////

type SynClsType  = cls_type(in_types: SynType+, out_type: SynType);
type SynAnyType  = SynType, SynClsType;

/////////////////////////////////////////////////////////////////////////////////////

type Typedef    = typedef(name: BasicTypeSymbol, type: SynType);

type ParTypedef = par_typedef(name: BasicTypeSymbol, params: TypeVar+, type: SynType);

type AnyTypedef = Typedef, ParTypedef;

/////////////////////////////////////////////////////////////////////////////////////

type SynExpr  = undefined, LeafObj, FloatLit, FnArg, ConstOrVar, ClsPar, PrevVarValue, SynGroupedExpr,
                SynSeqExpr, SynSetExpr, SynMapExpr, SynBinRelExpr, SynTernRelExpr, SynTagObjExpr,
                SynImplArgsCall, SynUnaryOpCall, SynBinaryOpCall, SynBuiltInCall,
                SynSizeExpr, SynRelVarSizeExpr,
                SynCallLookalike, SynAggrFnCall, SynRelMembTest, SynRelLookup,
                SynBoolExpr, SynCmpExpr,
                SynMembExpr,
                SynAccExpr, SynAccTestExpr,
                SynExQualExpr, SynSCExpr, SynMCExpr, SynRelCompExpr, SynLCExpr, SynRCExpr,
                SynIfExpr, SynTryExpr,
                SynDoExpr, SynLetExpr,
                OutputIsDefExpr, OutputIsSetExpr;

type ConstOrVar       = const_or_var(Symbol);

type ClsPar           = cls_par(Nat);

type SynGroupedExpr   = grouped_expr(SynExpr);

type SynSeqExpr       = seq_expr(SynSubExpr*), seq_tail_expr(seq: SynExpr, tail: SynExpr+);
type SynSetExpr       = set_expr(SynSubExpr*);
type SynMapExpr       = map_expr(SynMapExprEntry+);
type SynBinRelExpr    = bin_rel_expr(SynBinRelEntry+);
type SynTernRelExpr   = tern_rel_expr(SynTernRelEntry+);

type SynTagObjExpr    = tag_obj_expr(tag: SynExpr, obj: SynExpr);

type SynImplArgsCall  = impl_args_call(name: Symbol, args: SynExpr*, impl_args: (ImplArg, SynExpr)+);
type SynUnaryOpCall   = unary_op_call(op: UnaryOperator, expr: SynExpr);
type SynBinaryOpCall  = binary_op_call(op: BinaryOperator, left_arg: SynExpr, right_arg: SynExpr);
type SynBuiltInCall   = builtin_call(name: BuiltIn, args: SynExpr+);

type SynSizeExpr      = size_expr(coll: SynExpr);
type SynRelVarSizeExpr  = rel_var_size_expr(rel_var_path: Symbol+, args: Maybe[SynExpr]+);

type SynCallLookalike = call_lookalike(target: SynExpr, args: SynExpr+);

type SynAggrFnCall    = aggr_fn_call(
                          fn_name:    Symbol,
                          expr:       SynExpr,
                          clause:     SynIterClause,
                          cond:       SynExpr?,
                          extra_args: SynExpr*
                        );

type SynRelMembTest   = rel_memb_test(target: SynExpr, args: Maybe[SynExpr]+);
type SynRelLookup     = rel_lookup(target: Symbol+, args: Maybe[SynExpr]+);

type SynBoolExpr      = and(left: SynExpr, right: SynExpr),
                        or(left: SynExpr, right: SynExpr),
                        not(SynExpr);

type SynCmpExpr       = eq(left: SynExpr, right: SynExpr),
                        neq(left: SynExpr, right: SynExpr);

type SynMembExpr      = membership(obj: SynExpr, type: SynType);

type SynAccExpr       = accessor(expr: SynExpr, field: Symbol);
type SynAccTestExpr   = accessor_test(expr: SynExpr, field: Symbol);

type SynExQualExpr    = ex_qual(source: SynClause+, cond: SynExpr);

type SynSCExpr        = set_comp(expr: SynExpr, source: SynClause+);
type SynMCExpr        = map_comp(key_expr: SynExpr, value_expr: SynExpr, source: SynClause+);
type SynRelCompExpr   = rel_comp(exprs: SynExpr+, source: SynClause+);

type SynLCExpr        = seq_comp(expr: SynExpr, vars: StdVar+, idx_var: StdVar?, src_expr: SynExpr, sel_expr: SynExpr?);
type SynRCExpr        = range_comp(expr: SynExpr, var: StdVar, bound_expr: SynExpr, inclusive: Bool, sel_expr: SynExpr?);

type SynIfExpr        = if_expr(branches: (cond: SynExpr, expr: SynExpr)+, else: SynExpr);
type SynTryExpr       = match_expr(exprs: SynExpr+, cases: SynCase+);

type SynDoExpr        = do_expr(body: SynStmt+, typed_vars: (Symbol, SynType)*);

type SynLetExpr       = let_expr(expr: SynExpr, stmts: SynAsgnStmt+);

/////////////////////////////////////////////////////////////////////////////////////

type SynCondExpr      = cond_expr(expr: SynExpr, cond: SynExpr);
type SynSubExpr       = SynExpr, SynCondExpr;

type SynMapExprEntry  = (key: SynExpr, value: SynExpr, cond: SynExpr?);

type SynBinRelEntry   = (args: (SynExpr, SynExpr), cond: SynExpr?);
type SynTernRelEntry  = (args: (SynExpr, SynExpr, SynExpr), cond: SynExpr?);

/////////////////////////////////////////////////////////////////////////////////////

type SynPtrn    = ptrn_symbol,
                  ptrn_float,
                  ptrn_seq,
                  ptrn_set,
                  ptrn_map,
                  ptrn_bin_rel,
                  ptrn_tern_rel,
                  ptrn_tag_obj,
                  ptrn_any,
                  ptrn_symbol(SymbObj),
                  ptrn_integer(<integer, IntObj>), ## COULD JUST BE A PATTERN JUST FOR INTEGERS IN GENERAL, THE ABILITY TO SPECIFY A PARTICULAR INTEGER SEEMS TO BE PRETTY USELESS
                  ptrn_tuple(SynPtrn+),
                  ptrn_tag_obj(tag: TagPtrn, obj: SynPtrn),
                  ptrn_var(var: StdVar, ptrn: SynPtrn),
                  ptrn_union(SynPtrn+);

type SynIterClause = iter_clause(vars: StdVar+, src: <SynExpr, SynProj>);

type SynClause  = SynIterClause,
                  seq_clause(vars: Maybe[Symbol]+, idx_var: Maybe[Symbol], src: SynExpr),
                  and_clause(SynClause+),
                  or_clause(SynClause+),
                  match_clause(ptrn: SynPtrn, expr: SynExpr),
                  asgnm_clause(var: StdVar, expr: SynExpr),
                  filter_clause(cond: SynExpr);

type SynProj    = syn_proj(target: Symbol+, args: Maybe[SynExpr]+);

type SynCase    = case(patterns: SynPtrn+, expr: SynExpr);

/////////////////////////////////////////////////////////////////////////////////////

type SynStmt  = SynAtomicFnStmt, SynAtomicUpdateStmt, SynAtomicProcStmt,
                SynCtrlStmt, SynCompStmt;

type SynAtomicFnStmt  = SynAsgnStmt, SynReturnStmt, SynBreakStmt, SynFailStmt,
                        SynAssertStmt, SynPrintStmt, SynSeqUpdateStmt;

type SynAsgnStmt      = assignment_stmt(vars: StdVar+, value: SynExpr);
type SynReturnStmt    = return_stmt(SynExpr);
type SynBreakStmt     = break_stmt;
type SynFailStmt      = fail_stmt(file: String, line: NzNat);
type SynAssertStmt    = assert_stmt(cond: SynExpr, file: String, line: NzNat, text: Maybe[String]);
type SynPrintStmt     = print_stmt(SynExpr);
type SynSeqUpdateStmt = seq_update_stmt(obj: StdVar, idx: SynExpr, value: SynExpr);

type SynAtomicUpdateStmt  = SynSendMsgStmt, SynTryUpdateStmt, SynSetMembVarStmt,
                            SynDeleteStmt, SynInsertStmt, SynInsertWithAttrsStmt;

type SynSendMsgStmt         = send_msg_stmt(msg: SynExpr);
type SynTryUpdateStmt       = try_update_stmt(name: Symbol, args: SynExpr*);
type SynSetMembVarStmt      = set_memb_var_stmt(var: Symbol, value: SynExpr);
type SynDeleteStmt          = delete_stmt(entries: (var: Symbol, args: Maybe[SynExpr]+)+);

type SynInsertStmt          = insert_stmt(
                                entries: (var: Symbol, args: SynExpr+, iter: SynCollIter?)+,
                                force:   Bool
                              );

type SynInsertWithAttrsStmt = insert_with_attrs_stmt(
                                relvar: Symbol,
                                args:   SynExpr+,
                                attrs:  (name: Symbol, value: SynExpr, cond: SynExpr?, iter: SynCollIter?)+
                              );

type SynAtomicProcStmt  = SynNoValRetStmt, SynProcCallStmt;

type SynNoValRetStmt  = return_stmt;
type SynProcCallStmt  = proc_call_stmt(res_var: StdVar?, proc_name: ProcSymbol, args: SynExpr*);

type SynCtrlStmt  = set_input_ctrl_stmt(var: Symbol, input: Symbol, value: SynExpr),
                    clear_input_ctrl_stmt(var: Symbol, input: Symbol),
                    set_elapsed_time_ctrl_stmt(var: Symbol, time: SynExpr),
                    apply_ctrl_stmt(auto_var: Symbol, res_var: Symbol),
                    send_msg_ctrl_stmt(res_var: Symbol, db_var: Symbol, msg: SynExpr),
                    read_state_ctrl_stmt(res_var: Symbol, db_var: Symbol),
                    restore_state_ctrl_stmt(res_var: Symbol, db_var: Symbol, state: SynExpr);


type SynCompStmt = SynIfStmt, SynLoopStmt, SynInfLoopStmt, SynForStmt, SynLetStmt;

type SynIfStmt       = if_stmt(branches: (cond: SynExpr, body: SynStmt+)+, else: SynStmt*);
type SynLoopStmt     = loop_stmt(cond: SynExpr, skip_first: Bool, body: SynStmt+);
type SynInfLoopStmt  = inf_loop_stmt(SynStmt+);
type SynForStmt      = for_stmt(loops: SynIter+, body: SynStmt+);
type SynLetStmt      = let_stmt(asgnms: (ImplArg, SynExpr)+, body: SynStmt+);

/////////////////////////////////////////////////////////////////////////////////////

type SynCollIter      = coll_value_iter(vars: Maybe[StdVar]+, idx_var: StdVar?, src_expr: SynExpr);
type SynFilteredIter  = filtered_iter(vars: Maybe[Symbol]+, target: Symbol+, args: Maybe[SynExpr]+);
type SynRangeIter     = range_iter(var: StdVar?, start_val: SynExpr, end_val: SynExpr, end_val_incl: Bool);

type SynIter = SynCollIter, SynFilteredIter, SynRangeIter;

/////////////////////////////////////////////////////////////////////////////////////

type SynFnDef       = syn_fn_def(
                        name:       FnSymbol,
                        args:       SynArg*,
                        res_type:   SynType,
                        expr:       SynExpr,
                        local_fns:  SynFnDef*,
                        typevars:   [[+TypeVar -> Symbol]]
                      );

type SynObjArg  = obj_arg(type: SynType, name: Symbol?);
type SynClsArg  = cls_arg(type: SynClsType, name: Symbol);
type SynArg     = SynObjArg, SynClsArg;

type SynProcDef   = syn_proc_def(
                      name:             ProcSymbol,
                      args:             (var: Symbol, type: SynType)*,
                      res_type:         Maybe[SynType],
                      auto_or_db_vars:  (var: Symbol, args: Symbol*, type: Symbol)*,
                      body:             SynStmt*
                    );

type ImplArgDecl  = impl_arg_decl(name: ImplArg, type: SynType);

type ImplBlock    = impl_block(args: ImplArgDecl+, fn_defs: SynFnDef+);

type ProtDecl     = prot_decl(types: Symbol+, methods: (FnSymbol, SynType+, SynType)+);

type TypeVarDecl  = typevar_decl(type_vars: Symbol+, prot_types: Symbol++);

////////////////////////////////////////////////////////////////////////////////

type AggrFunctDecl  = aggr_funct_decl(
                        type:         SynType,
                        name:         Symbol,
                        elt_type:     SynType,
                        elt_name:     Symbol,
                        extra_args:   (SynType, Symbol)*,
                        red_vars: (
                          type:       SynType,
                          name:       Symbol,
                          init_value: SynExpr,
                          merge_op:   (Symbol, Symbol, SynExpr)
                        )+,
                        null_value:   SynExpr,
                        final_value:  SynExpr
                      );

////////////////////////////////////////////////////////////////////////////////

type InputDecl      = input_decl(name: Symbol, type: SynType, discrete: Bool);
type OutputDecl     = output_decl(name: Symbol, type: SynType, discrete: Bool);
type StateVarDecl   = state_var_decl(name: Symbol, type: SynType, init_value: SynExpr);
type ConstDecl      = const_decl(name: Symbol, type: SynType?, value: SynExpr);

type PlainRuleDecl   = plain_rule_decl(name: Symbol, expr: SynExpr, discrete: Bool);
type WhenRuleDecl    = when_rule_decl(name: Symbol, expr: SynExpr, cond: SynExpr, discrete: Bool);
type CondRuleDecl    = cond_rule_decl(name: Symbol, expr: SynExpr, cond: SynExpr, discrete: Bool);
type ForeachRuleDecl = foreach_rule_decl(name: Symbol, value: SynExpr, signals: (Symbol, Bool)+, cond: SynExpr?, discrete: Bool);

type TimeRuleDecl = true_for_rule_decl(name: Symbol, cond: SynExpr, time_expr: TimeExpr),
                    unchanged_for_rule_decl(name: Symbol, cond: SynExpr, time_expr: TimeExpr),
                    inactive_for_rule_decl(
                      name:             Symbol,
                      signals:          Symbol+,
                      time_expr:        TimeExpr,
                      starts_at_time_0: Bool
                    );

type NestedAutoDecl = nested_auto_decl(name: Symbol, auto_name: Symbol, pos_args: SynExpr*, args: (Symbol, SynExpr)*);

type MsgSendDecl    = msg_send_decl(
                        target:   Symbol,
                        message:  SynExpr,
                        cond:     Maybe[SynExpr],
                        signals:  Symbol*
                      );

type RuleDecl       = PlainRuleDecl, WhenRuleDecl, CondRuleDecl, ForeachRuleDecl, TimeRuleDecl, NestedAutoDecl, MsgSendDecl;

type AutoMethodDef  = auto_method_def(
                        target:     Symbol,
                        name:       Symbol,
                        args:       (SynType, StdVar)*,
                        ret_type:   SynType,
                        expr:       SynExpr
                      );

type DBMethodDef    = db_method_def(
                        name:     Symbol,
                        args:     (SynType, Symbol)*,
                        ret_type: SynType,
                        expr:     SynExpr
                      );

type UsingBlock     = using_block(target: Symbol, decls: <DBMethodDef, UpdateDef>*);

type UpdateDef      = update_def(
                        name:   Symbol,
                        args:   (SynType, StdVar)*,
                        body:   SynStmt*
                      );

type HandlerDef     = handler_def(target: Symbol, type: SynType, body: SynStmt*);

type ReactAutoDef   = react_auto_def(
                        name:       Symbol,
                        pos_inputs: Symbol*,
                        def_output: Symbol?,
                        parent:     Symbol?,
                        inputs:     InputDecl*,
                        outputs:    OutputDecl*,
                        state_vars: StateVarDecl*,
                        nested_dbs: NestedDBDecl*,
                        consts:     ConstDecl*,
                        rules:      RuleDecl*
                      );

type RelVarsDecl    = relvars_decl(
                        name:       Symbol,
                        col_types:  SynType+,
                        keys:       Nat+*,
                        symmetric:  Bool,
                        attributes: AttrRelVar*
                      );

type AttrRelVar     = attr_relvar(name: Symbol, type: SynType, cardinality: AttrCard, unique: Bool);
type AttrCard       = attr_card(required: Bool, multiple: Bool);

type ForeignKeyDecl = foreign_key_decl(
                        src_rel:  Symbol,
                        src_args: Maybe[Symbol]+,
                        targets:  (Symbol, Maybe[Symbol]+)+
                      );

type NestedDBDecl   = nested_db_decl(name: Symbol, type: Symbol);

type SchemaItemDecl = StateVarDecl, RelVarsDecl, ForeignKeyDecl, NestedDBDecl;

type SchemaDef      = schema_def(
                        name:   Symbol,
                        links:  Symbol*,
                        decls:  SchemaItemDecl*
                      );

////////////////////////////////////////////////////////////////////////////////

type PrgDecl        = Typedef, ParTypedef, SynFnDef, ImplBlock, ProtDecl, TypeVarDecl, SynProcDef,
                      AggrFunctDecl, ReactAutoDef, SchemaDef, AutoMethodDef, HandlerDef, UsingBlock;

type SynPrg         = syn_prg(parsed_src_files: [String -> PrgDecl*]);