type Context = Function, Procedure, Automaton, Database;

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType] {
  [FnFamilyId -> SgnSet] signatures {
    signatures = merge_values([[family_id(fd.id) -> signature(fd)] : fd <- program.fndefs]);
    return [id -> preprocess_signatures(ss) : id, ss <- signatures];
  }


  (NeType*, Maybe[NeType]) procedure_signature(ProcSymbol name) {
    if builtin_procedures_signatures(name, *):
      return builtin_procedures_signatures[name];
    else
      proc = procs_by_name[name];
      return ((a.type : a <- proc.args), proc.res_type);
    ;

    [ProcSymbol -> Procedure] procs_by_name = [p.id -> p : p <- program.proc_defs];
  }


  SgnSet method_signatures(<AutoSymbol, DBSymbol> type, MethodSymbol name, Nat arity) {
    return signatures[type][(name, arity)];

    [<AutoSymbol, DBSymbol> -> [(MethodSymbol, Nat) -> SgnSet]] signatures = [
        auto_or_db.name -> {
          sgns = merge_values([[(m.name, |m.args|) -> signature(m)] : m <- auto_or_db.methods]);
          return [n -> preprocess_signatures(ss) : n, ss <- sgns];
        }
      : auto_or_db <- program.auto_defs | auto_or_db <- program.data_bases
    ];
  }


  Type db_msg_type(DBSymbol type) {
    return msg_type_by_db[type];

    [DBSymbol -> Type] msg_type_by_db = [
      db.name -> union_superset([h.type : h <- db.handlers]) : db <- program.data_bases
    ];
  }


  [DBSymbol -> [UpdateSymbol -> [+NeType*]]] updates_signatures_by_db_and_update_name_private = [
    db.name -> merge_values([[u.name -> (t : t, unused_var <- u.args)] : u <- db.updates])
    : db <- program.data_bases
  ];


  [+NeType*] update_signatures(DBSymbol db_type, UpdateSymbol update_name) =
    updates_signatures_by_db_and_update_name_private[db_type][update_name];


  [NeType*] update_aggregate_signatures(DBSymbol db_type, UpdateSymbol update_name) {
    return aggregated_signatures[db_type][update_name];

    [DBSymbol -> [UpdateSymbol -> [NeType*]]] aggregated_signatures = [
      db -> [u -> aggregated_relation_signatures(ss) : u, ss <- us]
      : db, us <- updates_signatures_by_db_and_update_name_private
    ];
  }


  [NeType+] relvar_aggregated_signatures(DBSymbol db_type, RelVar var) {
    return aggregated_signatures[db_type][var];

    [DBSymbol -> [RelVar -> [NeType+]]] aggregated_signatures = [
      db.name -> [v -> aggregated_relation_signatures(info.signatures) : v, info <- db.rel_vars]
      : db <- program.data_bases
    ];
  }
}

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, context : Context {
  [ClsVar -> ClsType] closures =
    match (context)
      function()    = [a.var -> a.type : a <~ context.args, formal_cls_arg() ?= a],
      _             = [];


  [PlainFnFamilyId -> [+ClsType]] constraints =
    match (context)
      function()  = merge_values([[fn_family_id(n, arity(s)) -> s] : n, ss <- context.constrs, s <- ss]),
      _           = [];


  [+NeType+] relvar_signatures(RelVar relvar) = match (context)
    data_base()   = context.rel_vars[relvar].signatures;


  [+NeType+] relvar_signatures(QualRelVar relvar) {
    db_type = var_type(relvar.db_var);
    db = automaton_by_id(db_type);
    return db.rel_vars[relvar.rel_var].signatures;
  }


  [[+Nat]] relvar_keys(RelVar relvar) = match (context)
    data_base()   = context.rel_vars[relvar].keys;


  [[+Nat]] relvar_keys(QualRelVar relvar) {
    db_type = var_type(relvar.db_var);
    db = automaton_by_id(db_type);
    return db.rel_vars[relvar.rel_var].keys;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program {
  [TypeName -> NeType] schema_and_typedefs {
    schema_typedefs = [type_name(schema_type_symbol(bare_id(db.name)), 0) -> state_type(db) : db <- program.data_bases];
    return program.typedefs & schema_typedefs;
  }

  Int+* int_seqs = rand_sort(retrieve_nested_int_seqs(program));

  [Int+ -> Nat] int_seqs_ids = merge(([s -> i] : s @ i <- int_seqs));

  Bool input_is_discrete(AutoSymbol auto, SignalVar input) {
    return auto_input_is_discrete_map[auto][input];

    [AutoSymbol -> [SignalVar -> Bool]] auto_input_is_discrete_map =
      [a.name -> [id -> input.discrete  : id, input <- a.inputs]  : a <- program.auto_defs];
  }

  Bool output_is_discrete(AutoSymbol auto, SignalVar output) {
    return auto_output_is_discrete_map[auto][output];

    [AutoSymbol -> [SignalVar -> Bool]] auto_output_is_discrete_map =
      [a.name -> [id -> output.discrete : id, output <- a.outputs] : a <- program.auto_defs];
  }

  Bool is_time_sensitive(AutoSymbol auto) = in(auto, time_sensitive_autos);

  //////////////////////////////////////////////////////////////////////////////

  [AutoSymbol] time_sensitive_autos {
    automata = program.auto_defs;
    autos_with_time_rules = [a.name : a <- automata, a.time_rules != []];
    auto_shallow_deps = [a.name -> [na.type : unused_var, na <- a.nested_autos] : a <- automata];
    auto_deep_deps = transitive_closure(auto_shallow_deps);
    autos_with_time_sensitive_nested_autos =  [a.name : a <- automata, not disjoint(auto_deep_deps[a.name], autos_with_time_rules)];
    return autos_with_time_rules & autos_with_time_sensitive_nested_autos;
  }

  //////////////////////////////////////////////////////////////////////////////

  Automaton automaton_by_id(AutoSymbol type) {
    return reactive_automata[type];

    [AutoSymbol -> Automaton] reactive_automata = [auto.name -> auto : auto <- program.auto_defs];
  }

  //////////////////////////////////////////////////////////////////////////////

  [DBSymbol -> [RelVar -> Table]] tables_by_db = [
    db.name -> value_stores_and_tables(database=db)(1) : db <- program.data_bases
  ];


  Database automaton_by_id(DBSymbol type) {
    return static_automata[type];

    [DBSymbol -> Database] static_automata = [db.name -> db : db <- program.data_bases];
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, context : Context {
  AutoSymbol var_type(NestedAutoVar var) =
    match (context)
      automaton()   = context.nested_autos[var].type;


  AutoSymbol var_type(LocAutoVar var) =
    match (context)
      procedure()    = context.auto_vars[var];


  DBSymbol var_type(NestedDBVar var) =
    match (context)
      automaton()   = context.nested_dbs[var].type,
      data_base()   = context.nested_dbs[var];


  DBSymbol var_type(LinkedDBVar var) =
    match (context)
      data_base() = context.links(match (var) linked_db_var(i?) = i);


  DBSymbol var_type(LocDBVar var) =
    match (context)
      procedure()    = context.db_vars[var].type;


  DBSymbol var_type(QualDBVar var) = automaton_by_id(var_type(var.outer)).nested_dbs[var.inner];


  AutoSymbol this_auto_symbol =
    match (context)
      automaton() = context.name;


  DBSymbol this_db_symbol =
    match (context)
      data_base()  = context.name;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, context : Context {
  ValueStoreId table_col_store_id(RelVar rel_var, Nat col_idx) =
    tables_by_db[this_db_symbol][rel_var].value_stores(col_idx);


  NestedValueStoreId table_col_store_id(QualRelVar rel_var, Nat col_idx) {
    db_type = var_type(rel_var.db_var);
    store_id = tables_by_db[db_type][rel_var.rel_var].value_stores(col_idx);
    return nested_value_store_id(rel_var.db_var, store_id);
  }


  ## INEFFICIENT, SHOULD BE CACHED
  Nat+ relvar_cols_perm(AnyRelVar rel_var) {
    rv_info = match (rel_var)
      rel_var()       = {match (context) data_base() = context.rel_vars[rel_var]},
      qual_rel_var()  = automaton_by_id(var_type(rel_var.db_var)).rel_vars[rel_var.rel_var];
    arity = only([|s| : s <- rv_info.signatures]);
    return table_cols_perm(arity, rv_info.keys);
  }


  ## THIS DOESN'T REALLY NEED THE "program" IMPLICIT ARGUMENT, BUT
  ## THE TYPE CHECKER IS CURRENTLY TOO DUMB TO FIGURE THAT OUT
  ## INEFFICIENT, SHOULD BE CACHED
  [[+Nat]] table_keys(RelVar rel_var) = permutate_keys(
    relvar_keys(rel_var),
    nonempty(relvar_cols_perm(rel_var))
  );
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, automaton : Automaton {
  Bool is_discrete(AnySignalVar var) {
    return in(var, discrete_signals);

    [AnySignalVar] discrete_signals =
      [id : id, input <- automaton.inputs, input.discrete] &
      keys(automaton.discrete_rules) &
      [ qual_signal_var(id, out_id)
        : id, info <- automaton.nested_autos,
          out_id, out_info <- automaton_by_id(info.type).outputs,
          out_info.discrete
      ];
  }
}
