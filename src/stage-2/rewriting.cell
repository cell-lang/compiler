Expr rewrite_expr(Expr expr, (Expr -> Expr) rw_expr, (Clause -> Clause) rw_cls, (Statement -> Statement) rw_stmt) {
  return expr if expr :: Var;
  return match (expr)
    undefined             |
    object()              |
    float_lit()           |
    output_is_def()       |
    output_is_set()       = expr,

    set_expr(ses?)        = set_expr([rewrite_subexpr(se, rw_expr) : se <- ses]),
    seq_expr(ses?)        = seq_expr((rewrite_subexpr(se, rw_expr) : se <- ses)),
    tuple_expr(es?)       = tuple_expr((rw_expr(e) : e <- es)),
    seq_tail_expr()       = seq_tail_expr(rw_expr(expr.seq), (rw_expr(e) : e <- expr.tail)),
    map_expr(es?)         = map_expr([(key: rw_expr(e.key), value: rw_expr(e.value), cond: rw_expr(e.cond) if e.cond?) : e <- es]),
    bin_rel_expr(es?)     = bin_rel_expr([(args: (rw_expr(a) : a <- e.args), cond: rw_expr(e.cond) if e.cond?) : e <- es]),
    tern_rel_expr(es?)    = tern_rel_expr([(args: (rw_expr(a) : a <- e.args), cond: rw_expr(e.cond) if e.cond?) : e <- es]),
    tag_obj_expr()        = tag_obj_expr(rw_expr(expr.tag), rw_expr(expr.obj)),
    fn_call()             = fn_call(
                              expr.fn_id,
                              (rw_expr(a) : a <- expr.args),
                              (rewrite_closure(c, rw_expr) : c <- expr.cls_args),
                              [a -> rw_expr(e) : a, e <- expr.impl_args]
                            ),
    cls_call()            = cls_call(expr.name, (rw_expr(a) : a <- expr.args)),
    builtin_call()        = builtin_call(expr.name, (rw_expr(a) : a <- expr.args)),
    size_expr()           = size_expr(rw_expr(expr.coll)),
    rel_var_size_expr()   = rel_var_size_expr(expr.rel_var, (apply(a, rw_expr) : a <- expr.args)),
    unary_pseudo_call()   = unary_pseudo_call(rw_expr(expr.target), rw_expr(expr.arg)),
    rel_memb_test()       = rel_memb_test(rw_expr(expr.rel), (apply(a, rw_expr) : a <- expr.args)),
    rel_lookup()          = rel_lookup(rw_expr(expr.rel), (apply(a, rw_expr) : a <- expr.args)),
    relvar_memb_test()    = relvar_memb_test(expr.rel_var, (apply(a, rw_expr) : a <- expr.args)),
    relvar_lookup()       = relvar_lookup(expr.rel_var, (apply(a, rw_expr) : a <- expr.args)),
    and_expr()            = and_expr(rw_expr(expr.left), rw_expr(expr.right)),
    or_expr()             = or_expr(rw_expr(expr.left), rw_expr(expr.right)),
    not_expr(e?)          = not_expr(rw_expr(e)),
    eq()                  = eq(rw_expr(expr.left), rw_expr(expr.right)),
    membership()          = membership(rw_expr(expr.obj), expr.type),
    accessor()            = accessor(rw_expr(expr.expr), expr.field),
    accessor_test()       = accessor_test(rw_expr(expr.expr), expr.field),
    aggr_fn_call()        = aggr_fn_call(
                              fn_id:      expr.fn_id,
                              expr:       rw_expr(expr.expr),
                              clause:     { cls = rw_cls(expr.clause);
                                            return if cls :: RelVarClause then cls else undefined;
                                          },
                              cond:       rw_expr(expr.cond) if expr.cond?,
                              extra_args: (rw_expr(e) : e <- expr.extra_args)
                            ),
    auto_method_call()    = auto_method_call(
                              var:  expr.var if expr.var?,
                              name: expr.name,
                              args: (rw_expr(a) : a <- expr.args)
                            ),
    db_method_call()      = db_method_call(
                              var:  expr.var if expr.var?,
                              name: expr.name,
                              args: (rw_expr(a) : a <- expr.args)
                            ),
    if_expr()             = if_expr(rw_expr(expr.cond), rw_expr(expr.then), rw_expr(expr.else)),
    match_expr()          = match_expr(
                              (rw_expr(e) : e <- expr.exprs),
                              ((ptrns: c.ptrns, expr: rw_expr(c.expr)) : c <- expr.cases)
                            ),
    do_expr()             = do_expr((rw_stmt(s) : s <- expr.body), expr.typed_vars),
    ex_qual()             = ex_qual(rw_cls(expr.source), rw_expr(expr.cond)),
    set_comp()            = set_comp(rw_expr(expr.expr), rw_cls(expr.source)),
    map_comp()            = map_comp(rw_expr(expr.key_expr), rw_expr(expr.value_expr), rw_cls(expr.source)),
    bin_rel_comp()        = bin_rel_comp((rw_expr(e) : e <- expr.exprs), rw_cls(expr.source)),
    tern_rel_comp()       = tern_rel_comp((rw_expr(e) : e <- expr.exprs), rw_cls(expr.source)),
    seq_comp()            = seq_comp(
                              expr:     rw_expr(expr.expr),
                              vars:     expr.vars,
                              idx_var:  expr.idx_var if expr.idx_var?,
                              src_expr: rw_expr(expr.src_expr),
                              sel_expr: rw_expr(expr.sel_expr) if expr.sel_expr?
                            ),
    range_comp()          = range_comp(
                              expr:     rw_expr(expr.expr),
                              var:      expr.var,
                              bound_expr: rw_expr(expr.bound_expr),
                              inclusive:  expr.inclusive,
                              sel_expr:   rw_expr(expr.sel_expr) if expr.sel_expr?
                            );

  //////////////////////////////////////////////////////////////////////////////

  Expr rewrite_subexpr(Expr expr, (Expr -> Expr) rw_expr) = rw_expr(expr);

  CondExpr rewrite_subexpr(CondExpr expr, (Expr -> Expr) rw_expr) =
    cond_expr(rw_expr(expr.expr), rw_expr(expr.cond));

  //////////////////////////////////////////////////////////////////////////////

  AnyClsExpr rewrite_closure(AnyClsExpr expr, (Expr -> Expr) rw_expr) =
    cls_var()   |
    fn_ptr()    = expr,
    cls_expr()  = cls_expr(expr.arity, rw_expr(expr.expr));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Clause rewrite_clause(Clause cls, (Expr -> Expr) rw_expr, (Clause -> Clause) rw_cls) =
  set_clause()      = set_clause(cls.var, rw_expr(cls.src)),
  rel_clause()      = rel_clause(cls.vars, rw_expr(cls.src), (apply(a, rw_expr) : a <- cls.args)),
  relvar_clause()   = relvar_clause(cls.vars, cls.rel_var, (apply(a, rw_expr) : a <- cls.args)),
  seq_clause()      = seq_clause(cls.vars, cls.idx_var, rw_expr(cls.src)),
  and_clause()      = and_clause(rw_cls(cls.left), rw_cls(cls.right)),
  or_clause()       = or_clause(rw_cls(cls.left), rw_cls(cls.right)),
  match_clause()    = match_clause(cls.ptrn, rw_expr(cls.expr)),
  asgnm_clause()    = asgnm_clause(cls.var, rw_expr(cls.expr)),
  filter_clause(e?) = filter_clause(rw_expr(e));

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Statement rewrite_stmt(Statement stmt, (Expr -> Expr) rw_expr, (Statement -> Statement) rw_stmt) {
  return match (stmt)
    assert_stmt()           = assert_stmt(rw_expr(stmt.cond), stmt.env, stmt.file, stmt.line, stmt.text),
    seq_update_stmt()       = seq_update_stmt(stmt.seq_var, stmt.idx, rw_expr(stmt.value)),
    assignment_stmt()       = assignment_stmt(stmt.vars, rw_expr(stmt.value)),
    print_stmt(e?)          = print_stmt(rw_expr(e)),
    send_msg_stmt()         = send_msg_stmt(stmt.target, rw_expr(stmt.msg)),
    try_update_stmt()       = try_update_stmt(stmt.name, (rw_expr(e) : e <- stmt.args)),
    set_memb_var_stmt()     = set_memb_var_stmt(stmt.var, rw_expr(stmt.value)),
    delete_stmt()           = delete_stmt(stmt.var, (apply(a, rw_expr) : a <- stmt.args)),
    insert_stmt()           = insert_stmt(stmt.var, (rw_expr(a) : a <- stmt.args)),
    update_stmt()           = update_stmt(stmt.var, (rw_expr(a) : a <- stmt.args)),
    proc_call_stmt()        = proc_call_stmt(
                                res_var:    stmt.res_var if stmt.res_var?,
                                proc_name:  stmt.proc_name,
                                args:       (rw_expr(e) : e <- stmt.args)
                              ),
    return_stmt(e?)         = return_stmt(rw_expr(e)),
    break_stmt              |
    return_stmt             |
    fail_stmt()             = stmt,

    set_input_ctrl_stmt()         = set_input_ctrl_stmt(stmt.var, stmt.input, rw_expr(stmt.value)),
    clear_input_ctrl_stmt()       = clear_input_ctrl_stmt(stmt.var, stmt.input),
    set_elapsed_time_ctrl_stmt()  = set_elapsed_time_ctrl_stmt(stmt.var, rw_expr(stmt.time)),
    apply_ctrl_stmt()             = stmt,
    send_msg_ctrl_stmt()          = send_msg_ctrl_stmt(stmt.res_var, stmt.db_var, rw_expr(stmt.msg)),
    read_state_ctrl_stmt()        = read_state_ctrl_stmt(stmt.res_var, stmt.auto_var),
    restore_state_ctrl_stmt()     = restore_state_ctrl_stmt(stmt.res_var, stmt.auto_var, rw_expr(stmt.state)),

    if_stmt()               = if_stmt(rw_expr(stmt.cond), (rw_stmt(s) : s <- stmt.body), (rw_stmt(s) : s <- stmt.else)),
    loop_stmt(ss?)          = loop_stmt((rw_stmt(s) : s <- ss)),
    foreach_stmt()          = foreach_stmt(rewrite(stmt.iter, rw_expr), (rw_stmt(s) : s <- stmt.body)),
    for_stmt()              = for_stmt(
                                var:          stmt.var if stmt.var?,
                                start_val:    rw_expr(stmt.start_val),
                                end_val:      rw_expr(stmt.end_val),
                                end_val_incl: stmt.end_val_incl,
                                body:         (rw_stmt(s) : s <- stmt.body)
                              ),
    let_stmt()              = let_stmt([a -> rw_expr(e) : a, e <- stmt.asgnms], (rw_stmt(s) : s <- stmt.body));


    CollValueIter rewrite(CollValueIter iter, (Expr -> Expr) rw_expr) =
      coll_value_iter(vars: iter.vars, idx_var: iter.idx_var if iter.idx_var?, src_expr: rw_expr(iter.src_expr));

    RelSubsetIter rewrite(RelSubsetIter iter, (Expr -> Expr) rw_expr) =
      rel_subset_iter(iter.vars, rw_expr(iter.src_expr), (apply(a, rw_expr) : a <- iter.args));

    RelVarIter rewrite(RelVarIter iter, (Expr -> Expr) rw_expr) =
      rel_var_iter(iter.vars, iter.rel_var, (apply(a, rw_expr) : a <- iter.args));
}
