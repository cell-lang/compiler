type CodeOutcome = fails, returns, breaks_loop, exits_block, falls_through;

<fails>         fails         = :fails;
<returns>       returns       = :returns;
<breaks_loop>   breaks_loop   = :breaks_loop;
<exits_block>   exits_block   = :exits_block;
<falls_through> falls_through = :falls_through;


[+CodeOutcome] code_outcomes(BasicInstr) = [:fails, falls_through];


[+CodeOutcome] code_outcomes(JumpInstr) =
  break_loop    = [breaks_loop],
  exit_block    = [exits_block],
  ret_val()     = [returns],
  terminate()   = [fails];


[+CodeOutcome] code_outcomes(CompInstr instr) =
  branch()            = nonempty(code_outcomes(instr.when_true) & code_outcomes(instr.when_false)),
  switch_on_nat()     = nonempty(union([code_outcomes(c) : c <- instr.cases])),
  symb_switch()       = nonempty(union([code_outcomes(right(c)) : c <- instr.cases]) & code_outcomes(instr.else)),
  repeat(is?)         = loop_outcomes(is),
  foreach()           = [if o == breaks_loop then falls_through else o : o <- code_outcomes(instr.body)],
  execute_block(is?)  = block_outcomes(is),
  try_block()         = { assert block_outcomes(instr.body) :: [<fails, falls_through>];
                          return [falls_through];
                        };


[+CodeOutcome] loop_outcomes(Instr+ body) {
  body_outcomes = code_outcomes(body);
  may_break = in(breaks_loop, body_outcomes);
  return nonempty((body_outcomes - [breaks_loop, falls_through]) & [if may_break then falls_through else fails]);
}


[+CodeOutcome] block_outcomes(Instr+ body) {
  body_outcomes = code_outcomes(body);
  may_exit = in(exits_block, body_outcomes);
  return nonempty((body_outcomes - [exits_block]) & [falls_through if may_exit]);
}


[+CodeOutcome] code_outcomes(Instr* instrs) {
  outcomes = [falls_through];
  for instr <- instrs {
    assert in(falls_through, outcomes);
    outcomes = (outcomes - [falls_through]) & code_outcomes(instr);
    break if not in(falls_through, outcomes);
  }
  return nonempty(outcomes);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[MembVar] updated_memb_vars(CompiledUpdate update) {
  return search_instrs(update.body, updated_memb_vars);

  [MembVar] updated_memb_vars(Instr instr) =
    set_var()   = [corresponding_memb_var(instr.var) if instr.var :: PendingStateVar],
    _           = search_any_nested(instr, updated_memb_vars, []);
}


[ValueStoreId] updated_value_stores(CompiledUpdate update) {
  return search_instrs(update.body, updated_value_stores);

  [ValueStoreId] updated_value_stores(Instr instr) =
    init_value_store()              |
    cleanup_value_store()           |
    immediate_insert_or_add_ref()   = undefined,
    lookup_or_queue_insert_value()  = [instr.store],
    _                               = search_any_nested(instr, updated_value_stores, []);
}


[TableVar] table_vars_with_insertions(CompiledUpdate update) {
  return search_instrs(update.body, table_vars);

  [TableVar] table_vars(Instr instr) =
    init_table()              |
    cleanup_table()           |
    immediate_insert_tuple()  = undefined,
    queue_insert_tuple()      = [instr.table_var],
    column_insert_deferred()  = [instr.table_var],
    _                         = search_any_nested(instr, table_vars, []);
}


[TableVar] table_vars_with_deletions(CompiledUpdate update) {
  return search_instrs(update.body, table_vars);

  [TableVar] table_vars(Instr instr) =
    init_table()              |
    cleanup_table()           |
    immediate_insert_tuple()  = undefined,
    queue_deletes()           = [instr.table_var],
    column_insert_deferred()  = [instr.table_var if instr.forced],
    _                         = search_any_nested(instr, table_vars, []);
}


## THE RETURNED TYPE IS ACTUALLY MORE SPECIFIC THAN THAT
[UpdateId] invoked_mutators(CompiledUpdate update) {
  return search_instrs(update.body, mutators);

  [UpdateId] mutators(Instr instr) =
    try_update()  = [instr.update_id],
    _             = search_any_nested(instr, mutators, []);
}


[LinkedDBVar] updated_dependees(CompiledUpdate update) {
  return search_instrs(update.body, dependees);

  [LinkedDBVar] dependees(Instr instr) =
    send_msg()  = [cast_linked_db_var(instr.db_var)],
    _           = search_any_nested(instr, dependees, []);
}

////////////////////////////////////////////////////////////////////////////////

implicit block : StaticBlock {
  [UpdateId, UpdateId] call_graph_transitive_closure {
    shallow_graph = [id -> invoked_mutators(u) : id u <- block.updates];
    deep_graph = transitive_closure(shallow_graph);
    return [s, t : s ts <- deep_graph, t <- ts];
  }


  [UpdateId, MembVar] updated_memb_vars {
    directly_touched = [id -> updated_memb_vars(u) : id u <- block.updates];
    deep_call_map = call_graph_transitive_closure;
    indirectly_touched = [s, v : s t <- deep_call_map, v <- directly_touched(t)];
    return [u, v : u vs <- directly_touched, v <- vs | v <- indirectly_touched(u, ?)];
  }


  [UpdateId, ValueStoreId] updated_value_stores {
    directly_touched = [id -> updated_value_stores(u) : id u <- block.updates];
    deep_call_map = call_graph_transitive_closure;
    indirectly_touched = [s, v : s t <- deep_call_map, v <- directly_touched(t)];
    return [u, s : u ss <- directly_touched, s <- ss | s <- indirectly_touched(u, ?)];
  }


  [UpdateId, TableVar] table_vars_with_insertions {
    directly_touched = [id -> table_vars_with_insertions(u) : id u <- block.updates];
    deep_call_map = call_graph_transitive_closure;
    indirectly_touched = [s, v : s t <- deep_call_map, v <- directly_touched(t)];
    return [u, v : u vs <- directly_touched, v <- vs | v <- indirectly_touched(u, ?)];
  }


  [UpdateId, TableVar] table_vars_with_deletions {
    directly_touched = [id -> table_vars_with_deletions(u) : id u <- block.updates];
    deep_call_map = call_graph_transitive_closure;
    indirectly_touched = [s, v : s t <- deep_call_map, v <- directly_touched(t)];
    return [u, v : u vs <- directly_touched, v <- vs | v <- indirectly_touched(u, ?)];
  }


  [UpdateId, LinkedDBVar] updated_dependees {
    directly_touched = [id -> updated_dependees(u) : id u <- block.updates];
    deep_call_map = call_graph_transitive_closure;
    indirectly_touched = [s, a : s t <- deep_call_map, a <- directly_touched(t)];
    return [u, a : u as <- directly_touched, a <- as | a <- indirectly_touched(u, ?)];
  }
}
