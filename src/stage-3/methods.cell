## BAD BAD BAD: THESE FUNCTIONS ARE NAMED THE WAY THEY ARE BECAUSE OF A TYPECHECKING BUG

Nat bare_id_2(SetItVar) =
  set_it_var(n?)  = n;

Nat bare_id_2(SeqItVar) =
  seq_it_var(n?)  = n;

Nat bare_id_2(BinRelItVar) =
  bin_rel_it_var(n?)  = n;

Nat bare_id_2(TernRelItVar) =
  tern_rel_it_var(n?) = n;

Nat bare_id_2(StreamVar) =
  svar(n?)        = n;

////////////////////////////////////////////////////////////////////////////////

NzNat in_arity(BoolProcDef p) = p.arity;
Nat   in_arity(ObjProcDef  p) = |p.args|;

Nat arity(CompiledMethod m) = |m.args_vars|;
Nat arity(OptCompMethod  m) = |m.args|;

////////////////////////////////////////////////////////////////////////////////

Atom get_inner_id(StdBlockNodeId) =
  std_block_node_id(a?) = a;

Nat get_inner_id(CondNodeId) =
  cond_node_id(n?)  = n;

Atom get_inner_id(NestedAutoNodeId) =
  nested_auto_node_id(a?) = a;

////////////////////////////////////////////////////////////////////////////////

NzNat arity(Table tbl)        = nz_nat(|tbl.col_types|);
NzNat arity(MasterBinTable)   = 2;
NzNat arity(SlaveTernTable)   = 3;
NzNat arity(MandatoryColumn)  = 2;
NzNat arity(Column)           = 2;
NzNat arity(SlaveColumn)      = 3;

////////////////////////////////////////////////////////////////////////////////

// TableVar unqualified(TableVar v) = v;
// TableVar unqualified(QualTableVar v) = v.table_var;

////////////////////////////////////////////////////////////////////////////////

PhysRelVar original_rel_var(TableVar var) =
  table_var(v?) = v;

////////////////////////////////////////////////////////////////////////////////

[[+Nat]] keys(<Table, MasterBinTable, SlaveTernTable> table)  = table.keys;
[[+Nat]] keys(<MandatoryColumn, Column> column)               = [[0]];
[[+Nat]] keys(SlaveColumn column)                             = [[0, 1]];

////////////////////////////////////////////////////////////////////////////////

True  is_atomic_expr(AtomicExpr) = true;
False is_atomic_expr(RefObjExpr) = false;

////////////////////////////////////////////////////////////////////////////////

MembVar corresponding_memb_var(PendingStateVar) =
  pending_state_var(s?) = memb_var(s);

////////////////////////////////////////////////////////////////////////////////

Bool has_opt_fields(OptRecRepr) =
  opt_rec_repr(fs?) = (_ f <- fs : f.optional);

////////////////////////////////////////////////////////////////////////////////

AnySurrTable cast_any_surr_table(AnyTable table) =
  table()             |
  master_bin_table()  |
  slave_tern_table()  = table,
  _                   = undefined;

MasterBinTable cast_master_bin_table(AnyTable table) =
  master_bin_table()  = table,
  _                   = undefined;

AnyColumn cast_any_column(AnyTable table) =
  column()            |
  mandatory_column()  |
  slave_column()      = table,
  _                   = undefined;

SlaveColumn cast_slave_column(AnyTable table) =
  slave_column()  = table,
  _               = undefined;

<Column, MandatoryColumn> cast_any_bin_col(AnyTable table) =
  column()            = table,
  mandatory_column()  = table,
  _                   = undefined;

MandatoryColumn cast_mandatory_column(AnyTable table) =
  mandatory_column()  = table,
  _                   = undefined;

////////////////////////////////////////////////////////////////////////////////

BoolExpr cast_bool_expr(BoolExpr e) = e;
BoolExpr cast_bool_expr(<IntExpr, Int32Expr, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

BoolVar cast_bool_var(AnyTypeExpr e) = if e :: BoolVar then e else undefined;

IntExpr cast_int_expr(IntExpr e) = e;
IntExpr cast_int_expr(<BoolExpr, Int32Var, Int32NatOp, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

FloatExpr cast_float_expr(FloatExpr e) = e;
FloatExpr cast_float_expr(<BoolExpr, IntExpr, Int32Expr, LowLevelTupleExpr, ObjExpr>) = undefined;

TupleArgExpr cast_tuple_arg_expr(<IntExpr, FloatExpr, ObjExpr> e) = e;
TupleArgExpr cast_tuple_arg_expr(<BoolExpr, Int32Var, Int32NatOp, LowLevelTupleExpr>) = undefined;

LowLevelTupleExpr cast_low_level_tuple_expr(LowLevelTupleExpr e) = e;
LowLevelTupleExpr cast_low_level_tuple_expr(<BoolExpr, IntExpr, Int32Expr, FloatExpr, ObjExpr>) = undefined;

ObjExpr cast_obj_expr(ObjExpr e) = e;
ObjExpr cast_obj_expr(<BoolExpr, IntExpr, Int32Expr, FloatExpr, LowLevelTupleExpr>) = undefined;

Int32Expr cast_int32_expr(<Int32Var, Int32NatOp> e) = e;
Int32Expr cast_int32_expr(Int n) = if n :: Int32 then n else undefined;
Int32Expr cast_int32_expr(<BoolExpr, IntConst, IntVar, IntNatOp, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

IntVar cast_int_var(IntVar v) = v;
IntVar cast_int_var(<BoolExpr, Int, IntConst, IntNatOp, Int32Expr, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

Int32Var cast_int32_var(Int32Var v) = v;
Int32Var cast_int32_var(<BoolExpr, IntExpr, Int32, Int32NatOp, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

<Int32Var, Int32NatOp> cast_int32_var_or_nat_op(<Int32Var, Int32NatOp> v) = v;
<Int32Var, Int32NatOp> cast_int32_var_or_nat_op(<BoolExpr, IntExpr, Int32, FloatExpr, LowLevelTupleExpr, ObjExpr>) = undefined;

<IntExpr, ObjExpr> cast_int_or_obj_expr(<IntExpr, ObjExpr> e) = e;
<IntExpr, ObjExpr> cast_int_or_obj_expr(<BoolExpr, Int32Var, Int32NatOp, FloatExpr, LowLevelTupleExpr>) = undefined;

<StdVar, LocVar> cast_loc_or_std_var(AnyTypeExpr expr) = if expr :: <StdVar, LocVar> then expr else undefined;

AnyNullableVar cast_nullable_var(ObjExpr expr) = if expr :: AnyNullableVar then expr else undefined;

<AnySignalVar, LocVar, PendingStateVar> cast_blankable_var(ObjExpr expr) =
  if expr :: <AnySignalVar, LocVar, PendingStateVar> then expr else undefined;

<PendingStateVar, PendingInputVar> cast_pending_var(ObjExpr expr) =
  if expr :: <PendingStateVar, PendingInputVar> then expr else undefined;

////////////////////////////////////////////////////////////////////////////////

True  is_value_store_id(ValueStoreId)                           = true;
False is_value_store_id(<NestedValueStoreId, CaptValueStoreId>) = false;

////////////////////////////////////////////////////////////////////////////////

True  is_mandatory_column(MandatoryColumn)                      = true;
False is_mandatory_column(<AnySurrTable, Column, SlaveColumn>)  = false;

True  is_slave_column(SlaveColumn)                              = true;
False is_slave_column(<AnySurrTable, Column, MandatoryColumn>)  = false;

////////////////////////////////////////////////////////////////////////////////

False is_symmetric(AnyColumn)           = false;
Bool  is_symmetric(AnySurrTable table)  = table.symmetric;

////////////////////////////////////////////////////////////////////////////////

AnyTableVar full_master_path(AnyTableVar var, TableVar master) =
  table_var()       = master,
  qual_table_var()  = qual_table_var(var.db_var, master),
  capt_table_var()  = master;

////////////////////////////////////////////////////////////////////////////////

True  is_mandatory(MandatoryColumn)       = true;
False is_mandatory(<Column, SlaveColumn>) = false;
