## BAD BAD BAD: THESE FUNCTIONS ARE NAMED THE WAY THEY ARE BECAUSE OF A TYPECHECKING BUG

Nat bare_id_2(SetItVar) =
  set_it_var(n?)  = n;

Nat bare_id_2(SeqItVar) =
  seq_it_var(n?)  = n;

Nat bare_id_2(BinRelItVar) =
  bin_rel_it_var(n?)  = n;

Nat bare_id_2(TernRelItVar) =
  tern_rel_it_var(n?) = n;

Nat bare_id_2(StreamVar) =
  svar(n?)        = n;

////////////////////////////////////////////////////////////////////////////////

Nat in_arity(ObjProcDef p) = |p.args|;

NzNat in_arity(BoolProcDef p) = p.arity;

////////////////////////////////////////////////////////////////////////////////

Atom get_inner_id(StdBlockNodeId) =
  std_block_node_id(a?) = a;

Nat get_inner_id(CondNodeId) =
  cond_node_id(n?)  = n;

Atom get_inner_id(NestedAutoNodeId) =
  nested_auto_node_id(a?) = a;

////////////////////////////////////////////////////////////////////////////////

NzNat arity(Table tbl)        = nz_nat(|tbl.col_types|);
NzNat arity(MasterBinTable)   = 2;
NzNat arity(SlaveTernTable)   = 3;
NzNat arity(MandatoryColumn)  = 2;
NzNat arity(Column)           = 2;
NzNat arity(SlaveColumn)      = 3;

////////////////////////////////////////////////////////////////////////////////

// TableVar unqualified(TableVar v) = v;
// TableVar unqualified(QualTableVar v) = v.table_var;

////////////////////////////////////////////////////////////////////////////////

PhysRelVar original_rel_var(TableVar var) =
  table_var(v?) = v;

////////////////////////////////////////////////////////////////////////////////

[[+Nat]] keys(<Table, MasterBinTable, SlaveTernTable> table) = table.keys;
[[+Nat]] keys(<MandatoryColumn, Column> column) = [[0]];
[[+Nat]] keys(SlaveColumn column) = [[0, 1]];

////////////////////////////////////////////////////////////////////////////////

True  is_atomic_expr(AtomicExpr) = true;
False is_atomic_expr(RefObjExpr) = false;

////////////////////////////////////////////////////////////////////////////////

MembVar corresponding_memb_var(PendingStateVar) =
  pending_state_var(s?) = memb_var(s);

////////////////////////////////////////////////////////////////////////////////

Bool has_opt_fields(OptRecRepr) =
  opt_rec_repr(fs?) = (_ f <- fs : f.optional);

////////////////////////////////////////////////////////////////////////////////

AnySurrTable cast_any_surr_table(AnyTable table) =
  table()             |
  master_bin_table()  |
  slave_tern_table()  = table,
  _                   = undefined;

MasterBinTable cast_master_bin_table(AnyTable table) =
  master_bin_table()  = table,
  _                   = undefined;

AnyColumn cast_any_column(AnyTable table) =
  column()            |
  mandatory_column()  |
  slave_column()      = table,
  _                   = undefined;

SlaveColumn cast_slave_column(AnyTable table) =
  slave_column()  = table,
  _               = undefined;

<Column, MandatoryColumn> cast_any_bin_col(AnyTable table) =
  column()            = table,
  mandatory_column()  = table,
  _                   = undefined;

MandatoryColumn cast_mandatory_column(AnyTable table) =
  mandatory_column()  = table,
  _                   = undefined;


////////////////////////////////////////////////////////////////////////////////

True  is_mandatory_column(MandatoryColumn)                      = true;
False is_mandatory_column(<AnySurrTable, Column, SlaveColumn>)  = false;

True  is_slave_column(SlaveColumn)                              = true;
False is_slave_column(<AnySurrTable, Column, MandatoryColumn>)  = false;

////////////////////////////////////////////////////////////////////////////////

False is_symmetric(AnyColumn)           = false;
Bool  is_symmetric(AnySurrTable table)  = table.symmetric;
