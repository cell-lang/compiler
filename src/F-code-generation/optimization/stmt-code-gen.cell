implicit program           : Program,
         options           : CompilationOptions,
         typedefs          : [TypeName -> NeType],
         context           : Context,
         var_subst_map     : [StdVar -> CaptVar],
         cls_var_subst_map : [ClsVar -> CaptClsVar],
         surrogates        : [EnvVar -> ObjExpr]
{
  (Instr*, ObjExpr, VarGen) do_expr_opt_eval_code(DoExpr expr, [EnvVar -> Type] init_env, VarGen init_var_gen) {
    type = expr_type(expr, init_env, typed_vars = []); ## NOT SURE ABOUT typed_vars HERE
    repr = if type != empty_type then low_level_repr(type) else :object;
    var, ret_var_gen = next_var(repr, init_var_gen);

    var_gen = ret_var_gen;
    code = ();
    env = init_env;
    surrs = surrogates;
    let typed_vars = expr.typed_vars, result_var = var:
      for s <- expr.body:
        stmt_code, surrs, var_gen = stmt_opt_code(s, env, var_gen, surrogates = surrs);
        code = code & stmt_code;
        env = update_env(s, env);
      ;
    ;

    return (code, obj_expr(var), ret_var_gen);
  }
}


implicit program           : Program,
         typedefs          : [TypeName -> NeType],
         options           : CompilationOptions,
         context           : Context,
         var_subst_map     : [StdVar -> CaptVar],
         cls_var_subst_map : [ClsVar -> CaptClsVar],
         typed_vars        : [StdVar -> NeType],
         surrogates        : [EnvVar -> ObjExpr],
         result_var        : AnyLocVar
{
  (Instr*, [EnvVar -> ObjExpr], VarGen) stmt_opt_code(Statement stmt, [EnvVar -> Type] env, VarGen var_gen) =
    break_stmt                = undefined,
    fail_stmt                 = undefined,
    loop_stmt(ss?)            = undefined,
    print_stmt(e?)            = undefined,
    return_stmt(e?)           = return_stmt_opt_code(e, env, var_gen),
    assert_stmt()             = undefined,
    let_stmt()                = undefined,
    assignment_stmt()         = assignment_stmt_opt_code(stmt.vars, stmt.value, env, var_gen),
    seq_update_stmt()         = undefined,
    if_stmt()                 = undefined,
    for_stmt()                = undefined,
    foreach_stmt()            = undefined,
    return_stmt               = undefined,
    proc_call_stmt()          = undefined;


  (Instr*, [EnvVar -> ObjExpr], VarGen) assignment_stmt_opt_code(StdVar+ vars, Expr value, [EnvVar -> Type] env, VarGen init_var_gen) {
    if |vars| == 1:
      type = expr_type(value, env);
      eval_code, surr, var_gen = opt_eval_code(value, env, init_var_gen);
      surrs = update(surrogates, only(vars), surr);
      return (eval_code, surrs, var_gen);

    else
      fail;
    ;
  }


  (Instr*, [EnvVar -> ObjExpr], VarGen) return_stmt_opt_code(Expr value, [EnvVar -> Type] env, VarGen init_var_gen) {
    code, surr, var_gen = opt_eval_code(value, env, init_var_gen);
    code = store_result(code, surr, result_var);
    return (code, surrogates, init_var_gen);
  }
}