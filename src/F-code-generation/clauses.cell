## FIND BETTER NAME
type FinalMatchAction = set_found_var_and_leave(var: EvalDestVar),
                        eval_and_store(streams: (Expr, StreamVar)+);

type MatchAction      = FinalMatchAction, match_action(clause: Clause, action: MatchAction);

////////////////////////////////////////////////////////////////////////////////

FinalMatchAction set_found_var_and_leave(EvalDestVar v) = set_found_var_and_leave(var: v);

FinalMatchAction eval_and_store((Expr, StreamVar)+ ss) = eval_and_store(streams: ss);

MatchAction match_action(Clause c, MatchAction a) = match_action(clause: c, action: a);

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, context : Context, var_subst_map : [StdVar -> CaptVar],
  cls_var_subst_map : [ClsVar -> CaptClsVar], next_var_gen : VarGen, options : CompilationOptions {

  Instr+ gen_code(MatchAction action, [StdVar] loc_bound_vars) =
    match_action()              = gen_clause_code(action.clause, loc_bound_vars, action.action),
    set_found_var_and_leave()   = (set_var(action.var, obj_true), exit_block),
    eval_and_store()            = gen_code_for_eval_and_store(action.streams);


  Instr+ gen_code_for_cond_match_action(Expr cond, FinalMatchAction action, [StdVar] loc_bound_vars) {
    cond_var, var_gen = next_obj_var(next_var_gen);
    cond_info = gen_eval_info(cond, cond_var, next_var_gen = var_gen);
    action_code = gen_code(action, loc_bound_vars);

    return (cond_info.eval_code | do_if(is_true(cond_info.expr), action_code));
  }


  Instr+ gen_code_for_eval_and_store((Expr, StreamVar)+ streams) {
    tmp_var, var_gen = next_obj_var(next_var_gen);
    code = ();
    for e, v <- streams:
      info = gen_eval_info(e, tmp_var, next_var_gen = var_gen);
      code = code & info.eval_code & (append(v, info.expr));
    ;
    return nonempty(code);
  }


  Instr+ gen_clause_code(Clause cls, [StdVar] loc_bound_vars, MatchAction action) =
    set_clause()      = gen_set_clause_code(cls.var, cls.src, loc_bound_vars, action),
    rel_clause()      = gen_rel_clause_code(cls.vars, cls.src, cls.args, loc_bound_vars, action),
    relvar_clause()   = gen_relvar_clause_code(cls.vars, cls.rel_var, cls.args, loc_bound_vars, action),
    seq_clause()      = gen_seq_clause_code(cls.vars, cls.idx_var, cls.src, loc_bound_vars, action),
    and_clause()      = gen_clause_code(cls.left, loc_bound_vars, match_action(cls.right, action)),
    or_clause()       = nonempty(gen_clause_code(cls.left, loc_bound_vars, action) & gen_clause_code(cls.right, loc_bound_vars, action)),
    match_clause()    = gen_match_clause_code(cls.ptrn, cls.expr, loc_bound_vars, action),
    asgnm_clause()    = gen_asgnm_clause_code(cls.var, cls.expr, loc_bound_vars, action),
    filter_clause(e?) = gen_filter_clause_code(e, loc_bound_vars, action);


  Instr+ gen_set_clause_code(StdVar var, Expr src, [StdVar] loc_bound_vars, MatchAction action) {
    src_var, var_gen = next_obj_var(next_var_gen);
    // Variables to avoid: src_var
    src_info = gen_eval_info(src, src_var, next_var_gen = var_gen);

    it_var, var_gen = next_set_it_var(var_gen);
    // Variables to avoid: src_var, it_var
    next_step_code = gen_code(action, loc_bound_vars & [var], next_var_gen = var_gen);

    body = (break_if(is_out_of_range(it_var)), set_var(var, get_curr_obj(it_var))) & next_step_code & (move_forward(it_var));
    loop_code = (get_iter(it_var, src_info.expr), repeat(nonempty(body)));

    return nonempty(src_info.eval_code & loop_code);
  }


  Instr+ gen_rel_clause_code(StdVar+ vars, Expr src, Maybe[Expr]+ args, [StdVar] loc_bound_vars, MatchAction action) {
    return match (args)
      (_, _)      = gen_bin_rel_clause_code(vars, src, args, loc_bound_vars, action),
      (_, _, _)   = gen_tern_rel_clause_code(vars, src, args, loc_bound_vars, action);


    Instr+ gen_bin_rel_clause_code(StdVar+ vars, Expr src, (Maybe[Expr], Maybe[Expr]) args, [StdVar] loc_bound_vars, MatchAction action) {
      src_var, var_gen = next_obj_var(next_var_gen);
      // Variables to avoid: src_var
      src_info = gen_eval_info(src, src_var, next_var_gen = var_gen);

      // The arguments are only used when obtaining an iterator
      // so it should be safe to reuse the corresponding variables downstream
      ## I'M NOT TOTALLY SURE THOUGH
      args_info = gen_eval_info(values(args), next_var_gen = var_gen);
      args_idxs = packed_seq_idxs((a != nothing : a <- args));
      low_level_args = (if a != nothing then just(args_info.exprs(args_idxs[i])) else nothing : a @ i <- args);

      it_var, var_gen = next_bin_rel_it_var(var_gen);
      // Variables to avoid: src_var, it_var
      next_step_code = gen_code(action, loc_bound_vars & set(vars), next_var_gen = var_gen);

      set_vars_code = (set_var(v, get_curr_arg(it_var, nat_01(i))) : v, i <- zip(vars, (j : a @ j <- args, a == nothing)));
      body_code =(break_if(is_out_of_range(it_var))) & set_vars_code & next_step_code & (move_forward(it_var));
      loop_code = (get_iter(it_var, src_info.expr, low_level_args), repeat(nonempty(body_code)));

      return nonempty(src_info.eval_code & args_info.eval_code & loop_code);
    }


    Instr+ gen_tern_rel_clause_code(StdVar+ vars, Expr src, (Maybe[Expr], Maybe[Expr], Maybe[Expr]) args, [StdVar] loc_bound_vars, MatchAction action) {
      src_var, var_gen = next_obj_var(next_var_gen);
      // Variables to avoid: src_var
      src_info = gen_eval_info(src, src_var, next_var_gen = var_gen);

      // The arguments are only used when obtaining an iterator
      // so it should be safe to reuse the corresponding variables downstream
      ## I'M NOT TOTALLY SURE THOUGH
      args_info = gen_eval_info(values(args), next_var_gen = var_gen);
      args_idxs = packed_seq_idxs((a != nothing : a <- args));
      low_level_args = (if a != nothing then just(args_info.exprs(args_idxs[i])) else nothing : a @ i <- args);

      it_var, var_gen = next_tern_rel_it_var(var_gen);
      // Variables to avoid: src_var, it_var
      next_step_code = gen_code(action, loc_bound_vars & set(vars), next_var_gen = var_gen);

      set_vars_code = (set_var(v, get_curr_arg(it_var, nat_02(i))) : v, i <- zip(vars, (j : a @ j <- args, a == nothing)));
      body_code = (break_if(is_out_of_range(it_var))) & set_vars_code & next_step_code & (move_forward(it_var));
      loop_code = (get_iter(it_var, src_info.expr, low_level_args), repeat(nonempty(body_code)));

      return nonempty(src_info.eval_code & args_info.eval_code & loop_code);
    }

    ## IMPROVE THE TYPECHECKER!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    <0..1> nat_01(Nat n) = if n :: <0..1> then n else undefined;
    <0..2> nat_02(Nat n) = if n :: <0..2> then n else undefined;
  }



  Instr+ gen_relvar_clause_code(StdVar+ vars, AnyRelVar rel_var, Maybe[Expr]+ relvar_args, [StdVar] loc_bound_vars, MatchAction action) {
    args_perm = relvar_cols_perm(rel_var);
    table_args = (relvar_args(i) : i <- args_perm);

    ## INVALID ARGS SHOULD BE NULL...
    arg_to_var_before_perm = (i-1 : i <- partial_sums((bit(a == nothing) : a <- relvar_args)));
    var_to_arg_after_perm = (i : a @ i <- table_args, a == nothing);
    vars_perm = (arg_to_var_before_perm(args_perm(var_to_arg_after_perm(i))) : unused_var @ i <- vars); ## UGLY UGLY UGLY
    perm_vars = (vars(vars_perm(i)) : unused_var @ i <- vars); ## UGLY UGLY UGLY

    assert {
      if all((a == nothing : a <- relvar_args)):
        return false if |vars| != |relvar_args|;
        return perm_vars == (vars(i) : i <- args_perm);
      else
        ## ADD SOME CHECK HERE TOO...
        return true;
      ;
    };

    filtered_idxs = idxs_into_filtered_seq((a != nothing : a <- table_args));
    unfiltered_idxs = (i : a @ i <- table_args, a != nothing);
    blank_idxs = (i : a @ i <- table_args, a == nothing);
    set_args = values(table_args);
    info = gen_eval_info(set_args);

    surr_vars, var_gen = next_int_vars(info.next_var_gen, |set_args|);
    it_var, var_gen = next_table_it_var(var_gen, |table_args|);

    surr_args = (apply(mi, surr_vars($)) : mi <- filtered_idxs);

    action_code = gen_code(action, loc_bound_vars & set(vars), next_var_gen = var_gen);

    if surr_args :: Just[IntVar]+:
      plain_surr_args = (value(a) : a <- surr_args);
      vars_setup_code = (lookup_surrogate(v, table_col_store_id(rel_var, i), plain_surr_args(i)) : v @ i <- perm_vars);
      code = (do_if(table_contains(rel_var, plain_surr_args), vars_setup_code & action_code));
    else
      lookup_exprs = (
        lookup_surrogate(table_col_store_id(rel_var, i), get_tuple_field(it_var, i))
        : i <- blank_idxs
      );
      vars_setup_code = (set_var(v, lookup_exprs(i)) : v @ i <- perm_vars);
      loop_code = (break_if(is_out_of_range(it_var))) & vars_setup_code & action_code & (move_forward(it_var));
      code = (
        get_table_iter(it_var, rel_var, nonempty(surr_args)),
        repeat(nonempty(loop_code))
      );
    ;

    for e @ i <- reverse(info.exprs):
      store_id = table_col_store_id(rel_var, rev_at(unfiltered_idxs, i));
      surr_var = rev_at(surr_vars, i);
      code = (
        set_ivar(surr_var, lookup_value(store_id, e)),
        do_if_not(is_eq(surr_var, -1), code)
      );
    ;

    return nonempty(info.eval_code & code);
  }


  Instr+ gen_seq_clause_code(Maybe[StdVar]+ vars, Maybe[StdVar] idx_var, Expr src, [StdVar] loc_bound_vars, MatchAction action) {
    src_var, var_gen = next_obj_var(next_var_gen);
    // Variables to avoid: src_var
    src_info = gen_eval_info(src, src_var, next_var_gen = var_gen);

    it_var, var_gen = next_seq_it_var(var_gen);
    int_idx_var, var_gen = next_int_var(var_gen); ## BAD: USED EVEN WHEN NOT REQUIRED
    // Variables to avoid: src_var, it_var, idx_var
    new_bound_vars = [value(v) : v <~ (vars | idx_var), v != nothing];
    next_step_code = gen_code(action, loc_bound_vars & new_bound_vars, next_var_gen = var_gen);

    if |vars| == 1:
      var = only(vars);
      vars_set_code = (set_var(value(var), get_curr_obj(it_var)) if var != nothing);
    else
      // tmp_var is only needed during a destructuring assignment, it can be safely reused elsewhere
      tmp_var, unused_var = next_obj_var(var_gen);
      vars_set_code = (set_var(tmp_var, get_curr_obj(it_var)));
      vars_set_code = vars_set_code & (set_var(value(v), at(tmp_var, i)) : v @ i <- vars, v != nothing);
    ;
    vars_set_code = vars_set_code & (set_var(value(idx_var), int_obj(int_idx_var))) if idx_var != nothing;

    next_iter_code = (move_forward(it_var), increment(int_idx_var) if idx_var != nothing);

    body = (break_if(is_out_of_range(it_var))) & vars_set_code & next_step_code & next_iter_code;
    loop_code = (
      get_iter(it_var, src_info.expr),
      set_ivar(int_idx_var, 0) if idx_var != nothing,
      repeat(nonempty(body))
    );

    return nonempty(src_info.eval_code & loop_code);
  }


  Instr+ gen_match_clause_code(Pattern ptrn, Expr expr, [StdVar] loc_bound_vars, MatchAction action) {
    src_var, var_gen = next_obj_var(next_var_gen);
    let next_var_gen = var_gen:
      src_info = gen_eval_info(expr, src_var);
      next_step_code = gen_code(action, loc_bound_vars & new_vars(ptrn));
      ## loc_bound_vars=loc_bound_vars DOES NOT MAKE ANY SENSE, IS THIS A BUG?
      let loc_bound_vars=loc_bound_vars, on_match_code=next_step_code, tag_vars=[]:
        match_code = gen_ptrn_matching_code(ptrn, src_info.expr, pseudotype_any);
      ;
    ;
    return nonempty(src_info.eval_code & match_code);
  }


  Instr+ gen_asgnm_clause_code(StdVar var, Expr expr, [StdVar] loc_bound_vars, MatchAction action) {
    exp_eval_code = gen_eval_code(expr, var);
    action_code = gen_code(action, loc_bound_vars);
    return nonempty(exp_eval_code & action_code);
  }


  Instr+ gen_filter_clause_code(Expr cond, [StdVar] loc_bound_vars, MatchAction action) {
    cond_var, var_gen = next_obj_var(next_var_gen);
    cond_info = gen_eval_info(cond, cond_var, next_var_gen = var_gen);
    action_code = gen_code(action, loc_bound_vars);

    return nonempty(cond_info.eval_code & (do_if(is_true(cond_info.expr), action_code)));
  }
}
