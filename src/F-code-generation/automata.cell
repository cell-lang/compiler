implicit program : Program, automaton : Automaton, options : CompilationOptions {
  ReactBlock gen_auto_code {
    nodes = gen_auto_nodes;

    memb_bool_vars = seq_union((memb_bool_vars(n) : n <- nodes)) & [(is_new, true)];
    memb_int_vars = auto_memb_int_vars;
    memb_obj_vars = seq_union((memb_obj_vars(n) : n <- nodes)) & [(id, :blank) : id <- keys(automaton.params)];

    const_data = [time_slots_len(bare_id(a), ls) : a, c <- automaton.time_rules, ls = trigger_times_table(c.time_expr), ls != ()];

    pre_init_code     = gen_pre_init_code(memb_bool_vars, memb_int_vars, memb_obj_vars);
    nodes_update_code = merge(([n.id -> gen_node_update_code(n)] : n <- nodes));
    apply_code        = gen_apply_code(nodes);
    methods           = compiled_methods(automaton.methods);

    // Generating cleanup code
    cleanup_code = join(((release(v), init_memb_var(v, :blank)) : v, unused_var <- rand_sort(memb_obj_vars))) &
                   rand_sort([auto_cleanup(id, auto.type) : id, auto <- automaton.nested_autos]) &
                   rand_sort([cleanup_db(var, db.type) : var, db <- automaton.nested_dbs]);

    // Generating methods for queuing updates
    queue_update_code = [n.id -> queue_update_method(n, nodes_indexes[n.id], item(levels_sizes, n.level)) : n <~ nodes];

    assert {
      inputs_count = |automaton.inputs|;
      for n @ i <- nodes:
        is_input = match (n)
          input()  = true,
          _        = false;
        if i < inputs_count:
          return false if n.level != 0 or not is_input;
        else
          return false if n.level == 0 or is_input;
        ;
      ;
      return true;
    };

    sorted_input_ids = (match (n.id) std_block_node_id(a?) = a : n <- subseq(nodes, 0, |automaton.inputs|)); ## BAD: RUNTIME TYPE CHECKING SHOULD NOT BE NEEDED HERE

    memb_vars = [left(v) : v <- memb_bool_vars] &
                [left(v) : v <- memb_int_vars] &
                [left(v) : v <- memb_obj_vars] &
                memb_int_vect_vars;

    return react_block(
      name:                 automaton.name,
      ord_inputs:           sorted_input_ids,
      ord_outputs:          sorted_outputs_ids,
      input_memb_preds:     [bare_id(i) -> memb_test_preds_map[d.type] : i, d <- automaton.inputs],
      inputs:               [bare_id(id) -> (type: input.type, discrete: input.discrete) : id, input <- automaton.inputs],
      outputs:              [bare_id(id) -> (type: output.type, discrete: output.discrete) : id, output <- automaton.outputs],
      memb_vars:            memb_vars,
      nested_auto_vars:     [id -> auto.type : id, auto <- automaton.nested_autos],
      nested_static_blocks: [id -> db.type : id, db <- automaton.nested_dbs],
      pre_init_code:        pre_init_code,
      cleanup_code:         cleanup_code,
      nodes_update_code:    nodes_update_code,
      apply_code:           apply_code,
      queue_update_code:    queue_update_code,
      state_is_def_code:    state_is_def_code,
      copy_state_code:      copy_state_code,
      set_state_code:       set_state_code,
      methods:              methods,
      const_data:           const_data,
      time_rules_count:     |time_varying_nodes_indexes|,
      state_memb_pred:      memb_test_preds_map[deep_state_type(automaton)]
    );
  }


  [(MembIntVar, Int)] auto_memb_int_vars {
    nodes = gen_auto_nodes;
    level_marked_nodes_counts = count_vector((n.level : n <- nodes, needs_initial_update(n)), |levels_sizes|);
    node_specific_vars = seq_union((memb_int_vars(n) : n <- nodes));
    level_specific_vars = [(update_count_var(l), level_marked_nodes_counts(l)) : s @ l <~ levels_sizes, s > 2];
    // Not adding the arrays used to store the trigger heaps
    // That is done in the target language code generation phase
    global_time_vars =
      if is_time_sensitive(automaton.name)
        then [(time_triggers_count_var, 0), (last_update_time, 0), (elapsed_time, 0)]
        else [];
    output_change_vars = [(changed_outputs_count, 0) if automaton.outputs != []];
    return node_specific_vars & level_specific_vars & global_time_vars & output_change_vars;
  }


  [MembIntVectVar] memb_int_vect_vars {
    vars = [nodes_to_update_vect_var(l, nz_nat(s)) : s @ l <~ levels_sizes, s > 2];
    outputs_count = |automaton.outputs|;
    vars = vars & [changed_outputs(outputs_count)] if outputs_count != 0;
    return vars;
  }

  //////////////////////////////////////////////////////////////////////////////

  ## COMPILATION OF METHODS FOR BOTH TYPES OF AUTOMATA IS ALMOST IDENTICAL, CAN WE SHARE SOME CODE HERE?
  [MethodId -> CompiledMethod] compiled_methods([Method] methods) {
    return merge([compiled(ms) : unused_var, ms <- group_by(methods, ($.name, |$.args|))]);


    [MethodId -> CompiledMethod] compiled([+Method] methods) {
      a_method = an_elem(methods);
      name = a_method.name;
      arity = |a_method.args|;
      return [method_id(name, arity) -> compiled(a_method)] if |methods| == 1;

      sorted_methods = rand_sort(methods);
      comp_methods = merge(([method_id(m.name, arity, i) -> compiled(m)] : m @ i <- sorted_methods));

      disp_method_args_types = (ne_union_superset([left(m.args(i)) : m <- methods]) : i < arity);
      disp_method_args_memb_preds = [(memb_test_preds_map[t] : t, unused_var <- m.args) : m <- methods];
      disp_method_ret_type = ne_union_superset([m.ret_type : m <- methods]);
      disp_method_code = gen_dispatch_auto_method_body(automaton.name, sorted_methods, program.typedefs);
      disp_method = compiled_method(disp_method_args_types, disp_method_args_memb_preds, disp_method_ret_type, disp_method_code);

      return comp_methods & [method_id(name, arity) -> disp_method];
    }


    CompiledMethod compiled(Method method) =
      compiled_method(
        (t : t, unused_var <- method.args),
        [(memb_test_preds_map[t] : t, unused_var <- method.args)],
        method.ret_type,
        gen_code(method)
      );


    Instr* gen_code(Method method) {
      res_var, var_gen = next_obj_var(blank_var_gen);
      args_code = (set_var(value(v), fn_arg(i)) : unused_var, v @ i <- method.args, v != nothing);
      let context = automaton, var_subst_map = [], cls_var_subst_map = [], next_var_gen = var_gen:
        body_code = gen_eval_code(method.expr, res_var);
      ;
      // entry_code = [push_call_info(fndef.name, fn_arg(i)) : p @ i <- fndef.params])];
      // exit_code = [pop_call_info];
      return (args_code & body_code | ret_val(res_var));
    }
  }


  Instr* gen_pre_init_code([(MembBoolVar, Bool)] memb_bool_vars, [(MembIntVar, Int)] memb_int_vars, [(<SignalVar, MembObjVar, PendingInputVar>, <blank, undefined>)] memb_obj_vars) {
    // Initializing all boolean member variables
    code_0 = (set_bvar(var, init_val) : var, init_val <- rand_sort(memb_bool_vars));

    // Initializing all integer member variables
    code_1 = (set_ivar(var, init_val) : var, init_val <- rand_sort(memb_int_vars));

    // Initializing all object member variables (save for new inputs) to blank
    code_2 = (init_memb_var(var, init_val) : var, init_val <- rand_sort(memb_obj_vars));

    // Creating the list of node that are initially marked for update
    marked_nodes = [id : id, n <- nodes_by_id, needs_initial_update(n)];
    assert marked_nodes == [id : v_iv <- memb_bool_vars, (up_to_date_var(id?), iv?) ?= v_iv, not iv];
    marked_nodes_by_level = (intersection(ns, marked_nodes) : ns @ l <- nodes_ids_by_level);

    // Initializing variables that contain the list of nodes that must be updated.
    code_3 = join((
      (set_ivar(nodes_to_update_var(l, i), nodes_indexes[n]) : n @ i <- rand_sort(marked_nodes_by_level(l)))
      : ns @ l <- nodes_ids_by_level, |ns| > 2
    ));

    // Now initializing all parameters.
    ## THESE VARIABLES HAVE ALREADY BEEN INITIALIZED TO BLANK, AND THAT'S REDUNDANT
    code_4 = gen_params_init_code;

    code_5 = rand_sort([auto_pre_init(id, auto.type) : id, auto <- automaton.nested_autos]);

    code_6 = rand_sort([init_db(v, (), db.type) : v, db <- automaton.nested_dbs]);

    return join((code_0, code_1, code_2, code_3, code_4, code_5, code_6));
  }


  Instr* gen_apply_code(AutoNode* nodes) {
    ord_signals_to_copy = rand_sort(signals_to_copy);

    node_idx_var = ivar(0);
    node_count_var = ivar(1);
    curr_time_var = ivar(2);
    a_free_int_var = ivar(3);

    levels_code = (gen_level_code(rand_sort(ids), i, item(levels_offsets, i), node_idx_var, node_count_var, curr_time_var) : ids @ i <- nodes_ids_by_level);

    first_pass_finish_code = (set_bvar(is_new, false));

    for id <- rand_sort(continuous_inputs_ids):
      instr = do_if(
        is_null(signal_var(id)),
        ## HERE I SHOULD DO AN init_memb_var() INSTEAD, I THINK
        (reset_memb_var(signal_var(id), :blank), clear_input(automaton.name, id))
      );
      first_pass_finish_code = (first_pass_finish_code | instr);
    ;

    if discrete_inputs_ids != []:
      if item(levels_sizes, 0) > 2:
        counter_var = ivar(0); ## ivar(0) IS ALREADY USED ELSEWHERE
        first_pass_finish_code = (first_pass_finish_code | set_ivar(counter_var, 0));
        for id <- rand_sort(discrete_inputs_ids):
          first_pass_finish_code = (first_pass_finish_code |
            do_if_not(
              up_to_date_var(std_block_node_id(id)),
              ( set_ivar(nodes_to_update_var(0, counter_var), nodes_indexes[std_block_node_id(id)]), // For input nodes, the global index and the level index coincide
                set_ivar(counter_var, add(counter_var, 1))
              )
            ));
        ;
        first_pass_finish_code = (first_pass_finish_code | set_ivar(update_count_var(0), counter_var));
      ;
    ;

    first_pass_finish_code = (first_pass_finish_code | auto_apply(automaton.name));

    apply_code = (reset_memb_var(signal_var(id), :blank) : id <- rand_sort(discrete_signals_ids)) &
                 (init_memb_var(prev_var_value(v), :blank) : v <- ord_signals_to_copy) &
                 (set_var(prev_var_value(v), v) : v <- ord_signals_to_copy) &
                 (set_ivar(changed_outputs_count, 0) if automaton.outputs != []) &
                 join(levels_code) &
                 (reset_memb_var(prev_var_value(v), :blank) : v <- ord_signals_to_copy) &
                 (do_if(is_new, first_pass_finish_code));

    apply_code = add_timer_code(apply_code, curr_time_var, a_free_int_var) if is_time_sensitive(automaton.name);
    return apply_code;


    Instr* add_timer_code(Instr* core_code, IntVar curr_time_var, IntVar a_free_int_var) {
      time_varying_nodes_by_idx = merge([[i -> a] : a, i <- time_varying_nodes_indexes]);
      assert time_varying_nodes_by_idx == reverse(time_varying_nodes_indexes);

      header_code = (
        set_ivar(curr_time_var, update_time),
        do_if(
          is_gt(time_triggers_count_var, 0),
          ( set_ivar(a_free_int_var, trigger_times_heap_var(0)),
            do_if(
              is_le(a_free_int_var, update_time),
              ( set_ivar(curr_time_var, a_free_int_var),
                repeat((
                  set_ivar(a_free_int_var, time_varying_cond_ids_heap_var(0)),
                  switch_on_nat(
                    a_free_int_var,
                    ( (queue_update(time_varying_nodes_by_idx[i]))
                      : i < nz_nat(|time_varying_nodes_by_idx|)
                    )
                  ),
                  clear_timer(automaton.name, a_free_int_var),
                  break_if(
                    or_else((
                      is_eq(time_triggers_count_var, 0),
                      neg(is_eq(trigger_times_heap_var(0), curr_time_var))
                    ))
                  )
                ))
              )
            )
          )
        )
      );

      set_upd_time_code = (set_ivar(update_time, add(last_update_time, elapsed_time)));
      adjust_time_vars_code = (
        set_ivar(last_update_time, curr_time_var),
        set_ivar(elapsed_time, sub(update_time, curr_time_var))
      );

      return set_upd_time_code & header_code & adjust_time_vars_code & core_code;
    }
  }


  Instr* gen_level_code(BlockNodeId* nodes_ids, Nat level_idx, Nat level_offset, IntVar node_idx_var, IntVar node_count_var, IntVar curr_time_var) {
    is_time_sensitive = is_time_sensitive(automaton.name);

    update_count_var = update_count_var(level_idx);
    node_count = |nodes_ids|;

    nodes_code = ( { code = (
          if is_time_sensitive
            then auto_update_node(automaton.name, id, curr_time_var)
            else auto_update_node(automaton.name, id),
          set_bvar(up_to_date_var(id), true)
        );
        is_discrete_input = match (id)
          std_block_node_id(a?) = level_idx == 0 and in(a, discrete_inputs_ids),
          _                     = false;
        code = (do_if(neg(is_new), code)) if is_discrete_input;
        return code;
      }
      : id <- nodes_ids
    );

    if node_count > 2:
      switch_expr = sub(nodes_to_update_var(level_idx, node_idx_var), level_offset);
      code = (
        set_ivar(node_idx_var, 0),
        set_ivar(node_count_var, update_count_var),
        repeat((
          break_if(is_eq(node_idx_var, node_count_var)),
          switch_on_nat(switch_expr, nonempty(nodes_code)),
          set_ivar(node_idx_var, add(node_idx_var, 1))
        )),
        set_ivar(update_count_var, 0)
      );

    else
      code = (do_if_not(up_to_date_var(nodes_ids(i)), nodes_code(i)) : i < node_count);
    ;

    code = (do_if(is_eq(curr_time_var, update_time), code)) if level_idx == 0 and is_time_sensitive and code != ();

    return code;
  }


  Instr* state_is_def_code {
    inputs = [v : v, i <- automaton.inputs, not i.discrete and not i.volatile];
    state_vars = [v : v, s <- automaton.state, not s.volatile];
    nested_autos = [v : v, a <- automaton.nested_autos, not a.volatile];

    input_conds = rand_sort([neg(or(is_null(v), is_blank(v))) : v <- inputs]);
    state_vars_conds = rand_sort([neg(or(is_null(v), is_blank(v))) : v <- state_vars]);
    let context = automaton:
      nested_autos_conds = rand_sort([state_is_def(v, var_type(v)) : v <- nested_autos]);
    ;

    conds = state_vars_conds & input_conds & nested_autos_conds;
    return (set_bvar(bvar(0), if conds != () then and_then(conds) else true), ret_val(bvar(0)));
  }


  Instr* copy_state_code {
    inputs = [v : v, i <- automaton.inputs, not i.discrete and not i.volatile];
    state_vars = [v : v, s <- automaton.state, not s.volatile];
    nested_autos = [v : v, a <- automaton.nested_autos, not a.volatile];
    nested_dbs = [v : v, a <- automaton.nested_dbs, not a.volatile];

    count = nat(|inputs| + |state_vars| + |nested_autos| + |nested_dbs|);
    return (ret_val(empty_rel)) if count == 0;

    res_var, var_gen = next_obj_var(blank_var_gen);
    keys_var, var_gen = next_vector_var(var_gen, count);
    values_var, var_gen = next_vector_var(var_gen, count);

    let context = automaton:
      code = join(({
        set_label_instr = set_var(evar(keys_var.id, i), object(bare_id(v)));
        value_var = evar(values_var.id, i);
        set_value_instr = match (v)
          signal_var()      = set_var(value_var, v),
          nested_db_var()   = copy_state(value_var, v, var_type(v)),
          nested_auto_var() = copy_persistent_state(value_var, v, var_type(v));
        return (set_label_instr, set_value_instr);

      } : v @ i <- rand_sort(inputs) & rand_sort(state_vars) & rand_sort(nested_autos) & rand_sort(nested_dbs)));
    ;

    return (code | mk_map(res_var, keys_var, values_var, count), ret_val(res_var));
  }


  Instr* set_state_code {
    inputs = [v : v, i <- automaton.inputs, not i.discrete and not i.volatile];
    state_vars = [v : v, s <- automaton.state, not s.volatile];
    nested_autos = [v : v, a <- automaton.nested_autos, not a.volatile];
    nested_dbs = [v : v, a <- automaton.nested_dbs, not a.volatile];

    count = nat(|inputs| + |state_vars| + |nested_autos| + |nested_dbs|);
    return () if count == 0;

    state_var = fn_arg(0);
    tmp_var = lvar(0);
    res_var = bvar(0);

    set_vars_code = join(((
      lookup_field(tmp_var, state_var, object(bare_id(v))),
      set_var(v, tmp_var),
      set_bvar(up_to_date_var(std_block_node_id(bare_id(v))), true)
      ) & flag_as_changed_if_output(bare_id(v))
    : v <- rand_sort(inputs) & rand_sort(state_vars)));

    set_nested_autos_code = join(((
      lookup_field(tmp_var, state_var, object(bare_id(v))),
      set_persistent_state(v, tmp_var, automaton.nested_autos[v].type)
    ) : v <- rand_sort(nested_autos)));

    set_nested_dbs_code = join(((
      lookup_field(tmp_var, state_var, object(bare_id(v))),
      set_state(res_var, v, tmp_var, automaton.nested_dbs[v].type),
      do_if_not(res_var, terminate)
    ) : v <- rand_sort(nested_dbs)));

    return set_vars_code & set_nested_autos_code & set_nested_dbs_code;
  }

  //////////////////////////////////////////////////////////////////////////////

  Instr* gen_params_init_code {
    param_ids = keys(automaton.params);
    dep_map = [a -> [cast_signal_var(v) : v <- extern_vars(p.value)] : a, p <- automaton.params];
    assert not (s, ts <- dep_map, t <- ts : not in(t, param_ids));
    sorted_params = topological_sort(dep_map);
    let next_var_gen = blank_var_gen:
      params_init_code = (
        (gen_safe_eval_code(automaton.params[p].value, p) : p <- rand_sort(ps))
        : ps <- sorted_params
      );
    ;
    return join((join(cfs) : cfs <- params_init_code));
  }
}

////////////////////////////////////////////////////////////////////////////////

Instr* gen_dispatch_auto_method_body(AutoSymbol auto_type, Method+ methods, [TypeName -> Type] typedefs) {
  assert |methods| > 1;                     // There must be more than one method
  assert |[m.name : m <~ methods]| == 1;    // All methods must have the same name
  assert |[|m.args| : m <~ methods]| == 1;  // All methods have the same arity
  assert |head(methods).args| > 0;          // No-argument methods cannot be polymorphic

  l0 = lvar(0);

  count = |methods|;

  a_method  = head(methods);
  name      = a_method.name;
  arity     = |a_method.args|;

  disp_args = choose_disp_args(((t : t, unused_var <- nonempty(m.args)) : m <- methods), typedefs);

  cases = join(({
    if i < count-1:
      ptrns = ();
      for j <- disp_args:
        pt = pseudotype(left(m.args(j)), typedefs);
        // return () if pt == :pseudotype([]); ## THIS SHOULD ACTUALLY WORK
        return () if not pt :: NePseudoType;
        ptrns = (ptrns | pseudotype_pattern(pt));
      ;
    else
      ptrns = (ptrn_any : unused_var <- disp_args);
    ;
    code = (
      invoke_auto_method(
        l0,
        auto_type,
        method_id(name, arity, i),
        (fn_arg(j) : j < arity)
      ),
      exit_block
    );
    return ((ptrns: nonempty(ptrns), code: code));
  } : m @ i <- methods));
  return (terminate) if cases == ();

  code = gen_switch_code((fn_arg(i) : i <- disp_args), cases, next_var_gen = blank_var_gen);
  return (code | ret_val(l0));
}
