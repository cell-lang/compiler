implicit program : Program, context : Context, var_subst_map : [StdVar -> CaptVar],
  cls_var_subst_map : [ClsVar -> CaptClsVar], next_var_gen : VarGen, options : CompilationOptions {

  () gen_code((), EvalDestVar) = ();  ## BAD BAD: SHOULD BE A SUBSIGNATURE

  Instr+ gen_code(Statement+ stmts, EvalDestVar res_var) {
    code = ();
    for s <- stmts:
      code = code & gen_code(s, res_var);
    ;
    return nonempty(code);
  }


  Instr+ gen_code(Statement stmt, EvalDestVar res_var) =
    break_stmt                = (break_loop),
    fail_stmt                 = (terminate),
    loop_stmt(ss?)            = (repeat(gen_code(ss, res_var))),
    print_stmt(e?)            = {info = gen_eval_info(e); return nonempty(info.eval_code & (print_obj(info.expr)));},
    return_stmt(e?)           = nonempty(gen_eval_code(e, res_var) & (exit_block)),
    assert_stmt()             = gen_code_for_assert_stmt(stmt.cond, stmt.env, stmt.file, stmt.line, stmt.text),
    let_stmt()                = gen_code_for_let_stmt(stmt.asgnms, stmt.body, res_var),
    assignment_stmt()         = gen_code_for_assignment_stmt(stmt.vars, stmt.value, res_var),
    seq_update_stmt()         = gen_code_for_seq_update_stmt(stmt.seq_var, stmt.idx, stmt.value, res_var),
    if_stmt()                 = gen_code_for_if_stmt(stmt.cond, stmt.body, stmt.else, res_var),
    for_stmt()                = gen_code_for_for_stmt(if stmt.var? then just(stmt.var) else nothing, stmt.start_val, stmt.end_val, stmt.end_val_incl, stmt.body, res_var),
    foreach_stmt()            = gen_code_for_foreach_stmt(stmt.vars, if stmt.idx_var? then just(stmt.idx_var) else nothing, stmt.values, stmt.body, res_var),
    return_stmt               = (exit_block),
    proc_call_stmt()          = gen_code_for_proc_call_stmt(if stmt.res_var? then just(stmt.res_var) else nothing, stmt.proc_name, stmt.args),

    send_msg_stmt()           = gen_code_for_send_msg_stmt(stmt.target, stmt.msg),
    try_update_stmt()         = gen_code_for_try_update_stmt(stmt.name, stmt.args),
    set_memb_var_stmt()       = gen_code_for_set_memb_var_stmt(stmt.var, stmt.value),
    delete_stmt()             = gen_code_for_delete_stmt(stmt.var, stmt.fields),
    insert_stmt()             = gen_code_for_insert_stmt(stmt.var, stmt.fields, stmt.force),

    set_input_ctrl_stmt()     = gen_code_for_set_input_ctrl_stmt(stmt.var, stmt.input, stmt.value),
    clear_input_ctrl_stmt()   = gen_code_for_clear_input_ctrl_stmt(stmt.var, stmt.input),
    set_elapsed_time_ctrl_stmt()  = gen_code_for_set_elapsed_time_ctrl_stmt(stmt.var, stmt.time),
    apply_ctrl_stmt()         = gen_code_for_apply_ctrl_stmt(stmt.auto_var, stmt.res_var),
    send_msg_ctrl_stmt()      = gen_code_for_send_msg_ctrl_stmt(stmt.res_var, stmt.db_var, stmt.msg),
    read_state_ctrl_stmt()    = gen_code_for_read_state_ctrl_stmt(stmt.res_var, stmt.auto_var),
    restore_state_ctrl_stmt() = gen_code_for_restore_state_ctrl_stmt(stmt.res_var, stmt.auto_var, stmt.state);


  Instr+ gen_code_for_send_msg_stmt(NestedDBVar target, Expr msg) {
    eval_info = gen_eval_info(msg);
    spent_var = nested_db_spent(target);
    return (
      eval_info.eval_code |
      do_if(spent_var, terminate),
      send_msg(target, var_type(target), eval_info.expr, false),
      set_bvar(spent_var, true)
    );
  }


  Instr+ gen_code_for_try_update_stmt(UpdateSymbol name, Expr* args) {
    eval_info = gen_eval_info(args);
    call_instr = try_update(this_db_symbol, update_id(name, |args|), eval_info.exprs);
    return (eval_info.eval_code | call_instr);
  }


  Instr+ gen_code_for_set_memb_var_stmt(MembVar var, Expr value) {
    eval_info = gen_eval_info(value);
    pvar = pending_state_var(bare_id(var));
    return (
      eval_info.eval_code |
      do_if_not(is_blank(pvar), terminate),
      set_var(pvar, eval_info.expr)
    );
  }


  Instr+ gen_code_for_delete_stmt(RelVar rel_var, Maybe[Expr]+ relvar_args) {
    args_perm = relvar_cols_perm(rel_var);
    table_args = (relvar_args(i) : i <- args_perm);

    filtered_idxs = idxs_into_filtered_seq((a != nothing : a <- table_args));
    unfiltered_idxs = (i : a @ i <- table_args, a != nothing);
    set_args = (value(a) : a <- table_args, a != nothing);
    info = gen_eval_info(set_args);

    surr_vars, var_gen = next_int_vars(info.next_var_gen, |set_args|);
    surr_args = (apply(mi, surr_vars($)) : mi <- filtered_idxs);

    code = (queue_deletes(rel_var, nonempty(surr_args)));

    for e @ i <- reverse(info.exprs):
      store_id = table_col_store_id(rel_var, rev_at(unfiltered_idxs, i));
      surr_var = rev_at(surr_vars, i);
      code = (
        set_ivar(surr_var, lookup_value(store_id, e)),
        do_if_not(is_eq(surr_var, -1), code)
      );
    ;

    return nonempty(info.eval_code & code);
  }


  Instr+ gen_code_for_insert_stmt(RelVar rel_var, Expr+ relvar_args, Bool force) {
    args_perm = relvar_cols_perm(rel_var);
    table_args = (relvar_args(i) : i <- args_perm);

    info = gen_eval_info(table_args);

    arity = |table_args|;
    surr_vars, var_gen = next_int_vars(info.next_var_gen, arity);
    is_new_val_vars, var_gen = next_bool_vars(var_gen, arity);

    keys = table_keys(rel_var);
    col_is_tracked = if force then union(keys) else [];

    value_prep_code = join(({
        store_id = table_col_store_id(rel_var, i);
        surr_var = surr_vars(i);
        is_new_val_var = is_new_val_vars(i);
        return (
          set_ivar(surr_var, lookup_value_ex(store_id, e)),
          set_bvar(is_new_val_var, is_eq(surr_var, -1)) if col_is_tracked(i),
          do_if(if col_is_tracked(i) then is_new_val_var else is_eq(surr_var, -1), queue_insert(surr_var, store_id, e))
        );
      } : e @ i <- info.exprs
    ));

    if force:
      deletion_code = ({
          value_cond = and([neg(is_new_val_vars(i)) : i <- as]);
          surr_args = (if as(i) then just(surr_vars(i)) else nothing : i < arity);
          return do_if(value_cond, queue_deletes(rel_var, surr_args));
        } : as <- rand_sort(keys)
      );
    else
      deletion_code = ();
    ;

    insertion_code = (queue_insert(rel_var, nonempty(surr_vars)));

    return nonempty(info.eval_code & value_prep_code & deletion_code & insertion_code);
  }


  Instr+ gen_code_for_set_input_ctrl_stmt(LocAutoVar var, Atom input, Expr value) {
    auto_type = var_type(var);
    val_info = gen_eval_info(value);
    return nonempty(val_info.eval_code & (set_input(var, auto_type, input, val_info.expr)));
  }


  Instr+ gen_code_for_clear_input_ctrl_stmt(LocAutoVar var, Atom input) {
    auto_type = var_type(var);
    return (clear_input(var, auto_type, input));
  }


  Instr+ gen_code_for_set_elapsed_time_ctrl_stmt(LocAutoVar var, Expr time) {
    time_eval_info = gen_eval_info(time);
    set_time_instr = set_ivar(elapsed_time(var), get_int_val(time_eval_info.expr));
    return (time_eval_info.eval_code | set_time_instr);
  }


  Instr+ gen_code_for_apply_ctrl_stmt(LocAutoVar var, StdVar res_var) {
    auto_type = var_type(var);
    res_value = if is_time_sensitive(auto_type) then is_eq(elapsed_time(var), 0) else true;
    return (
      auto_apply(var, auto_type),
      set_var(res_var, bool_obj(res_value))
    );
  }


  Instr+ gen_code_for_send_msg_ctrl_stmt(StdVar res_var, LocDBVar db_var, Expr msg) {
    eval_info = gen_eval_info(msg);
    type = var_type(db_var);
    tmp_bool_var, unused_var = next_bool_var(next_var_gen);
    send_msg_instr = send_msg(db_var, type, eval_info.expr, true, tmp_bool_var);
    return (eval_info.eval_code | send_msg_instr, set_var(res_var, bool_obj(tmp_bool_var)));
  }


  Instr+ gen_code_for_read_state_ctrl_stmt(StdVar res_var, LocDBVar db_var) =
    (copy_state(res_var, db_var, var_type(db_var)));


  Instr+ gen_code_for_read_state_ctrl_stmt(StdVar res_var, LocAutoVar auto_var) {
    tmp_var, unused_var = next_obj_var(next_var_gen);
    return (
      branch(
        state_is_def(auto_var, var_type(auto_var)),
        ( copy_persistent_state(tmp_var, auto_var, var_type(auto_var)),
          mk_tagged_obj(res_var, object(:maybe), tmp_var)
        ),
        (set_var(res_var, object(:nothing)))
      )
    );
  }


  Instr+ gen_code_for_restore_state_ctrl_stmt(StdVar res_var, LocDBVar db_var, Expr state) {
    eval_info = gen_eval_info(state);
    tmp_bool_var, unused_var = next_bool_var(next_var_gen); ## SHOULD I USE eval_info.next_var_gen HERE?
    set_state_instr = set_state(tmp_bool_var, db_var, eval_info.expr, var_type(db_var));
    return (eval_info.eval_code | set_state_instr, set_var(res_var, bool_obj(tmp_bool_var)));
  }


  Instr+ gen_code_for_restore_state_ctrl_stmt(StdVar res_var, LocAutoVar auto_var, Expr state) {
    eval_info = gen_eval_info(state);
    check_instr = do_if_not(qual_bool_var(auto_var, is_new), terminate);
    set_state_instr = set_persistent_state(auto_var, eval_info.expr, var_type(auto_var));
    return ((check_instr) & eval_info.eval_code | set_state_instr);
  }


  Instr+ gen_code_for_assert_stmt(Expr cond, [<StdVar, ImplArg>] env, String file, NzNat line, Maybe[String] text) {
    return (no_op) if options.ignore_assertions; ## WHY RETURNING (no_op) INSTEAD OF JUST []?
    info = gen_eval_info(cond);
    expr_vars = extern_vars(cond);
    vars = rand_sort([v : v <- env, in(v, expr_vars)]) & rand_sort([v : v <- env, not in(v, expr_vars)]);
    return (info.eval_code | runtime_check(info.expr, file, line, text, vars));
  }


  Instr+ gen_code_for_let_stmt([ImplArg -> Expr] asgnms, Statement+ body, EvalDestVar res_var) {
    ## THIS SHOULD BE CHECKED IN THE PROPER PLACE, BOTH IN LAYER 1 AND 2
    ## IT'S A TEMPORARY LIMITATION THAT SHOULD BE REMOVED
    assert subset(outcomes(body), [:fails, :falls_through]);

    if asgnms != []:
      ## BUG BUG BUG. THE ASSIGNMENTS ARE DONE IN RANDOM ORDER. FIX THIS
      var = an_elem(nonempty(keys(asgnms)));
      expr = asgnms[var];
      rem_asgnms = [v -> e : v, e <- asgnms, v != var];

      backup_var, var_gen = next_obj_var(next_var_gen);

      info = gen_eval_info(expr, next_var_gen = var_gen);
      inner_body = gen_code_for_let_stmt(rem_asgnms, body, res_var, next_var_gen = info.next_var_gen);

      set_up_code = (set_var(backup_var, var), set_var(var, info.expr));
      tear_down_code = (set_var(var, backup_var));

      return nonempty(info.eval_code & set_up_code & inner_body & tear_down_code);
    ;

    return gen_code(body, res_var);
  }


  Instr+ gen_code_for_assignment_stmt(StdVar+ vars, Expr value, EvalDestVar res_var) {
    if |vars| == 1:
      var = vars(0);
      if in(var, extern_vars(value)):
        tmp_var, var_gen = next_obj_var(next_var_gen);
        code = (gen_eval_code(value, tmp_var, next_var_gen = var_gen) | set_var(var, tmp_var));
      else
        code = gen_eval_code(value, var);
      ;
    else
      tmp_var, var_gen = next_obj_var(next_var_gen);
      code = gen_eval_code(value, tmp_var, next_var_gen = var_gen);
      code = code & join(((set_var(v, at(tmp_var, i))) : v @ i <- vars));
    ;
    return nonempty(code);
  }


  Instr+ gen_code_for_seq_update_stmt(StdVar seq_var, Expr idx, Expr value, EvalDestVar res_var) {
    idx_var, var_gen = next_obj_var(next_var_gen);
    idx_info = gen_eval_info(idx, idx_var, next_var_gen = var_gen);

    value_var, var_gen = next_obj_var(var_gen);
    val_info = gen_eval_info(value, value_var, next_var_gen = var_gen);

    tmp_var, var_gen = next_obj_var(var_gen);

    return (
      idx_info.eval_code & val_info.eval_code |
      update_seq_at(tmp_var, seq_var, idx_info.expr, val_info.expr),
      set_var(seq_var, tmp_var)
    );
  }


  Instr+ gen_code_for_if_stmt(Expr cond, Statement+ body, Statement* else, EvalDestVar res_var) {
    cond_info = gen_eval_info(cond);
    // The variable used to store the value of the condition is not
    // needed anymore here, so there's no need to update next_var_gen
    if_code   = gen_code(body, res_var);
    else_code = gen_code(else, res_var);
    branch_code = (branch(is_true(cond_info.expr), if_code, else_code));
    return nonempty(cond_info.eval_code & branch_code);
  }


  Instr+ gen_code_for_for_stmt(Maybe[StdVar] maybe_var, Expr start_val, Expr end_val, Bool end_val_incl, Statement+ body, EvalDestVar res_var) {
    tmp_var, var_gen = next_obj_var(next_var_gen);
    start_eval_code = gen_eval_code(start_val, tmp_var, next_var_gen = var_gen);
    end_eval_code = gen_eval_code(end_val, tmp_var, next_var_gen = var_gen);

    end_var, var_gen = next_int_var(var_gen);
    idx_var, var_gen = next_int_var(var_gen);
    body_code = gen_code(body, res_var, next_var_gen = var_gen);

    loop_code = (
      repeat(
        nonempty(
          ( break_if(if end_val_incl then is_gt(idx_var, end_var) else is_ge(idx_var, end_var)),
            set_var(value(maybe_var), int_obj(idx_var)) if maybe_var != nothing
          ) & body_code &
          (increment(idx_var))
        )
      )
    );

    return nonempty(
      start_eval_code & (set_ivar(idx_var, get_int_val(tmp_var))) &
      end_eval_code   & (set_ivar(end_var, get_int_val(tmp_var))) &
      loop_code
    );
  }


  Instr+ gen_code_for_foreach_stmt(StdVar+ vars, Maybe[StdVar] maybe_idx_var, Expr values, Statement+ body, EvalDestVar res_var) {
    src_var, var_gen = next_obj_var(next_var_gen);
    src_eval_code = gen_eval_code(values, src_var, next_var_gen = var_gen);

    it_var, var_gen = next_seq_it_var(var_gen);

    if |vars| == 1:
      var_set_code = (set_var(vars(0), get_curr_obj(it_var)));
    else
      // tmp_var is used only for destructuring and remains free for the body to use
      tmp_var, unused_var = next_obj_var(var_gen);
      var_set_code = (set_var(tmp_var, get_curr_obj(it_var)));
      var_set_code = var_set_code & (set_var(v, at(tmp_var, i)) : v @ i <- vars);
    ;

    if maybe_idx_var != nothing:
      idx_var, var_gen = next_int_var(var_gen);
      var_set_code = (var_set_code | set_var(value(maybe_idx_var), int_obj(idx_var)));
      idx_var_init_instr = set_ivar(idx_var, 0);
      idx_var_incr_instr = increment(idx_var);
    else
      idx_var_init_instr = no_op;
      idx_var_incr_instr = no_op;
    ;

    body_code = gen_code(body, res_var, next_var_gen = var_gen);

    loop_code = (
      get_iter(it_var, src_var),
      idx_var_init_instr,
      repeat(
        nonempty(
          (break_if(is_out_of_range(it_var))) &
          var_set_code &
          body_code &
          (move_forward(it_var), idx_var_incr_instr)
        )
      )
    );

    return nonempty(src_eval_code & loop_code);
  }


  Instr+ gen_code_for_proc_call_stmt(Maybe[StdVar] maybe_res_var, ProcSymbol proc_name, Expr* params) {
    pars_info = gen_eval_info(params);
    call_code = (call_proc(var: value(maybe_res_var) if maybe_res_var != nothing, name: proc_name, args: pars_info.exprs));
    return nonempty(pars_info.eval_code & call_code);
  }
}
