implicit program : Program, typedefs : [TypeName -> NeType], database : Database, options : CompOptions {
  StaticBlock compiled_database {
    value_stores, tables = value_stores_and_tables;

    methods = compiled_database_methods(database.methods);
    updates = compiled_database_updates(database.updates);
    handlers = compiled_database_handlers(database.handlers);

    msg_types = [h.type : h <- database.handlers];
    msg_memb_pred = if msg_types != [] then just(memb_test_preds_map[ne_union_type(msg_types)]) else nothing;

    return static_block(
      name:             database.name,
      links:            database.links,
      state_vars:       [v -> info.type : v, info <- database.state_vars],
      value_stores:     value_stores,
      tables:           tables,
      nested_blocks:    database.nested_dbs,
      init_code:        database_init_code,
      cleanup_code:     database_cleanup_code,
      copy_state_code:  database_copy_state_code,
      set_state_code:   database_set_state_code,
      methods:          methods,
      updates:          handlers & updates,
      msg_memb_pred:    msg_memb_pred,
      state_memb_pred:  memb_test_preds_map[type_ref(schema_type_symbol(untag(database.name)))]
    );
  }


  Instr* database_init_code {
    state_vars = database.state_vars;
    nested_dbs = database.nested_dbs;

    vars_pre_init_code = rand_sort([init_memb_var(v, :blank) : v, unused_var <- state_vars]);
    let context = database, var_subst_map = [], cls_var_subst_map = [], typed_vars = [], surrogates = []:
      vars_init_code = join(({
          eval_code, surr, unused_var = opt_eval_code(d.init_value, [], blank_var_gen);
          return (eval_code | set_var(v, surr));
        } : v, d <- isort(state_vars)
      ));
    ;
    nested_dbs_init_code = rand_sort([init_db(v, (), t) : v, t <- nested_dbs]);

    value_stores, tables = value_stores_and_tables;

    value_stores_init_code = (init_value_store(vs) : vs <- rand_sort(value_stores));
    tables_init_code = rand_sort([init_table(v, t) : v, t <- tables]);

    return vars_pre_init_code & vars_init_code & nested_dbs_init_code & value_stores_init_code & tables_init_code;
  }


  Instr* database_cleanup_code {
    state_vars = database.state_vars;
    nested_dbs = database.nested_dbs;

    vars_cleanup_code = rand_sort([reset_memb_var(v, :blank) : v, unused_var <- state_vars]);
    nested_dbs_cleanup_code = rand_sort([cleanup_db(v, t) : v, t <- nested_dbs]);

    value_stores, tables = value_stores_and_tables;

    value_stores_cleanup_code = (cleanup_value_store(vs) : vs <- rand_sort(value_stores));
    tables_cleanup_code = rand_sort([cleanup_table(v, t) : v, t <- tables]);

    return vars_cleanup_code & nested_dbs_cleanup_code & value_stores_cleanup_code & tables_cleanup_code;
  }


  Instr* database_copy_state_code {
    count = nat(|database.state_vars| + |database.rel_vars| + |database.nested_dbs|);
    return (ret_val(empty_rel)) if count == 0;

    res_var, var_gen = next_obj_var(blank_var_gen);
    keys_var, var_gen = next_vector_var(var_gen, count);
    values_var, var_gen = next_vector_var(var_gen, count);

    state_vars = rand_sort(keys(database.state_vars));
    rel_vars = rand_sort(keys(database.rel_vars));
    nested_dbs = rand_sort(keys(database.nested_dbs));
    all_vars = state_vars & rel_vars & nested_dbs;

    unused_var, tables = value_stores_and_tables;

    let context = database:
      code = join(({
          set_label_instr = set_var(evar(keys_var.id, i), object(bare_id(v)));
          value_var = evar(values_var.id, i);
          set_value_instr = match (v)
            memb_var()      = set_var(value_var, v),
            rel_var()       = copy_table(value_var, v, tables[v], relvar_cols_perm(v)),
            nested_db_var() = copy_state(value_var, v, var_type(v));
          return (set_label_instr, set_value_instr);
        } : v @ i <- all_vars
      ));
    ;

    return (code | mk_map(res_var, keys_var, values_var, count), ret_val(res_var));
  }


  Instr* database_set_state_code {
    count = nat(|database.state_vars| + |database.rel_vars| + |database.nested_dbs|);
    return () if count == 0;

    state_var = fn_arg(0);
    tmp_var = lvar(0);

    unused_var, tables = value_stores_and_tables;

    code = ();

    state_vars = rand_sort(keys(database.state_vars));
    for v <- state_vars:
      code = (code |
        ## REFERENCE COUNTING BUG HERE...
        // lookup_field(pending_state_var(bare_id(v)), state_var, object(bare_id(v)))
        lookup_field(tmp_var, state_var, object(bare_id(v))),
        set_var(pending_state_var(bare_id(v)), tmp_var)
      );
    ;

    rel_vars = rand_sort(keys(database.rel_vars));
    let context = database:
      for v <- rel_vars:
        arity = nz_nat(|an_elem(database.rel_vars[v].signatures)|);
        code = (code |
          queue_deletes(v, (nothing : i < arity)),
          lookup_field(tmp_var, state_var, object(bare_id(v))),
          set_table(v, tables[v], tmp_var, relvar_cols_perm(v))
        );
      ;
    ;

    nested_dbs = rand_sort(keys(database.nested_dbs));
    for db <- nested_dbs:
      db_type = database.nested_dbs[db];
      code = (code |
        lookup_field(tmp_var, state_var, object(bare_id(db))),
        set_state(db, tmp_var, db_type)
      );
    ;

    return code;
  }


  ## COMPILATION OF METHODS FOR BOTH TYPES OF AUTOMATA IS ALMOST IDENTICAL, CAN WE SHARE SOME CODE HERE?
  [MethodId -> CompiledMethod] compiled_database_methods([Method] methods) {
    return merge([compiled(ms) : unused_var, ms <- group_by(methods, ($.name, |$.args|))]);


    [MethodId -> CompiledMethod] compiled([+Method] methods) {
      a_method = an_elem(methods);
      name = a_method.name;
      arity = |a_method.args|;
      return [method_id(name, arity) -> compiled(a_method)] if |methods| == 1;

      sorted_methods = rand_sort(methods);
      comp_methods = merge(([method_id(m.name, arity, i) -> compiled(m)] : m @ i <- sorted_methods));

      disp_method = compiled_method(
        (nothing : i < arity),
        (ne_union_superset([left(m.args(i)) : m <- methods]) : i < arity),
        [(memb_test_preds_map[t] : t, unused_var <- m.args) : m <- methods],
        ne_union_superset([m.ret_type : m <- methods]),
        method_dispatch_code(database.name, sorted_methods)
      );

      return comp_methods & [method_id(name, arity) -> disp_method];
    }


    CompiledMethod compiled(Method method) =
      compiled_method(
        (v : unused_var, v <- method.args),
        (t : t, unused_var <- method.args),
        [(memb_test_preds_map[t] : t, unused_var <- method.args)],
        method.ret_type,
        method_body(method)
      );


    Instr* method_body(Method method) {
      env = [if a != nothing then value(a) else fn_arg(i) -> t : t, a @ i <~ method.args];
      let context = database, var_subst_map = [], cls_var_subst_map = [], typed_vars = [], surrogates = []:
        eval_code, surr, unused_var = opt_eval_code(method.expr, env, blank_var_gen);
      ;
      return (eval_code | ret_val(surr));
    }
  }


  [UpdateId -> CompiledUpdate] compiled_database_updates([Update] updates) {
    return merge([compiled_updates(ms) : unused_var, ms <- group_by(updates, ($.name, |$.args|))]);


    [UpdateId -> CompiledUpdate] compiled_updates([+Update] updates) {
      an_update = an_elem(updates);
      name = an_update.name;
      arity = |an_update.args|;
      return [update_id(name, arity) -> compiled_update(an_update)] if |updates| == 1;
      sorted_updates = rand_sort(updates);
      comp_updates = merge(([update_id(m.name, arity, i) -> compiled_update(m)] : m @ i <- sorted_updates));
      dispatcher_code = update_dispatch_code(database.name, sorted_updates);
      dispatcher = compiled_update((fn_arg(i) : i < arity), dispatcher_code);
      return comp_updates & [update_id(name, arity) -> dispatcher];
    }


    CompiledUpdate compiled_update(Update update) =
      compiled_update((v : unused_var, v <- update.args), update_body(update));


    Instr* update_body(Update update) {
      // Compiling the body of the update
      return () if update.body == ();

      code, unused_var_1, unused_var_2, unused_var_3 = stmts_opt_code(
        update.body,
        [v -> t : t, v <~ update.args],
        blank_var_gen,
        context           = database,
        var_subst_map     = [],
        cls_var_subst_map = [],
        typed_vars        = [],
        surrogates        = [],
        exp_break_surrs   = nothing,
        result_var        = :invalid_var
      );

      return (execute_block(nonempty(code)));
    }
  }


  [UpdateId -> CompiledUpdate] compiled_database_handlers([Handler] handlers) {
    return [] if handlers == [];
    return [main_handler -> compiled_handler(only(handlers))] if |handlers| == 1;
    sorted_handlers = rand_sort(handlers);
    comp_handlers = merge(([handler_id(i) -> compiled_handler(h)] : h @ i <- sorted_handlers));
    dispatcher_body = update_dispatch_code(database.name, sorted_handlers);
    dispatcher = compiled_update((fn_arg(0)), dispatcher_body);
    return comp_handlers & [main_handler -> dispatcher];


    CompiledUpdate compiled_handler(Handler handler) = compiled_update((var(:self)), handler_body(handler));

    Instr* handler_body(Handler handler) {
      // Compiling the body of the handler
      return () if handler.body == ();

      code, unused_var_1, unused_var_2, unused_var_3 = stmts_opt_code(
        handler.body,
        [var(:self) -> handler.type],
        blank_var_gen,
        context           = database,
        var_subst_map     = [],
        cls_var_subst_map = [],
        typed_vars        = [],
        surrogates        = [],
        exp_break_surrs   = nothing,
        result_var        = :invalid_var
      );

      return (execute_block(nonempty(code)));
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, database : Database { ## program IS NOT REALLY NEEDED, BUT THE TYPECHECKER...
  ([ValueStoreId], [RelVar -> Table]) value_stores_and_tables {
    sorted_cols = rand_sort([(v, i) : v, info <- database.rel_vars, i <- range(arity(info.signatures))]);
    col_to_id_map = merge(([c -> i] : c @ i <- sorted_cols));

    value_stores = [value_store_id(i) : _ @ i <~ sorted_cols];

    let context = database:
      tables = [
        v -> table(
          (value_store_id(col_to_id_map[(v, i)]) : i < arity(info.signatures)),
          table_keys(v),
          col_types(info.signatures, info.keys),
          relvar_cols_perm(v)
        )
        : v, info <- database.rel_vars
      ];
    ;

    return (value_stores, tables);


    NzNat arity([+NeType+] signatures) = only([|s| : s <- signatures]); ## BAD BAD BAD: THIS THING IS PRETTY UGLY AND UNSAFE...

    NeType+ col_types([+NeType+] signatures, [[+Nat]] keys) {
      arity = arity(signatures);
      types = (ne_union_superset([ts(i) : ts <- signatures]) : i < arity);
      perm = table_cols_perm(arity, keys);
      return (types(i) : i <- perm);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit typedefs : [TypeName -> NeType] {
  ## THIS IS AN ALMOST PERFECT DUPLICATE OF gen_dispatch_auto_method_body().
  Instr* method_dispatch_code(DBSymbol db_type, Method+ methods) {
    assert |methods| > 1;
    assert |[m.name : m <~ methods]| == 1;    // All methods must have the same name
    assert |[|m.args| : m <~ methods]| == 1;  // All methods have the same arity
    assert |head(methods).args| > 0;          // No-argument methods cannot be polymorphic


    l0 = lvar(0);
    count = |methods|;

    a_method  = head(methods);
    name      = a_method.name;
    arity     = |a_method.args|;

    disp_args = choose_disp_args(((t : t, unused_var <- nonempty(m.args)) : m <- methods), typedefs);

    cases = [{
      types = (left(m.args(j)) : j <- disp_args);
      invoke_method_instr = invoke_db_method(l0, db_type, method_id(name, arity, i), (fn_arg(j) : j < arity));
      code = (invoke_method_instr, ret_val(l0));
      return (types, code);
    } : m @ i <~ methods];

    code = dynamic_dispatch_code((fn_arg(i) : i <- disp_args), cases);
    return (code | ret_val(l0));
  }


  Instr* update_dispatch_code(DBSymbol db_type, <Update+, Handler+> updates) {
    assert |updates| > 1;
    assert |[name(u) : u <~ updates]| == 1;   // All updates must have the same name
    assert |[arity(u) : u <~ updates]| == 1;  // All updates have the same arity
    assert arity(head(updates)) > 0;          // No-argument updates cannot be polymorphic

    l0 = lvar(0);
    count = |updates|;

    an_update = head(updates);
    name      = name(an_update);
    arity     = arity(an_update);

    args_types = (
      match (u)
        update()  = (t : t, unused_var <- nonempty(u.args)),
        handler() = (u.type)
      : u <- updates
    );

    disp_args = choose_disp_args(args_types, typedefs);

    cases = [{
      types = (args_types(i)(j) : j <- disp_args);
      try_update_instr = try_update(db_type, polymorphic_update_id(u, i), (fn_arg(j) : j < arity));
      code = (try_update_instr, exit_block);
      return (types, code);
    } : u @ i <~ updates];

    code = dynamic_dispatch_code((fn_arg(i) : i <- disp_args), cases);
    return (execute_block(code));
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Maybe[UpdateSymbol] name(<Update, Handler>) =
  update() u?   = just(u.name),
  handler()     = nothing;

NeType* arg_types(<Update, Handler>) =
  update() u?   = (t : t, unused_var <- u.args),
  handler() h?  = (h.type);

UpdateId polymorphic_update_id(<Update, Handler>, Nat idx) =
  update() u?   = update_id(u.name, arity(u), idx),
  handler() h?  = handler_id(idx);
