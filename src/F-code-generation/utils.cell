Nat+ choose_disp_args(AnyType++ types, [TypeName -> Type] typedefs) {
  ## IF THERE'S MORE THAN ONE CHOICE OF DISPATCH ARGUMENTS,
  ## WE SHOULD CHOOSE THE ONE THAT IS THE MOST EFFICIENT
  some_types = types(0);
  obj_args = nonempty((i : t @ i <- some_types, t :: NeType));
  ptypes = ((pseudotype(cast_type(ts(i)), typedefs) : i <- obj_args) : ts <- types);
  count = |obj_args|;
  for n = 1...count:
    for idxs <- ordered_combinations(n, count):
      if are_sufficient(idxs, ptypes, typedefs):
        return (obj_args(i) : i <- idxs);
      ;
    ;
  ;
  fail;


  Bool are_sufficient(Nat+ arg_idxs, PseudoType++ ptypes, [TypeName -> Type] typedefs) {
    count = |ptypes|;
    for i1 < count-1; i2 = i1+1..count:
      pts1 = ptypes(i1);
      pts2 = ptypes(i2);
      disjoint = (j <~ arg_idxs : are_disjoint(pts1(j), pts2(j)));
      return false if not disjoint;
    ;
    return true;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[Int+] retrieve_nested_int_seqs(Expr expr) =
  tuple_expr(es?)   = if es :: IntObj+
                        then [(match (e) object(n?) = n : e <- es)]
                        else seq_union((retrieve_nested_int_seqs(e) : e <- es)),
  _                 = retrieve_from_nested_exprs(expr, retrieve_nested_int_seqs);


[Int+] retrieve_nested_int_seqs(Program prg) =
  union([
    retrieve_from_nested_exprs(obj, retrieve_nested_int_seqs)
    : obj <- prg.fndefs | obj <- prg.proc_defs | obj <- prg.auto_defs | obj <- prg.data_bases
  ]);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type CounterSet[T] = counter_set(nz_ctrs: [T -> NzNat]);


Nat next_value(CounterSet[T] ctr_set, T ctr) = lookup(ctr_set.nz_ctrs, ctr, 0);


CounterSet[T] increment(CounterSet[T] ctr_set, T ctr) {
  nz_ctrs = ctr_set.nz_ctrs;
  new_nz_ctrs = if nz_ctrs(ctr, *)
    then [c -> nz_nat(n + bit(c == ctr)) : c, n <- nz_ctrs]
    else nz_ctrs & [ctr -> 1];
  return counter_set(nz_ctrs: new_nz_ctrs);
}

////////////////////////////////////////////////////////////////////////////////

type GenVarType = obj, int, bool, set_it, seq_it, bin_rel_it, tern_rel_it, table_it, stream, vector;

type VarGen = CounterSet[GenVarType];


VarGen blank_var_gen = counter_set(nz_ctrs: []);


(T, VarGen) next_var(VarGen gen, GenVarType var_type, (Nat -> T) mk_var) =
  (mk_var(next_value(gen, var_type)), increment(gen, var_type));
  ## BUG BUG BUG: THE COMPILER FAILED TO DETECT THE WRONG NUMBER
  ## OF ARGUMENTS IN THE next_value() CALL, AND THE DESUGARING CRASHED
  ## WHAT'S GOING ON HERE? WAS IT BECAUSE IT WAS AN ARGUMENT TO A CLOSURE?
  // (mk_var(next_value(gen)), increment(gen, var_type));


(LocVar, VarGen)  next_obj_var(VarGen gen)  = next_var(gen, :obj, lvar);
(IntVar, VarGen)  next_int_var(VarGen gen)  = next_var(gen, :int, ivar);
(BoolVar, VarGen) next_bool_var(VarGen gen) = next_var(gen, :bool, bvar);

(SeqItVar, VarGen) next_seq_it_var(VarGen gen) = next_var(gen, :seq_it, seq_it_var);

(SetItVar, VarGen) next_set_it_var(VarGen gen) = next_var(gen, :set_it, set_it_var);
(BinRelItVar,  VarGen) next_bin_rel_it_var(VarGen gen)  = next_var(gen, :bin_rel_it, bin_rel_it_var);
(TernRelItVar, VarGen) next_tern_rel_it_var(VarGen gen) = next_var(gen, :tern_rel_it, tern_rel_it_var);

(TableItVar, VarGen) next_table_it_var(VarGen gen, NzNat arity) = next_var(gen, :table_it, table_it_var($, arity));

(StreamVar, VarGen) next_stream_var(VarGen gen) = next_var(gen, :stream, svar);

(VecVar, VarGen) next_vector_var(VarGen gen, NzNat size) = next_var(gen, :vector, vvar($, size));


(IntVar*, VarGen) next_int_vars(VarGen gen, Nat count) {
  g = gen;
  vs = ();
  for i < count:
    v, g = next_int_var(g);
    vs = (vs | v);
  ;
  return (vs, g);
}


(BoolVar*, VarGen) next_bool_vars(VarGen gen, Nat count) {
  g = gen;
  vs = ();
  for i < count:
    v, g = next_bool_var(g);
    vs = (vs | v);
  ;
  return (vs, g);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program {
  ## WHAT'S THE DIFFERENCE BETWEEN THIS AND state_type()? IS IT JUST THE DEPTH?
  ## AND DO I REALLY NEED THIS ONE, OR CAN I MAKE DO WITH JUST state_type()?
  // NeType deep_state_type(Database data_base) {
  //   state_var_field_types = [object(bare_id(v)) -> info.type : v, info <- data_base.state_vars];
  //   rel_var_field_types = [
  //       object(bare_id(v)) -> {
  //         sgns = info.signatures;
  //         return type_set(ne_union_superset([only(s) : s <- sgns])) if sgns :: [+(NeType)];
  //         return type_bin_rel(sgns, false)  if sgns :: [+(NeType, NeType)];
  //         return type_tern_rel(sgns, false) if sgns :: [+(NeType, NeType, NeType)];
  //         fail; ## BAD BAD BAD
  //       }
  //     : v, info <- data_base.rel_vars
  //   ];
  //   nested_db_field_types = [object(bare_id(v)) -> deep_state_type(automaton_by_id(s)) : v, s <- data_base.nested_dbs];
  //   all_field_types = state_var_field_types & rel_var_field_types & nested_db_field_types;
  //   return empty_rel_type if all_field_types == [];
  //   all_fields = [s -> (type: t, optional: false) : s, t <- all_field_types];
  //   return ne_record_type(all_fields);
  // }


  NeType deep_state_type(Automaton auto) {
    inputs = [v -> i.type : v, i <- auto.inputs, not i.discrete and not i.volatile];
    state_vars = [v -> s.type : v, s <- auto.state, not s.volatile];
    nested_autos = [v -> deep_state_type(automaton_by_id(a.type)) : v, a <- auto.nested_autos, not a.volatile];
    nested_dbs = [v -> type_ref(schema_type_symbol(untag(a.type))) : v, a <- auto.nested_dbs, not a.volatile];

    fields = inputs & state_vars & nested_autos & nested_dbs;
    return empty_rel_type if fields == [];

    return ne_record_type([object(bare_id(v)) -> (type: t, optional: false) : v, t <- fields]);
  }
}
