[<StdVar, LocVar>] std_loc_vars_used(NodeInfo info) {
  return match (info)
    std_node(is?)           = search_any_exprs(is, std_loc_vars_used),
    branch_node(e?)         = std_loc_vars_used(e),
    nat_switch_node(e?)     = std_loc_vars_used(e),
    symb_switch_node()      = std_loc_vars_used(info.value),
    set_cls_par_node()      = search_any_exprs(info.cls, std_loc_vars_used),
    foreach_node()          = std_loc_vars_used(info.iter);


  [<StdVar, LocVar>] std_loc_vars_used(AnyTypeExpr expr) =
    if expr :: <StdVar, LocVar> then [expr] else search_any_nested(expr, std_loc_vars_used);


  [<StdVar, LocVar>] std_loc_vars_used(ForeachIter iter) =
    seq_iter()                  = [iter.seq],
    unary_table_iter()          = [],
    bin_table_iter()            = [],
    sym_bin_table_iter()        = [],
    master_bin_table_iter()     = [],
    slave_tern_table_iter()     = [],
    tern_table_iter()           = [],
    semi_sym_tern_table_iter()  = [];
}


[<StdVar, LocVar>] std_loc_vars_set(NodeInfo info) {
  return match (info)
    std_node(is?)       = std_loc_vars_set(is),
    branch_node()       |
    nat_switch_node()   |
    symb_switch_node()  |
    set_cls_par_node()  = [],
    foreach_node()      = std_loc_vars_set(info.iter);

  [<StdVar, LocVar>] std_loc_vars_set(ForeachIter iter) =
    seq_iter()                  = [iter.it_var if iter.it_var :: <StdVar, LocVar>], ## NOT SURE THIS ONE IS NECESSARY
    unary_table_iter()          = [],
    bin_table_iter()            = [],
    sym_bin_table_iter()        = [],
    master_bin_table_iter()     = [],
    slave_tern_table_iter()     = [],
    tern_table_iter()           = [],
    semi_sym_tern_table_iter()  = [];

  [<StdVar, LocVar>] std_loc_vars_set(JumpInstr instr) = [];

  [<StdVar, LocVar>] std_loc_vars_set(BasicInstr instr) =
    set_var()                               |
    set_rc_var()                            |
    call_cls()                              = [instr.var if instr.var :: <StdVar, LocVar>],
    call_proc()                             = [instr.var if instr.var? and instr.var :: <StdVar, LocVar>],
    invoke_auto_method()                    |
    invoke_db_method()                      = [instr.res_var if instr.res_var :: <StdVar, LocVar>],
    clear_loc_var()                         = undefined,
    nullify_var()                           = undefined,

    // Instruction that don't affect any StdVar or LocVar
    init_stream()                           = [],
    append()                                = [],
    array_alloc()                           = [],
    array_write()                           = [],
    array_append()                          = [],
    array_set_var()                         = [],
    write_rec_field()                       = [],
    finish_init()                           = [],
    get_seq_iter()                          = [],
    get_set_iter()                          = [],
    get_bin_rel_iter()                      = [],
    get_tern_rel_iter()                     = [],
    move_forward()                          = [],
    set_bvar()                              = [],
    set_ivar()                              = [],
    set_ivar32()                            = [],
    set_fvar()                              = [],
    set_tvar()                              = [],
    init_memb_var()                         = [],
    reset_memb_var()                        = [],
    add_ref()                               = [],
    release()                               = [],
    print_obj()                             = [],
    no_op                                   = [],
    push_call_info()                        = [],
    pop_call_info                           = [],
    log_runtime_failure()                   = [],
    queue_node_update()                     = [],
    insert_timer()                          = [],
    clear_timer()                           = [],
    auto_pre_init()                         = [],
    auto_cleanup()                          = [],
    set_input()                             = [],
    clear_input()                           = [],
    auto_init()                             = [],
    auto_update_node()                      = [],
    auto_apply()                            = [],
    set_persistent_state()                  = [],
    init_db()                               = [],
    cleanup_db()                            = [],
    send_external_msg()                     = [],
    send_internal_msg()                     = [],
    set_state()                             = [],
    init_value_store()                      = [],
    cleanup_value_store()                   = [],
    init_table()                            = [],
    cleanup_table()                         = [],
    queue_deletes()                         = [],
    lookup_or_queue_insert_value()          = [],
    queue_insert_tuple()                    = [],
    column_insert_deferred()                = [],
    immediate_insert_or_add_ref()           = [],
    immediate_insert_tuple()                = [],
    column_insert_immediate()               = [];
}
