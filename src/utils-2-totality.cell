Bool is_total(Expr expr) {
  ## THIS IS ACTUALLY WRONG. READING AN UNDEFINED OUTPUT OF A LOCAL REACTIVE AUTOMATON
  ## SHOULD CAUSE AN UNRECOVERABLE CRASH. ARE THERE OTHER PROBLEM CASES?
  return true if expr :: Var;
  return match (expr)
    object()              = true,
    float_lit()           = true,
    seq_expr(ses?)        = all((is_total(se) : se <- ses)),
    tuple_expr(es?)       = all((is_total(e) : e <- es)),
    seq_tail_expr()       = all((is_total(e) : e <- expr.tail)) and is_total(expr.seq),
    set_expr(ses?)        = not (se <- ses : not is_total(se)),
    map_expr(es?)         = not (e <- es : not is_total(e)),
    tag_obj_expr()        = is_total(expr.tag) and is_total(expr.obj),
    builtin_call()        = all((is_total(e) : e <- expr.args)) and is_total(expr.name),
    size_expr()           = is_total(expr.coll),
    rel_memb_test()       = is_total(expr.rel) and all((is_total(value(a)) : a <- expr.args, a != nothing)),
    relvar_memb_test()    = all((is_total(value(a)) : a <- expr.args, a != nothing)),
    and_expr()            = is_total(expr.left) and is_total(expr.right),
    or_expr()             = is_total(expr.left) and is_total(expr.right),
    not_expr(e?)          = is_total(e),
    eq()                  = is_total(expr.left) and is_total(expr.right),
    membership()          = is_total(expr.obj),
    cast_expr()           = undefined,
    accessor()            = is_total(expr.expr),
    accessor_test()       = is_total(expr.expr),
    if_expr()             = is_total(expr.cond) and is_total(expr.then) and is_total(expr.else),
    ex_qual()             = is_total(expr.source) and is_total(expr.cond),
    set_comp()            = is_total(expr.source) and is_total(expr.expr),
    map_comp()            = is_total(expr.source) and is_total(expr.key_expr) and is_total(expr.value_expr),
    bin_rel_comp()        |
    tern_rel_comp()       = is_total(expr.source) and all((is_total(e) : e <- expr.exprs)),
    seq_comp()            = is_total(expr.src_expr) and (not expr.sel_expr? or is_total(expr.sel_expr)) and is_total(expr.expr),
    range_comp()          = is_total(expr.bound_expr) and (not expr.sel_expr? or is_total(expr.sel_expr)) and is_total(expr.expr),

    output_is_def()       = true, ## THIS ONE SHOULD BE FINE, BUT I'M NOT 100% SURE...

    undefined             = false,
    fn_call()             = false,
    cls_call()            = false,
    unary_pseudo_call()   = false,
    rel_lookup()          = false,
    relvar_lookup()       = false,
    match_expr()          = false,
    do_expr()             = false,
    output_is_set()       = false; ## NOT TOO SURE ABOUT THIS ONE EITHER...
}


Bool is_total(CondExpr expr) = is_total(expr.cond) and is_total(expr.expr);


Bool is_total((key: Expr, value: Expr, cond: Expr?) map_entry) =
  is_total(map_entry.key) and is_total(map_entry.value) and (not map_entry.cond? or is_total(map_entry.cond));


Bool is_total(Clause cls) =
  set_clause()          = is_total(cls.src),
  rel_clause()          = is_total(cls.src) and all((is_total(value(a)) : a <- cls.args, a != nothing)),
  relvar_clause()       = all((is_total(value(a)) : a <- cls.args, a != nothing)),
  seq_clause()          = is_total(cls.src),
  and_clause()          = is_total(cls.left) and is_total(cls.right),
  or_clause()           = is_total(cls.left) and is_total(cls.right),
  match_clause()        = is_total(cls.expr),
  asgnm_clause()        = is_total(cls.expr),
  filter_clause(e?)     = is_total(e);


Bool is_total(BuiltIn name) =
  neg         |
  add         |
  sub         |
  mult        |
  lt          |
  le          |
  and         |
  or          |
  xor         |
  cat         |
  rev         |
  tag         |
  untag       |
  isort       |
  parse       |
  print       |
  fneg        |
  fadd        |
  fsub        |
  fmult       |
  fdiv        |
  flt         |
  fle         |
  fexp        |
  float       |
  bits        |
  rand_nat    |
  rand_elem   |
  counter     |
  ticks       = true,

  div         |
  mod         |
  slice       |
  fsqrt       |
  floor       |
  ceiling     |
  mantissa    |
  dec_exp     = false;
