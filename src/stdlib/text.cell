Result[Nat*, Nat] from_utf8(Byte* bytes) {
  len = |bytes|;
  idx = 0;
  count = 0;
  chars = ();
  while idx < len:
    byte = bytes(idx);
    if byte / 128 == 0: // 0xxxxxxx
      size = 0;
      char = byte;
    elif byte / 32 == 6: // 110xxxxx  10xxxxxx
      size = 1;
      char = mod(byte, 32);
    elif byte / 16 == 14: // 1110xxxx  10xxxxxx  10xxxxxx
      size = 2;
      char = mod(byte, 16);
    elif byte / 8 == 30: // 11110xxx  10xxxxxx  10xxxxxx  10xxxxxx
      size = 3;
      char = mod(byte, 8);
    else
      return failure(nat(idx));
    ;

    return failure(nat(idx)) if idx + size >= len;

    for i = idx+1 ... idx+size:
      byte = bytes(i);
      return failure(nat(i)) if byte / 64 != 2;
      old_char = char;
      char = 64 * char + mod(byte, 64);
    ;
    idx = idx + 1 + size;
    chars = (chars | nat(char));
  ;

  return success(chars);
}
