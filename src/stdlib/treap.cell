type TreapSet[T]          = treap_set(size: Nat, root: TreapSetNode[T]);

type TreapMap[TK, TV]     = treap_map(size: Nat, root: TreapMapNode[TK, TV]);

////////////////////////////////////////////////////////////////////////////////

type TreapSetNode[T]      = treap_set_leaf, TreapSetInnerNode[T];

type TreapSetInnerNode[T] = treap_set_node(
                              elem:      T,
                              priority:  Nat,
                              left:      TreapSetNode[T],
                              right:     TreapSetNode[T]
                            );


type TreapMapNode[KT, VT]       = treap_map_leaf, TreapMapInnerNode[KT, VT];

type TreapMapInnerNode[KT, VT]  = treap_map_node(
                                    key:       KT,
                                    value:     VT,
                                    priority:  Nat,
                                    left:      TreapMapNode[KT, VT],
                                    right:     TreapMapNode[KT, VT]
                                  );

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Nat rand_treap_priority = _rand_nat_(100000000);

////////////////////////////////////////////////////////////////////////////////

## THE RESULT TYPE IS HERE ONLY TEMPORARY, TO ALLOW TYPECHECKING
<treap_set(size: <0..0>, root: treap_set_leaf)> empty_treap_set = treap_set(size: 0, root: :treap_set_leaf);

TreapSet[T] treap_set(Nat s, TreapSetNode[T] r) = treap_set(size: s, root: r);

Bool contains(TreapSet[T] set, T elem, (T T -> Bool) lower_than) = contains(set.root, elem, lower_than);

TreapSet[T] insert(TreapSet[T] set, T elem, (T T -> Bool) lower_than) {
  new_root = insert(set.root, elem, lower_than);
  return if new_root == set.root then set else treap_set(nat(set.size + 1), new_root);
}

TreapSet[T] remove(TreapSet[T] set, T elem, (T T -> Bool) lower_than) {
  new_root = remove(set.root, elem, lower_than);
  return if new_root == set.root then set else treap_set(nat(set.size - 1), new_root);
}

////////////////////////////////////////////////////////////////////////////////

TreapSetInnerNode[T] treap_set_node(T k, Nat p, TreapSetNode[T] l, TreapSetNode[T] r) =
  treap_set_node(elem: k, priority: p, left: l, right: r);

////////////////////////////////////////////////////////////////////////////////

TreapSetNode[T] merge(TreapSetNode[T] left, TreapSetNode[T] right) {
  return right if left == :treap_set_leaf;
  return left if right == :treap_set_leaf;

  if left.priority < right.priority:
    new_right = merge(left.right, right);
    return treap_set_node(left.elem, left.priority, left.left, new_right);
  else
    new_left = merge(left, right.left);
    return treap_set_node(right.elem, right.priority, new_left, right.right);
  ;
}

////////////////////////////////////////////////////////////////////////////////

TreapSetInnerNode[T] insert(TreapSetNode[T] root, T elem, (T T -> Bool) lower_than) {
  if root == :treap_set_leaf:
    return treap_set_node(elem, rand_treap_priority, :treap_set_leaf, :treap_set_leaf);
  ;

  root_elem = root.elem;

  return root if elem == root_elem;

  root_priority = root.priority;

  if lower_than(elem, root_elem):
    new_left = insert(root.left, elem, lower_than);
    if new_left.priority >= root_priority:
      return treap_set_node(root_elem, root_priority, new_left, root.right);
    else
      assert new_left.elem == elem;
      new_right = treap_set_node(root_elem, root_priority, new_left.right, root.right);
      return treap_set_node(elem, new_left.priority, new_left.left, new_right);
    ;

  else
    new_right = insert(root.right, elem, lower_than);
    if new_right.priority >= root_priority:
      return treap_set_node(root_elem, root_priority, root.left, new_right);
    else
      assert new_right.elem == elem;
      new_left = treap_set_node(root_elem, root_priority, root.left, new_right.left);
      return treap_set_node(elem, new_right.priority, new_left, new_right.right);
    ;
  ;
}

////////////////////////////////////////////////////////////////////////////////

TreapSetNode[T] remove(TreapSetNode[T] treap, T elem, (T T -> Bool) lower_than) {
  return :treap_set_leaf if treap == :treap_set_leaf;

  return merge(treap.left, treap.right) if elem == treap.elem;

  if lower_than(elem, treap.elem):
    new_left = remove(treap.left, elem, lower_than);
    return treap_set_node(treap.elem, treap.priority, new_left, treap.right);
  else
    new_right = remove(treap.right, elem, lower_than);
    return treap_set_node(treap.elem, treap.priority, treap.left, new_right);
  ;
}

////////////////////////////////////////////////////////////////////////////////

Bool contains(TreapSetNode[T] treap, T elem, (T T -> Bool) lower_than) {
  return false if treap == :treap_set_leaf;
  return true if elem == treap.elem;
  branch = if lower_than(elem, treap.elem) then treap.left else treap.right;
  return contains(branch, elem, lower_than);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

<treap_map(size: <0..0>, root: treap_map_leaf)> empty_treap_map = treap_map(size: 0, root: :treap_map_leaf);

TreapMap[KT, VT] treap_map(Nat s, TreapMapNode[KT, VT] r) = treap_map(size: s, root: r);

Bool has_key(TreapMap[KT, VT] map, KT key, (KT KT -> Bool) lower_than) =
  try_lookup(map.root, key, lower_than) != nothing;

## BUG: SIGNATURE CONFLICTS WITH lookup METHOD FOR BUILTIN MAPS (WITH DEFAULT)
// VT lookup(TreapMap[KT, VT] map, KT key, (KT, KT -> Bool) lower_than) =
//   value(try_lookup(map.root, key, lower_than));

Maybe[VT] try_lookup(TreapMap[KT, VT] map, KT key, (KT KT -> Bool) lower_than) =
  try_lookup(map.root, key, lower_than);

TreapMap[KT, VT] insert(TreapMap[KT, VT] map, KT key, VT value, (KT KT -> Bool) lower_than) {
  new_root = insert(map.root, key, value, lower_than);
  return if new_root == map.root then map else treap_map(nat(map.size + 1), new_root);
}

TreapMap[KT, VT] remove(TreapMap[KT, VT] map, KT key, (KT KT -> Bool) lower_than) {
  new_root = remove(map.root, key, lower_than);
  return if new_root == map.root then map else treap_map(nat(map.size - 1), new_root);
}

////////////////////////////////////////////////////////////////////////////////

TreapMapInnerNode[KT, VT] treap_map_node(KT k, VT v, Nat p, TreapMapNode[KT, VT] l, TreapMapNode[KT, VT] r) =
  treap_map_node(key: k, value: v, priority: p, left: l, right: r);

////////////////////////////////////////////////////////////////////////////////

TreapMapNode[KT, VT] merge(TreapMapNode[KT, VT] left, TreapMapNode[KT, VT] right) {
  return right if left == :treap_map_leaf;
  return left if right == :treap_map_leaf;

  if left.priority < right.priority:
    new_right = merge(left.right, right);
    return treap_map_node(left.key, left.value, left.priority, left.left, new_right);
  else
    new_left = merge(left, right.left);
    return treap_map_node(right.key, right.value, right.priority, new_left, right.right);
  ;
}

////////////////////////////////////////////////////////////////////////////////

TreapMapInnerNode[KT, VT] insert(TreapMapNode[KT, VT] root, KT key, VT value, (KT KT -> Bool) lower_than) {
  if root == :treap_map_leaf:
    return treap_map_node(key, value, rand_treap_priority, :treap_map_leaf, :treap_map_leaf);
  ;

  root_key = root.key;
  root_value = root.value;
  root_priority = root.priority;

  if key == root_key:
    if value == root_value:
      return root;
    else
      return treap_map_node(key, value, root_priority, root.left, root.right);
    ;
  ;

  if lower_than(key, root_key):
    new_left = insert(root.left, key, value, lower_than);
    if new_left.priority >= root_priority:
      return treap_map_node(root_key, root_value, root_priority, new_left, root.right);
    else
      assert new_left.key == key and new_left.value == value;
      new_right = treap_map_node(root_key, root_value, root_priority, new_left.right, root.right);
      return treap_map_node(key, value, new_left.priority, new_left.left, new_right);
    ;

  else
    new_right = insert(root.right, key, value, lower_than);
    if new_right.priority >= root_priority:
      return treap_map_node(root_key, root_value, root_priority, root.left, new_right);
    else
      assert new_right.key == key and new_right.value == value;
      new_left = treap_map_node(root_key, root_value, root_priority, root.left, new_right.left);
      return treap_map_node(key, value, new_right.priority, new_left, new_right.right);
    ;
  ;
}

////////////////////////////////////////////////////////////////////////////////

TreapMapNode[KT, VT] remove(TreapMapNode[KT, VT] treap, KT key, (KT KT -> Bool) lower_than) {
  return :treap_map_leaf if treap == :treap_map_leaf;

  return merge(treap.left, treap.right) if key == treap.key;

  if lower_than(key, treap.key):
    new_left = remove(treap.left, key, lower_than);
    return treap_map_node(treap.key, treap.value, treap.priority, new_left, treap.right);
  else
    new_right = remove(treap.right, key, lower_than);
    return treap_map_node(treap.key, treap.value, treap.priority, treap.left, new_right);
  ;
}

////////////////////////////////////////////////////////////////////////////////

Maybe[VT] try_lookup(TreapMapNode[KT, VT] treap, KT key, (KT KT -> Bool) lower_than) {
  return nothing if treap == :treap_map_leaf;
  return just(treap.value) if treap.key == key;
  branch = if lower_than(key, treap.key) then treap.left else treap.right;
  return try_lookup(branch, key, lower_than);
}
