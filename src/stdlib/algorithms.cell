T* sort_set([T] s, (T T -> Bool) lt) = sort(rand_sort(s), lt);


T* sort(T* s, (T T -> Bool) lt) = mergesort(s, lt);


T* mergesort(T* seq, (T T -> Bool) lt) {
  len = |seq|;
  return seq if len <= 1;
  ss = ((x) : x <- seq);
  while len > 1:
    nss = ();
    idx = 0;
    ## BAD BAD BAD DOESN'T WORK WELL WITH A ROPE
    while len > idx+1:
      nss = (merge(ss(idx), ss(idx+1), lt)) & nss;
      idx = idx + 2;
    ;
    assert idx == |ss| or idx == |ss| - 1;
    ss  = if len > idx then (ss(idx)) & nss else nss;
    len = |ss|; ## SHOULD BE len = (len + 1) / 2;
  ;
  return ss(0);


  T* merge(T* seq1, T* seq2, (T T -> Bool) lt) {
    l1 = |seq1|;
    l2 = |seq2|;
    rs = ();
    i1 = 0;
    i2 = 0;
    while i1 < l1 or i2 < l2:
      if i1 == l1 or (i2 < l2 and lt(seq2(i2), seq1(i1))):
        rs = (seq2(i2)) & rs;
        i2 = i2 + 1;
      else
        rs = (seq1(i1)) & rs;
        i1 = i1 + 1;
      ;
    ;
    assert i1 <= l1 and i2 <= l2;
    return reverse(rs);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THERE'S A BUG HERE, PROBABLY WHEN ONE OF THE SET OF TARGETS IS EMPTY
[T -> [T]] transitive_closure([T -> [T]] map) {
  // assert union(values(map)) - keys(map) == {};

  all_nodes = keys(map) & union(values(map));

  curr_map = [n -> lookup(map, n, []) : n <- keys(map) & union(values(map))];

  loop
    new_map = [n -> rs & union([curr_map[r] : r <- rs]) : n, rs <- curr_map];
    break if {new_map == curr_map};
    curr_map = new_map;
  ;

  return [n -> curr_map[n] : n <- keys(map)];
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Nat** reverse_adj_list(Nat** adj_list) {
  rev_edges = join((((t, s) : t <- ts) : ts @ s <- adj_list));
  rev_edges = sort(rev_edges, lower);
  rev_adj_list = ();
  idx = 0;
  for i < |adj_list|:
    ts = ();
    while idx < |rev_edges| and left(rev_edges(idx)) == i:
      ts = (ts | right(rev_edges(idx)));
      idx = idx + 1;
    ;
    rev_adj_list = (rev_adj_list | ts);
  ;
  return rev_adj_list;


  Bool lower((Nat, Nat) x, (Nat, Nat) y) {
    lx, rx = x;
    ly, ry = y;
    return if lx != ly then lx < ly else rx < ry;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

## THINK OF HOW TO REWRITE THIS FUNCTION (AND ITS SIGNATURE) SO THAT IS CAN BE PROVED IT'S TOTAL
[+T]* topological_sort([T -> [T]] edges) {
  return () if edges == [];
  all_nodes = union([[s] & ts : s, ts <- edges]);
  done_nodes = [n : n <- all_nodes, not edges(n, *) or edges[n] == []];
  layers = (nonempty(done_nodes));
  rem_edges = [s -> ts : s, ts <- edges, ts != []];
  while rem_edges != []:
    cleaned_edges = [s -> ts - done_nodes : s, ts <- rem_edges];
    new_layer = nonempty([s : s, ts <- cleaned_edges, ts == []]);
    layers = (layers | new_layer);
    done_nodes = done_nodes & new_layer;
    rem_edges = [s -> ts : s, ts <- cleaned_edges, ts != []];
  ;
  return layers;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[+[+T]] equiv_groups([+T] xs, (T T -> Bool) eq) {
  groups = ();
  rem_xs = rand_sort(xs);
  while rem_xs != ():
    head = head(rem_xs);
    group = (head);
    rest = ();
    for i = 1..|rem_xs|:
      x = rem_xs(i);
      if eq(head, x):
        group = (group | x);
      else
        rest = (rest | x);
      ;
    ;
    groups = (groups | group);
    rem_xs = rest;
  ;
  return set(nonempty((set(nonempty(g)) : g <- groups)));
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Nat* count_vector(Nat* seq, Nat min_size) {
  res = count_vector(seq);
  while |res| < min_size:
    res = (res | 0);
  ;
  return res;
}


Nat* count_vector(Nat* seq) {
  res = count_vector_impl(seq);

  for c @ v <- res:
    c2 = 0;
    for n <- seq:
      c2 = c2 + 1 if n == v;
    ;
    ## TODO: FIX ASSERT ERROR *******************************************
    assert c == c2;
  ;
  assert if seq == () then res == () else sum(res) == |seq|;
  return res;


  Nat* count_vector_impl(Nat* seq) {
    return () if seq == ();
    len = |seq|;
    sorted_seq = sort(seq, $a < $b);
    max = rev_at(seq, 0);
    counters = ();
    cursor = 0;
    for val <= max:
      new_cursor = cursor;
      while new_cursor < len and sorted_seq(new_cursor) == val:
        new_cursor = new_cursor + 1;
      ;
      counters = (counters | nat(new_cursor-cursor));
      cursor = new_cursor;
    ;
    return counters;
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Nat++ ordered_combinations(NzNat m, NzNat n) =
  if m == 1
    then ((i) : i < n)
  elif m == n
    then ((i : i < n))
  else
    nonempty(
      (nonempty((0) & (nat(i+1) : i <- c)) : c <- ordered_combinations(nz_nat(m-1), nz_nat(n-1))) &
      ((nat(i+1) : i <- c) : c <- ordered_combinations(m, nz_nat(n-1)))
    );


[+[+Nat]] combinations(NzNat m, NzNat n) = [[i : i <~ c] : c <~ ordered_combinations(m, n)];

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Maybe[Nat]* idxs_into_filtered_seq(Bool* sels) {
  idxs : Maybe[Nat]*;
  idxs = ();
  curr_idx = 0;
  for sel <- sels:
    if sel:
      idx = just(curr_idx);
      curr_idx = nat(curr_idx + 1);
    else
      idx = nothing;
    ;
    idxs = (idxs | idx);
  ;
  return idxs;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[Nat*] permutations(Nat n) {
  return [()] if n == 0;
  m = nat(n - 1);
  ps = permutations(m);
  return union([set((insert_at(p, m, i) : i < n)) : p <- ps]);

  Nat+ insert_at(Nat* ns, Nat m, Nat i) = (
      if j < i
        then ns(j)
      elif j == i
        then m
      else
        ns(j-1)
      : j <= |ns|
    );
}


Nat* reverse_perm(Nat* p) = array_map(reverse(merge(([i -> n] : n @ i <- p))));

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[[T]] power_set([T] set) {
  return power_set_helper(rand_sort(set));

  [[T]] power_set_helper(T* ord_set) {
    return [[]] if ord_set == ();
    rec_res = power_set_helper(tail(ord_set));
    new_res = [s & [ord_set(0)] : s <- rec_res];
    return rec_res & new_res;
  }
}


[T, T] symmetric_cart_prod([T] set) {
  ord_set = rand_sort(set);
  return [x, y : x @ i <~ ord_set, y <~ drop(ord_set, i+1)];
}
