type SmallIntRepr     = int8, int16, int32, nat8; //, nat16, nat32;

type LowLevelRepr     = bool, int, symbol, float, object, array(type: LowLevelEltRepr);

type LowLevelEltRepr  = LowLevelRepr, SmallIntRepr;

type OptRecRepr       = opt_rec_repr([+Symbol -> (repr: LowLevelRepr, optional: Bool)]);

type OptTagRecRepr    = opt_tag_rec_repr(tag: Symbol, index: Nat);

type AnyLowLevelRepr  = LowLevelRepr, OptTagRecRepr;
type LowLevelSign     = low_level_sign(args: AnyLowLevelRepr*, ret_value: AnyLowLevelRepr);

////////////////////////////////////////////////////////////////////////////////

type LocVar           = lvar(Nat), invalid_var;  ## FIND BETTER NAME.
type ElemVar          = evar(id: Nat, idx: <Nat, IntVar, add(val1: IntVar, val2: Nat)>);

type CaptVar          = capt_var(Nat);

type PendingStateVar  = pending_state_var(Symbol);
type PendingInputVar  = pending_input_var(Symbol);

type ReadOnlyObjVar = FnArg, CaptVar;
type WriteObjVar    = RWObjVar, ElemVar;
type RWObjVar       = StdVar, LocVar,
                      AnyMembVar, PendingStateVar,
                      AnySignalVar, PrevVarValue, PendingInputVar,
                      MembObjVar;

type StdObjVar      = RWObjVar, ImplArg, ReadOnlyObjVar;

type NullableVar    = StdVar, AnySignalVar, PrevVarValue, PendingInputVar, LocVar, MembObjVar;
type NonNullableVar = FnArg, ImplArg, CaptVar, AnyMembVar, PendingStateVar, ElemVar;

type ObjVar         = NonNullableVar, NullableVar;

type AnyNullableVar = NullableVar, PendingInputVar;

type VecVar         = vvar(id: Nat, size: NzNat);

type MembBoolVar    = nested_db_spent(NestedDBVar),
                      cond_value_var(Nat),
                      cond_is_def_var(Nat),
                      watched_signal_up_to_date_var(Symbol),
                      up_to_date_var(BlockNodeId),
                      is_new;

type MembIntVar     = update_source_var(Symbol),
                      null_locks_count_var(Symbol),
                      update_count_var(Nat),
                      nodes_to_update_var(level: Nat, index: <Nat, IntVar>),
                      next_trigger_time_var(Symbol),
                      curr_time_slot_var(Symbol),
                      time_triggers_count_var,
                      trigger_times_heap_var(<0..0>),
                      time_varying_cond_ids_heap_var(<0..0>),
                      last_update_time,
                      elapsed_time,
                      changed_outputs_count,
                      nested_auto_int_var(auto_var: NestedAutoVar, memb_var: MembIntVar);

type MembObjVar     = watched_signal_value_var(Symbol);

type IntConst       = time_slot_length(automaton: AutoSymbol, expr_id: Symbol, time_slot: IntExpr);

type MembIntVectVar = nodes_to_update_vect_var(level: Nat, size: NzNat), ## BAD: <size> SHOULD BE OF TYPE <3..*>
                      changed_outputs(size: NzNat);

type QualBoolVar    = qual_bool_var(auto_var: LocAutoVar, memb_var: MembBoolVar);
type LocBoolVar     = bvar(<Symbol, Nat>);
type BoolFnArg      = bool_arg(Nat);
type BoolVar        = LocBoolVar, BoolFnArg, MembBoolVar, QualBoolVar;

type LocAutoIntVar  = elapsed_time(LocAutoVar); ## BETTER NAME/CLASSIFICATION

type ProjdIntVar    = changed_output(index: <Nat, IntVar>);

type LocIntVar      = ivar(<Symbol, Nat>);
type IntFnArg       = int_arg(Nat);

type IntVar         = LocIntVar,
                      IntFnArg,
                      update_time,
                      curr_time,
                      update_expr_index,
                      ProjdIntVar,
                      MembIntVar,
                      LocAutoIntVar;

type Int32Var       = ivar32(Nat), shadow_surr_var(StdVar), shadow_array_size_var(Symbol);

type LocFloatVar    = fvar(<Symbol, Nat>);
type FloatFnArg     = float_arg(Nat);
type FloatVar       = LocFloatVar, FloatFnArg;

type LocOptTagRecVar  = opt_tag_rec_var(id: <Symbol, Nat>, tag: Symbol, index: Nat);
type OptTagRecFnArg   = opt_tag_rec_fn_arg(id: Nat, tag: Symbol, index: Nat);
type OptTagRecVar     = LocOptTagRecVar, OptTagRecFnArg;

type ArrayVar       = avar(id: Nat, repr: LowLevelEltRepr), shadow_array_var(id: Symbol, repr: LowLevelEltRepr);

type AnyWriteVar    = LocBoolVar, LocIntVar, FloatVar, LocOptTagRecVar, WriteObjVar;

type StreamVar      = svar(Nat); ## DOES THIS NEED CLEANUP?

type SetItVar       = set_it_var(Nat);      ## MUST WORK WITHOUT THE NEED FOR EXPLICIT CLEANUP
type SeqItVar       = seq_it_var(Nat);      ## DITTO
type BinRelItVar    = bin_rel_it_var(Nat);  ## DITTO
type TernRelItVar   = tern_rel_it_var(Nat); ## DITTO

type TableItVar     = table_it_var(id: Nat, arity: NzNat, symmetric: Bool); ## DITTO
type ColumnItVar    = column_it_var(id: Nat);

type ItVar          = SeqItVar, SetItVar, BinRelItVar, TernRelItVar, TableItVar;

type AnyVar         = ObjVar, OptTagRecVar, VecVar, ArrayVar, BoolVar, IntVar,
                      Int32Var, FloatVar, ItVar, StreamVar;

type AnyLocVar      = LocBoolVar, LocIntVar, LocFloatVar, LocOptTagRecVar, LocVar, StdVar;

type TableVar       = table_var(PhysRelVar);
type QualTableVar   = qual_table_var(db_var: AnyDBVar, table_var: TableVar);
type CaptTableVar   = capt_table_var(TableVar);
type AnyTableVar    = TableVar, QualTableVar, CaptTableVar;

////////////////////////////////////////////////////////////////////////////////

type MembTestPredId = memb_test(<Symbol, Nat, (Symbol, <Symbol, Nat>)>);

type SubAggrFnId    = red_var_init(AggrFnId, StdVar), red_vars_merge(AggrFnId, StdVar),
                      final_value_yield(AggrFnId), null_value(AggrFnId);

type ConvFnId       = any_tag_obj_conv, tag_rec_conv(Symbol), tag_rec_repr_conv(Symbol, Nat);

type ObjFnName      = FnId, ProcSymbol, SubAggrFnId, ConvFnId;

type InlineObj      = SymbObj, empty_seq, empty_rel;

type AtomicBoolExpr = Bool, BoolVar;

type BoolNatOp      = is_symb(ObjExpr),
                      is_int(ObjExpr),
                      is_float(ObjExpr),
                      is_ne_set(ObjExpr),
                      is_ne_seq(ObjExpr),
                      is_ne_map(ObjExpr),
                      is_ne_bin_rel(ObjExpr),
                      is_ne_tern_rel(ObjExpr),
                      is_tagged_obj(ObjExpr),
                      are_eq(ObjExpr, ObjExpr),
                      is_lt(IntExpr, IntExpr),
                      is_le(IntExpr, IntExpr),
                      is_flt(FloatExpr, FloatExpr),
                      is_fle(FloatExpr, FloatExpr),
                      is_out_of_range(ItVar),
                      is_blank(<AnySignalVar, LocVar, PendingStateVar>),
                      is_null(AnyNullableVar),
                      has_field(record: ObjExpr, field: SymbObj),
                      rel_obj_contains(rel: ObjExpr, args: Maybe[ObjExpr]+),
                      table_contains(table: AnyTableVar, tuple: Maybe[Int32Var]+, symmetric: Bool);

type IntNatOp       = get_int_val(ObjExpr),
                      minus(IntExpr),
                      add(IntExpr, IntExpr),
                      sub(IntExpr, IntExpr),
                      mult(IntExpr, IntExpr),
                      div(IntExpr, IntExpr),
                      mod(IntExpr, IntExpr),
                      bitwise_and(IntExpr, IntExpr),
                      bitwise_or(IntExpr, IntExpr),
                      bitwise_xor(IntExpr, IntExpr),
                      float_bits(FloatExpr),
                      mantissa(FloatExpr),
                      dec_exp(FloatExpr),
                      upcast_int32(<Int32Var, Int32NatOp>),
                      surr_to_int_value(store: AnyValueStoreId, surrogate: Int32Var),
                      rand_nat(IntExpr),  // Non-deterministic
                      unique_nat,         // Non-deterministic
                      ticks;              // Impure

type Int32NatOp     = bool_to_bit(BoolExpr),
                      get_size(ObjExpr),
                      get_count(table: AnyTableVar, args: Maybe[Int32Var]+, symmetric: Bool),
                      table_lookup(table: AnyTableVar, args: Maybe[Int32Var]+, symmetric: Bool),
                      cast_int32(IntExpr),
                      add32(Int32Expr, Int32Expr),
                      value_to_surr(store: AnyValueStoreId, value: <AtomicExpr, IntExpr>),
                      get_unknown_arg(iter: TableItVar, arg: <0..2>);

type FloatNatOp     = float_value(ObjExpr),
                      neg_float(FloatExpr),
                      add_floats(FloatExpr, FloatExpr),
                      sub_floats(FloatExpr, FloatExpr),
                      mult_floats(FloatExpr, FloatExpr),
                      div_floats(FloatExpr, FloatExpr),
                      exp_floats(FloatExpr, FloatExpr),
                      square_root(FloatExpr),
                      // floor_op(FloatExpr),
                      // ceiling_op(FloatExpr),
                      int_to_float(IntExpr);

type ObjNatOp       = at(seq: ObjExpr, idx: IntExpr),
                      array_at(array: ArrayVar, size: Int32Var, idx: IntExpr),
                      lookup(rel: ObjExpr, key: ObjExpr),
                      lookup_field(record: ObjExpr, field: SymbObj, repr: Maybe[LowLevelRepr]),
                      get_tag(ObjExpr),
                      get_inner_obj(ObjExpr), ## RENAME?
                      bool_obj(BoolExpr),
                      int_obj(IntExpr),
                      float_obj(FloatExpr),
                      get_curr_obj(<SetItVar, SeqItVar>),
                      get_curr_arg(var: BinRelItVar,  arg: <0..1>),
                      get_curr_arg(var: TernRelItVar, arg: <0..2>),
                      column_lookup(var: AnyTableVar, key: Int32Var),
                      get_value(var: ColumnItVar),
                      rand_elem(ObjExpr); // Non-deterministic (unless applied to a singleton)

type BoolFnCall     = is_member(pred: MembTestPredId, obj: AtomicExpr),
                      state_is_def(auto_var: AnyAutoVar, type: AutoSymbol);

type CompositeBoolExpr = neg(BoolExpr),
                         and(BoolExpr+), ## SEQUENCES OR SETS?
                         or(BoolExpr+),  ## DITTO
                         and_then(BoolExpr+),
                         or_else(BoolExpr+);

type BoolExpr       = AtomicBoolExpr, BoolNatOp, BoolFnCall, CompositeBoolExpr;

type IntExpr        = Int, IntConst, IntVar, IntNatOp;

type Int32Expr      = Int32, Int32Var, Int32NatOp;

type FloatExpr      = FloatLit, FloatVar, FloatNatOp;

type OptTagRecExpr  = OptTagRecVar, cast_opt_tag_rec(tag: Symbol, index: Nat, expr: ObjExpr);

type ObjExpr        = InlineObj, StdObjVar, ObjNatOp, OptTagRecExpr;

type AtomicExpr     = ObjExpr;

type AnyTypeExpr    = BoolExpr, IntExpr, Int32Expr, FloatExpr, ObjExpr;

type RefObjExpr     = mk_set_from_stream(stream: StreamVar),
                      mk_set(elems: VecVar, size: IntExpr),
                      mk_set_from_array(array: ArrayVar, size: Maybe[IntExpr]),
                      mk_seq_from_stream(stream: StreamVar),
                      mk_seq(elems: VecVar, size: IntExpr),
                      mk_seq_from_array(array: ArrayVar, size: Int32Expr),
                      build_const_int_seq(seq_id: Nat),
                      mk_map_from_streams(key_stream: StreamVar, value_stream: StreamVar),
                      mk_map(keys: VecVar, values: VecVar, size: IntExpr),
                      mk_bin_rel_from_streams(streams: (StreamVar, StreamVar)),
                      mk_bin_rel(cols: (VecVar, VecVar), size: IntExpr),
                      mk_bin_rel_from_arrays(col1: ArrayVar, col2: ArrayVar, size: Maybe[IntExpr], is_map: Bool),
                      mk_tern_rel_from_streams(streams: (StreamVar, StreamVar, StreamVar)),
                      mk_tern_rel(cols: (VecVar, VecVar, VecVar), size: IntExpr),
                      mk_tern_rel_from_arrays(col1: ArrayVar, col2: ArrayVar, col3: ArrayVar, size: Maybe[IntExpr]),
                      mk_tagged_obj(tag: AtomicExpr, obj: AtomicExpr), // Ownership transfer: <obj>
                      mk_record(fields: [+SymbObj -> AtomicExpr]),
                      inst_opt_tag_rec(tag: Symbol, repr_idx: Nat),
                      get_seq_slice(seq: AtomicExpr, idx_first: IntExpr, len: IntExpr),
                      append_to_seq(seq: AtomicExpr, new_elem: AtomicExpr), // Ownership transfer: <seq>, <new_elem>
                      update_seq_at(seq: AtomicExpr, idx: IntExpr, value: AtomicExpr), // Ownership transfer: <value>
                      join_seqs(left: AtomicExpr, right: AtomicExpr),
                      rev_seq(seq: AtomicExpr),
                      internal_sort(set: AtomicExpr),
                      insert_elt(set: AtomicExpr, elt: AtomicExpr),
                      remove_elt(set: AtomicExpr, elt: AtomicExpr),
                      set_key_value(map: AtomicExpr, key: AtomicExpr, value: AtomicExpr), ## OWNERSHIP TRANSFER?
                      drop_key(map: AtomicExpr, key: AtomicExpr),
                      parse_value(value: AtomicExpr),
                      print_value(value: AtomicExpr),

                      copy_state(var: AnyDBVar, type: DBSymbol),
                      copy_rel(tables: [+TableVar -> Table], applied_perm: [+Nat -> Nat]),

                      copy_persistent_state(var: AnyAutoVar, type: AutoSymbol),

                      // Can be used only once per pending variable, and does not automatically clear it,
                      // it has to be manually cleared with init_memb_var(...)
                      read_pending_var(<PendingStateVar, PendingInputVar>),
                      surr_to_value(store: AnyValueStoreId, surrogate: Int32Var); ## THIS SHOULD BELONG IN ObjNatOp, NOT HERE...

type BasicInstr     = init_stream(StreamVar),
                      append(stream: StreamVar, obj: AtomicExpr),  // Ownership transfer: <obj>

                      array_alloc(var: ArrayVar, size: Int32Expr),
                      array_write(var: ArrayVar, idx: Int32Expr, value: AnyTypeExpr),
                      array_append(array_var: ArrayVar, size_var: Int32Var, value: AnyTypeExpr),
                      array_set_var(target: ArrayVar, source: ArrayVar),

                      write_rec_field(var: LocOptTagRecVar, label: Symbol, value: AnyTypeExpr, optional: Bool),
                      finish_init(var: LocOptTagRecVar),

                      get_seq_iter(var: SeqItVar, src: AtomicExpr),
                      get_set_iter(var: SetItVar, src: AtomicExpr),
                      get_bin_rel_iter(var: BinRelItVar, src: AtomicExpr, args: (Maybe[AtomicExpr], Maybe[AtomicExpr])),
                      get_tern_rel_iter(var: TernRelItVar, src: AtomicExpr, args: (Maybe[AtomicExpr], Maybe[AtomicExpr], Maybe[AtomicExpr])),

                      move_forward(ItVar),

                      set_var(var: <WriteObjVar, LocOptTagRecVar, ImplArg>, value: ObjExpr),
                      set_bvar(var: BoolVar, value: BoolExpr),
                      set_ivar(var: IntVar, value: IntExpr),
                      set_ivar32(var: Int32Var, value: Int32Expr),
                      set_fvar(var: FloatVar, value: FloatExpr),

                      set_rc_var(var: <WriteObjVar, LocOptTagRecVar>, value: RefObjExpr),

                      init_memb_var(var: <MembVar, SignalVar, PrevVarValue, MembObjVar, PendingInputVar, PendingStateVar>, new_state: <blank, undefined>),
                      reset_memb_var(var: <SignalVar, PrevVarValue, MembVar, PendingInputVar>, new_state: <blank, undefined>),

                      clear_loc_var(LocVar), ## BAD: I DON'T LIKE THE ABILITY TO CLEAR A NON-MEMBER VARIABLE
                      nullify_var(<StdVar, LocVar, LocOptTagRecVar>),

                      add_ref(ObjVar),
                      release(<ObjVar, PendingInputVar>),

                      print_obj(obj: AtomicExpr),

                      no_op,

                      call_proc(
                        var:              AnyWriteVar?,
                        name:             ObjFnName,
                        args:             AnyTypeExpr*,
                        cls_args:         AnyLambdaExpr*,
                        rel_auto_args:    LocDBVar*,
                        react_auto_args:  LocAutoVar*
                      ),
                      call_cls(var: WriteObjVar, cls_var: AnyClsVar, args: AtomicExpr+),

                      push_call_info(fn_name: <FnId, ProcSymbol, MethodSymbol>, args: ObjExpr*),
                      pop_call_info,

                      log_runtime_failure(
                        is_assert: Bool,
                        file: String,
                        line: NzNat,
                        text: Maybe[String],
                        vars: (<StdVar, ImplArg>, ObjExpr)*
                      ),

                      queue_update(type: AutoSymbol, id: BlockNodeId, args: Nat*),

                      insert_timer(type: AutoSymbol, idx: Nat, time: IntExpr),
                      clear_timer(type: AutoSymbol, idx: IntExpr),

                      auto_pre_init(var: AnyAutoVar, type: AutoSymbol),
                      auto_cleanup(var: AnyAutoVar, type: AutoSymbol),

                      set_input(var: AnyAutoVar, type: AutoSymbol, input: Symbol, value: AtomicExpr),
                      clear_input(var: AnyAutoVar?, type: AutoSymbol, input: Symbol),

                      auto_init(var: AnyAutoVar?, type: AutoSymbol),
                      auto_update_node(type: AutoSymbol, node: BlockNodeId, time_var: IntVar?),
                      auto_apply(var: AnyAutoVar?, type: AutoSymbol),

                      set_persistent_state(auto_var: AnyAutoVar, state: AtomicExpr, type: AutoSymbol),

                      init_db(db_var: AnyDBVar, links: LocDBVar*, type: DBSymbol),
                      cleanup_db(db_var: AnyDBVar, type: DBSymbol),
                      send_msg(db_var: AnyDBVar, type: DBSymbol, msg: AtomicExpr, is_root: Bool, res_var: BoolVar?),
                      try_update(type: DBSymbol, update_id: UpdateId, args: AtomicExpr*),
                      set_state(res_var: BoolVar, db_var: AnyDBVar, state: AtomicExpr, type: DBSymbol),

                      invoke_auto_method(
                        res_var:    WriteObjVar,
                        auto_var:   AnyAutoVar?,
                        type:       AutoSymbol,
                        method_id:  MethodId,
                        args:       AtomicExpr*
                      ),

                      invoke_db_method(
                        res_var:    AnyWriteVar,
                        db_var:     AnyDBVar?,
                        type:       DBSymbol,
                        method_id:  MethodId,
                        args:       AnyTypeExpr*
                      ),

                      // Table instructions
                      init_value_store(store: ValueStoreId),
                      cleanup_value_store(store: ValueStoreId),
                      init_table(table_var: TableVar, table: Table),
                      cleanup_table(table_var: TableVar, table: Table),

                      get_table_iter(it_var: TableItVar, table: AnyTableVar, args: Maybe[Int32Var]+),
                      get_column_iter(it_var: ColumnItVar, column: AnyTableVar),
                      queue_deletes(table_var: TableVar, args: Maybe[Int32Var]+, symmetric: Bool),
                      lookup_or_queue_insert_value(res_var: Int32Var, store: ValueStoreId, value: <AtomicExpr, IntExpr>), // Ownership transfer: <value>
                      queue_insert_tuple(table_var: TableVar, tuple: Int32Var+),

                      immediate_insert_or_add_ref(res_var: Int32Var, store: ValueStoreId, value: <AtomicExpr, IntExpr>),
                      immediate_insert_tuple(table_var: TableVar, tuple: Int32Var+);

type JumpInstr      = break_loop,
                      exit_block,
                      ## MAYBE IT WOULD BE A GOOD IDEA TO SEPARATE THE BOOLEAN FROM THE OBJECT VERSION
                      ## ALSO, THE BOOLEAN VERSION DOESN'T NEED TO USE AN ATOMIC EXPRESSION, IT CAN USE THE FULL ONE, CAN'T IT?
                      ret_val(AnyTypeExpr),
                      terminate(hard_fail: Bool);

type CompInstr      = branch(cond: BoolExpr, when_true: Instr+, when_false: Instr*),
                      switch_on_nat(value: IntExpr, cases: Instr*+),
                      symb_switch(value: ObjExpr, cases: [+([+SymbObj], Instr+)], else: Instr*),
                      repeat(Instr+),
                      execute_block(Instr+),
                      try_block(var: LocVar, body: Instr+),
                      ForeachInstr;

type ForeachInstr   = foreach(
                        seq:        <LocVar, StdVar>,
                        src_array:  ArrayVar,
                        tmp_buffer: ArrayVar?,
                        count_var:  Int32Var,
                        idx_var:    Int32Var,
                        it_var:     AnyLocVar,
                        body:       Instr*
                      );

type Instr          = BasicInstr, JumpInstr, CompInstr;

type CaptClsVar     = capt_cls_var(Nat);
type AnyClsVar      = ClsVar, CaptClsVar;

type ClsDef         = cls_def(arity: NzNat, body: Instr+);

type LambdaExpr     = lambda_expr(
                        cls:            ClsDef,
                        capt_auto:      Maybe[DBSymbol],
                        capt_vars:      ObjExpr*,
                        capt_cls_vars:  AnyClsVar*
                      );

type AnyLambdaExpr  = AnyClsVar, LambdaExpr;

type ObjProcArg     = StdVar, FnArg, LocBoolVar, BoolFnArg, LocIntVar, IntFnArg, LocFloatVar,
                      FloatFnArg, LocOptTagRecVar, OptTagRecFnArg;

type ClsProcArg     = cls(var: ClsVar, arity: NzNat);

type ObjProcDef     = obj_proc_def(
                        name:             ObjFnName,
                        args:             ObjProcArg*,
                        cls_args:         ClsProcArg*,
                        impl_args:        [ImplArg],
                        rel_auto_args:    (var: LocDBVar, type: DBSymbol)*,
                        react_auto_args:  (var: LocAutoVar, type: AutoSymbol)*,
                        ret_val_repr:     AnyLowLevelRepr,
                        type:             FnType?,
                        loc_vars_types:   [StdVar -> NeType],
                        loc_auto_vars:    [LocAutoVar -> AutoSymbol],
                        loc_db_vars:      [LocDBVar -> DBSymbol],
                        body:             Instr+,
                        cached:           Bool
                      );

type BoolProcDef    = bool_proc_def(
                        name:  MembTestPredId,
                        arity: NzNat,
                        body:  Instr+
                      );

type ProcDef        = ObjProcDef, BoolProcDef;

type ConstBlockData = time_slots_len(expr_id: Symbol, lengths: Nat+);

type StdBlockNodeId         = std_block_node_id(Symbol);
type CondNodeId             = cond_node_id(Nat);
type NestedAutoNodeId       = nested_auto_node_id(Symbol);
type NestedAutoInputNodeId  = nested_auto_input_id(auto: Symbol, input: Symbol);

type BlockNodeId    = StdBlockNodeId, CondNodeId, NestedAutoNodeId, NestedAutoInputNodeId;

type ValueStoreId       = value_store_id(Nat);
type NestedValueStoreId = nested_value_store_id(db_var: AnyDBVar, store_id: ValueStoreId);
type CaptValueStoreId   = capt_value_store_id(ValueStoreId);
type AnyValueStoreId    = ValueStoreId, NestedValueStoreId, CaptValueStoreId;

type ValueStoreType = object, integer, mono_tagged_integer(Symbol);

type Table  = table(
                value_stores: ValueStoreId+,
                keys:         [[+Nat]],
                col_types:    NeType+,
                symmetric:    Bool
              );

type ColumnType = object, integer, float;

type Column = column(value_store: ValueStoreId, type: ColumnType, col_types: (NeType, NeType));

type ForeignKeyType = unary_unary, unary_binary(<0..1>), unary_ternary(<0..2>),
                      binary_unary(<0..1>), ternary_unary(<0..2>),
                      binary_ternary, ternary_binary,
                      unary_sym_binary, unary_sym_ternary,
                      sym_binary_unary, sym_ternary_unary,
                      sym_binary_sym_ternary, sym_ternary_sym_binary;


type BlockForeignKey  = foreign_key(origin: TableVar, target: TableVar, type: ForeignKeyType);

type CompiledMethod = compiled_method(
                        args_vars:        Maybe[StdVar]*,
                        args_types:       NeType*,
                        args_memb_preds:  [+MembTestPredId*],
                        ret_type:         NeType,
                        code:             Instr*
                      );

type OptCompMethod  = opt_comp_method(
                        args:             ObjProcArg*, ## WHAT HAPPENS IF THE NAME OF THE ARGUMENT IS MISSING?
                        args_types:       NeType*, ## PROBABLY NEEDED FOR THE WRAPPER CLASSES
                        args_memb_preds:  [+MembTestPredId*], ## BAD BAD BAD
                        loc_vars_types:   [StdVar -> NeType],
                        ret_type:         NeType,
                        ret_val_repr:     AnyLowLevelRepr,
                        body:             Instr*
                      );

type CompiledUpdate = compiled_update(args_vars: <StdVar, FnArg>*, body: Instr*);

type ReactBlock = react_block(
                    name:                 AutoSymbol,
                    ord_inputs:           Symbol*,
                    ord_outputs:          Symbol*,
                    input_memb_preds:     [Symbol -> MembTestPredId],
                    inputs:               [Symbol -> (type: NeType, discrete: Bool)],
                    outputs:              [Symbol -> (type: NeType, discrete: Bool)],
                    memb_vars:            [<SignalVar, MembObjVar, PendingInputVar, MembIntVar, MembIntVectVar, MembBoolVar>],
                    nested_auto_vars:     [NestedAutoVar -> AutoSymbol],
                    nested_static_blocks: [NestedDBVar -> DBSymbol],
                    pre_init_code:        Instr*,
                    cleanup_code:         Instr*,
                    apply_code:           Instr*,
                    nodes_update_code:    [BlockNodeId -> Instr*],
                    queue_update_code:    [BlockNodeId -> (body: Instr*, args: IntVar*)],
                    state_is_def_code:    Instr*,
                    copy_state_code:      Instr*,
                    set_state_code:       Instr*,
                    methods:              [MethodId -> CompiledMethod],
                    const_data:           [ConstBlockData],
                    time_rules_count:     Nat,
                    state_memb_pred:      MembTestPredId
                  );

type StaticBlock = static_block(
                    name:                         DBSymbol,
                    links:                        DBSymbol*,
                    state_vars:                   [MembVar -> NeType],
                    value_stores:                 [ValueStoreId -> ValueStoreType],
                    tables:                       [TableVar -> <Table, Column>],
                    insert_checked_foreign_keys:  [BlockForeignKey],
                    delete_checked_foreign_keys:  [BlockForeignKey],
                    nested_blocks:                [NestedDBVar -> DBSymbol],
                    init_code:                    Instr*,
                    cleanup_code:                 Instr*,
                    copy_state_code:              Instr*,
                    set_state_code:               Instr*,
                    foreign_keys_check_code:      Instr*,
                    methods:                      [MethodId -> OptCompMethod],
                    updates:                      [UpdateId -> CompiledUpdate],
                    accessors:                    [MethodId -> CompiledMethod],
                    msg_memb_pred:                Maybe[MembTestPredId] ## REPLACE THE MAYBE WITH A NULL OBJECT?
                  );

type CompiledPrg  = compiled_prg(
                      typedefs:       [TypeName -> NeType],
                      opt_reprs:      [Symbol -> OptRecRepr+],
                      bool_procs:     [BoolProcDef],
                      procs:          [ObjProcDef],
                      react_blocks:   [ReactBlock],
                      static_blocks:  [StaticBlock],
                      int_seqs:       Int+*
                    );