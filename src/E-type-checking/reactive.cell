implicit program : Program, typedefs : [TypeName -> NeType] {
  [<Automaton, Method> -> [+TypeCheckingError]] typecheck_automaton(Automaton auto) =
    typecheck_automaton(context=auto, var_aliases=[], typed_vars=[]);
}


implicit program : Program, typedefs : [TypeName -> NeType], context : Automaton, var_aliases : [], typed_vars : [] {
  [<Automaton, Method> -> [+TypeCheckingError]] typecheck_automaton {
    // Typechecking and inferring type of constants
    consts = context.params;
    consts_vars = [id -> type_dependencies(info.value) : id, info <- consts];
    expl_consts_types = [id -> info.type : id, info <- consts, info.type?];

    consts_ids = keys(consts);
    curr_env = expl_consts_types;
    while consts_ids != []:
      ready_consts = [c : c <- consts_ids, not (v <- consts_vars[c] : not curr_env(v, *))];
      return [context -> [auto_typechecking_cycle(context.name, consts_ids)]] if ready_consts == [];
      errs = union([
        typecheck(info.value, if info.type? then info.type else type_any, curr_env)
        : c <- ready_consts, info = consts[c]
      ]);
      return [context -> errs] if errs != [];
      env_delta = [c -> expr_type(consts[c].value, curr_env) : c <- ready_consts, not curr_env(c, *)];
      curr_env = curr_env & env_delta;
      consts_ids = consts_ids - ready_consts;
    ;

    // All explicitly declared types, except for outputs
    inputs_types      = [id -> info.type : id, info <- context.inputs];
    state_vars_types  = [id -> info.type : id, info <- context.state];
    time_rules_types  = [id -> type_bool : id, unused_var <- context.time_rules];

    expl_types = inputs_types & state_vars_types & time_rules_types;

    // Typechecking and inferring types of rules
    rules = context.rules;
    rules_vars = [id -> type_dependencies(expr) : id, expr <- rules];

    rule_ids = keys(rules);
    curr_env = curr_env & expl_types;
    while rule_ids != []:
      ready_rules = [r : r <- rule_ids, not (v <- rules_vars[r] : not curr_env(v, *))];
      return [context -> [auto_typechecking_cycle(context.name, rule_ids)]] if ready_rules == [];
      errs = union([typecheck(rules[r], type_any, curr_env) : r <- ready_rules]);
      return [context -> errs] if errs != [];
      env_delta = [r -> expr_type(rules[r], curr_env) : r <- ready_rules];
      assert disjoint(keys(curr_env), keys(env_delta));
      curr_env = curr_env & env_delta;
      rule_ids = rule_ids - ready_rules;
    ;

    // Typechecking and inferring types of discrete rules
    discrete_rules = context.discrete_rules;
    discrete_rules_vars = [id -> union([type_dependencies(r) : r <- rs]) : id, rs <- discrete_rules];

    discrete_rules_ids = keys(discrete_rules);
    while discrete_rules_ids != []:
      ready_rules = [r : r <- discrete_rules_ids, not (v <- discrete_rules_vars[r] : not curr_env(v, *))];
      return [context -> [auto_typechecking_cycle(context.name, discrete_rules_ids)]] if ready_rules == [];

      ## THIS CAUSED THE TYPECHECKER TO CRASH. SEE crash-08.ar FOR DETAILS.
      ## RESTORE ONCE BUG IS FIXED
      // errs = union([
      //   typecheck_guarded_expr(r.value, r.cond.cond, type_any, curr_env)
      //   : id <- ready_rules, r <- discrete_rules[id]
      // ]);

      ## THIS IS A WORKAROUND FOR A TYPECHECKING BUG
      errs = union([
        union([typecheck_guarded_expr(r.value, r.cond.cond, type_any, curr_env) : r <- discrete_rules[id]])
        : id <- ready_rules
      ]);

      return [context -> errs] if errs != [];
      env_delta = [id -> union_superset([expr_type(r.value, curr_env) : r <- discrete_rules[id]]) : id <- ready_rules];
      assert disjoint(keys(curr_env), keys(env_delta));
      curr_env = curr_env & env_delta;
      discrete_rules_ids = discrete_rules_ids - ready_rules;
    ;

    // Now that we have the type of all member variables, we can typecheck all the remaining expressions
    errs = union([
      // Initial value of all state variables
      union([typecheck(sv.init_value, sv.type, curr_env) : unused_var, sv <- context.state]),

      // State variable updates
      union([
        typecheck(u.value, sv.type, curr_env) & typecheck(u.cond.cond, type_bool, curr_env)
        : unused_var, sv <- context.state, u <- sv.updates
      ]),

      // Time-varying conditions
      union([typecheck_time_rule(tvc, curr_env) : unused_var, tvc <- context.time_rules]),

      // Nested automata inputs
      union([typecheck_nested_auto_inputs(info.type, info.args, curr_env) : unused_var, info <- context.nested_autos]),

      // Nested static automata message sends
      union([
        typecheck_guarded_expr(rule.message, rule.cond.cond, db_msg_type(db.type), curr_env)
        : unused_var, db <- context.nested_dbs, db.msg_send_rule?, rule = db.msg_send_rule
      ])
    ]);
    return [context -> errs] if errs != [];

    // Checking all outputs have the right type
    errs = [
      invalid_output_type(bare_id(id), actual_type, info.type)
      : id, info <- context.outputs, actual_type = curr_env[id], not is_subset(actual_type, info.type)
    ];
    return [context -> errs] if errs != [];

    // Typechecking methods
    return [m -> es : m <- context.methods, es = typecheck_auto_method(m, curr_env), es != []];


    [TypeCheckingError] typecheck_guarded_expr(Expr expr, Expr cond, Type exp_type, [EnvVar -> Type] env) {
      errs = typecheck(cond, type_bool, env);
      return errs if errs != [];
      new_env, unused_var = refine_env(cond, env);
      return typecheck(expr, exp_type, new_env);
    }
  }


  [TypeCheckingError] typecheck_time_rule(TimeRule rule, [EnvVar -> Type] env) =
    boolean_time_rule()   = typecheck(rule.expr, type_bool, env),
    unchanged_time_rule() = typecheck(rule.expr, type_any, env),
    since_time_rule()     = [];


  [TypeCheckingError] typecheck_nested_auto_inputs(AutoSymbol auto_type, [Atom -> Expr] args, [EnvVar -> Type] env) {
    inputs = automaton_by_id(auto_type).inputs;
    return union([typecheck(e, inputs[signal_var(i)].type, env) : i, e <- args]);
  }


  [TypeCheckingError] typecheck_auto_method(Method method, [EnvVar -> Type] env) {
    aliases = [[fn_arg(i), value(v)] : unused_var, v @ i <~ method.args, v != nothing];
    env_delta = merge([[fn_arg(i) -> t, value(v) -> t if v != nothing] : t, v @ i <~ method.args]);
    return typecheck(method.expr, method.ret_type, env & env_delta, var_aliases = aliases);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[SignalVar] type_dependencies(DiscreteRule rule) = type_dependencies(rule.value) & type_dependencies(rule.cond.cond);


[SignalVar] type_dependencies(Expr expr) {
  return union([dependencies(v) : v <- auto_expr_extern_vars(expr)]);

  [SignalVar] dependencies(SignalVar v)     = [v];
  [SignalVar] dependencies(PrevVarValue v)  = dependencies(target_var(v));
  []          dependencies(<QualMembVar, QualSignalVar>) = [];
}
