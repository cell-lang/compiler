implicit program : Program {
  ## DEPRECATED: REPLACE WITH rel_auto_by_id()
  Database automaton_by_id(DBSymbol rel_auto_id) = rel_auto_by_id(rel_auto_id);

  Database rel_auto_by_id(DBSymbol rel_auto_id) =
    rel_autos_by_id(rel_auto_id, !!);
}


implicit program : Program, typedefs : [TypeName -> NeType] {
  NzNat arity(DBSymbol rel_auto_id, RelVar rel_var) {
    signatures = rel_autos_by_id(rel_auto_id, !!).rel_vars(rel_var).signatures;
    return only([|s| : s <- signatures]); ## BAD BAD BAD: THIS THING IS PRETTY UGLY AND UNSAFE...
  }


  Bool symmetric(DBSymbol rel_auto_id, RelVar rel_var) =
    rel_autos_by_id(rel_auto_id, !!).rel_vars(rel_var).symmetric;

  [[+Nat]] rel_var_keys(DBSymbol rel_auto_id, RelVar rel_var) =
    rel_auto_by_id(rel_auto_id).rel_vars(rel_var).keys;


  [[+Nat]] table_var_keys(DBSymbol rel_auto_id, TableVar table_var) {
    rel_var = logical_rel_var(table_var);
    log_keys = rel_var_keys(rel_auto_id, rel_var);
    perm = rel_var_cols_perm(rel_auto_id, rel_var);
    return permutate_keys(log_keys, perm);
  }


  ValueStoreId table_col_store_id(DBSymbol rel_auto_id, TableVar rel_var, Nat col_idx) =
    tables_by_db(rel_auto_id, !!)(rel_var).value_stores(col_idx);


  // The arguments must be in the logical order, not in the physical one
  [+TableVar] overlapping_physical_tables(DBSymbol rel_auto_id, RelVar var, Maybe[Type]+ log_args_types) {
    tables = physical_tables(rel_auto_id, unqualified(var));
    phys_args_types = logical_to_physical_order(rel_auto_id, var, log_args_types);
    return nonempty([
      t : t <- tables,
          sgns = table_signatures(rel_auto_id, t),
          any_signature_overlaps_partial_signature(sgns, phys_args_types)
    ]);
  }

  //////////////////////////////////////////////////////////////////////////////

  ## IS THIS IN THE RIGHT PLACE?
  T+ logical_to_physical_order(DBSymbol rel_auto_id, RelVar rel_var, T+ logical_values) {
    applied_perm = rel_var_cols_perm(rel_auto_id, rel_var);
    assert |logical_values| == |applied_perm|;
    return (logical_values(i) : i <- applied_perm);
  }

  //////////////////////////////////////////////////////////////////////////////

  ## TODO: CHANGE THE NAME IN message_type()
  Type db_msg_type(DBSymbol type) = msg_type_by_db(type, !!);


  [+NeType*] update_signatures(DBSymbol rel_auto_id, UpdateSymbol update_id) =
    updates_signatures_by_rel_auto_update(rel_auto_id, !!)(update_id);


  [NeType*] update_aggregate_signatures(DBSymbol rel_auto_id, UpdateSymbol update_id) =
    aggregated_signatures_by_rel_auto_update(rel_auto_id, !!)(update_id);


  [NeType+] relvar_aggregated_signatures(DBSymbol rel_auto_id, RelVar rel_var) =
    aggregated_signatures_by_rel_var(rel_auto_id, !!)(rel_var);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program {
  [DBSymbol -> Database] rel_autos_by_id = [db.name -> db : db <- program.data_bases];


  [DBSymbol -> Type] msg_type_by_db = [
    db.name -> union_superset([h.type : h <- db.handlers]) : db <- program.data_bases
  ];
}

////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType] {
  [DBSymbol -> [UpdateSymbol -> [NeType*]]] aggregated_signatures_by_rel_auto_update = [
    db -> [u -> aggregated_relation_signatures(ss) : u, ss <- us]
    : db, us <- updates_signatures_by_rel_auto_update
  ];


  [DBSymbol -> [UpdateSymbol -> [+NeType*]]] updates_signatures_by_rel_auto_update = [
    db.name -> merge_values([[u.name -> (t : t, unused_var <- u.args)] : u <- db.updates])
    : db <- program.data_bases
  ];


  [DBSymbol -> [RelVar -> [NeType+]]] aggregated_signatures_by_rel_var = [
    db.name -> [v -> aggregated_relation_signatures(info.signatures) : v, info <- db.rel_vars]
    : db <- program.data_bases
  ];


  ## DEPRECATED
  [DBSymbol -> [TableVar -> Table]] tables_by_db = [
    db.name -> tables_info(database=db) : db <- program.data_bases
  ];
}
