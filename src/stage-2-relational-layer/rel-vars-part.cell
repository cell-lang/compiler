implicit program : Program, typedefs : [TypeName -> NeType] {
  Result[([PhysRelVar -> NeType+], [ForeignKey]), ForeignKey]
  try_to_split([PhysRelVar -> NeType+] initial_rel_vars, [ForeignKey] initial_foreign_keys, [RelVar -> [[+Nat]]] rel_vars_keys) {
    rel_vars = initial_rel_vars;
    foreign_keys = initial_foreign_keys;

    loop {
      // If no foreign key targets multiple physical relvars then we're done
      done = not (k <- foreign_keys : |k.target_rel_vars| != 1);
      return success((rel_vars, foreign_keys)) if done;

      // Picking any of the keys with multiple targets
      split_key = an_elem(nonempty([k : k <- foreign_keys, |k.target_rel_vars| != 1]));

      // Using the chosen key to split a relation
      res = split_by(rel_vars, split_key);
      return failure(split_key) if res == nothing;
      split_rel_var, pieces = value(res);

      // Making sure that the split is compatible the relvar's keys
      arity = |rel_vars(split_rel_var)|;
      rel_var_keys = rel_vars_keys(logical_rel_var(split_rel_var));
      for v1, v2 <- isort(symmetric_cart_prod(keys(pieces))) {
        sgn1 = pieces(v1);
        sgn2 = pieces(v2);
        for k <- isort(rel_var_keys) {
          subsgn1 = nonempty((sgn1(i) : i < arity, k(i)));
          subsgn2 = nonempty((sgn2(i) : i < arity, k(i)));
          return failure(split_key) if not are_ptype_disjoint(subsgn1, subsgn2);
        }
      }

      // Rewriting the sets of relvars and foreign keys
      foreign_keys = union([rewrite_foreign_key(k, split_rel_var, pieces, rel_vars) : k <- foreign_keys]);
      rel_vars = remove_key(rel_vars, split_rel_var) & pieces;
    }


    [+ForeignKey] rewrite_foreign_key(ForeignKey key, PhysRelVar rel_var, [PhysRelVar -> NeType+] split_rel_vars, [PhysRelVar -> NeType+] rel_vars) {
      if key.source_rel_var == rel_var {
        if key.target_rel_vars(rel_var) {
          ## CAN A FOREIGN KEY FROM ONE RELVAR TO ITSELF HAVE ANY PRACTICAL APPLICATION?
          ## CAN'T WE JUST EXCLUDE THIS WEIRD CASE IN THE ERROR CHECKING PROCESS?
          fail;
        }
        else {
          subkeys = ();
          for v, s <- isort(split_rel_vars) {
            // For each relvar in the split set, we compute a partial signature for the target,
            // and then select only the relvars in the target set that overlap with it
            src_vars_types = [value(a) -> s(i) : a @ i <- key.source_args, a != nothing];
            tgt_sgn = (apply(a, src_vars_types($)) : a @ i <- key.target_args);
            tgt_rel_vars = [tv : tv <- key.target_rel_vars, signature_overlaps_partial_signature(rel_vars(tv), tgt_sgn)];
            fail if tgt_rel_vars == []; ## CAN THIS ACTUALLY HAPPEN?
            subkey = foreign_key(v, key.source_args, tgt_rel_vars, key.target_args);
            subkeys = (subkeys | subkey);
          }
          return set(nonempty(subkeys));
        }
      }
      else {
        if key.target_rel_vars(rel_var) {
          tgt_rel_vars = nonempty((key.target_rel_vars - [rel_var]) & keys(split_rel_vars));
          return [foreign_key(key.source_rel_var, key.source_args, tgt_rel_vars, key.target_args)];
        }
        else {
          return [key];
        }
      }
    }

    // type ForeignKey = foreign_key(
    //                     source_rel_var:   PhysRelVar,
    //                     source_args:      Maybe[Symbol]+,
    //                     target_rel_vars:  [+PhysRelVar],
    //                     target_args:      Maybe[Symbol]+
    //                   );

    Maybe[(PhysRelVar, [PhysRelVar -> NeType+])] split_by([PhysRelVar -> NeType+] rel_vars, ForeignKey key) {
      target_sgns           : [PhysRelVar -> NeType+];
      vars_types_by_target  : [PhysRelVar -> [+Symbol -> NeType]];
      diff_idxs             : [Nat -> [PhysRelVar -> NeType]];
      split_rel_vars        : [+PhysRelVar -> NeType+];


      // Signature of each target
      target_sgns = [v -> rel_vars(v) : v <- key.target_rel_vars];

      // Types of the variables by target
      vars_types_by_target = [
        v -> nonempty_map([value(a) -> s(i) : a @ i <- key.target_args, a != nothing])
        : v s <- target_sgns
      ];

      // Indexes of the argument that are different for each target
      diff_idxs = [];
      for a @ i <- key.source_args {
        if a != nothing {
          symb = value(a);
          types_by_target = [v -> ts(symb) : v ts <- vars_types_by_target];
          types = nonempty(values(types_by_target));
          a_type = an_elem(types);
          if (t <- types : not is_eq(t, a_type))
            diff_idxs = diff_idxs & [i -> types_by_target];
        }
      }

      // If there's more than one argument whose type depends on the target we just give up
      return nothing if |diff_idxs| != 1;

      ## THE KEYS IN diff_idxs ARE THE INDEXES OF THE TARGET OR THE SOURCE?

      // Discarding all targets that are not in the "image" of the source
      diff_idx, types_by_target = only_unsafe(isort(diff_idxs));
      src_rel_var = key.source_rel_var;
      source_sgn = rel_vars(src_rel_var);
      src_type = source_sgn(diff_idx);
      overlapping_types_by_target = [v -> t : v t <- types_by_target, not are_ptype_disjoint(t, src_type)];

      // If the source can reach only one of the targets, then there's no need to split anything
      // We just do a "pretend" split that doesn't split anything
      return just((src_rel_var, [src_rel_var -> rel_vars(src_rel_var)])) if |overlapping_types_by_target| == 1;

      // Checking that all types are disjoint
      ord_targets, ord_types = unzip(isort(overlapping_types_by_target));
      for t1 @ i1 <- ord_types {
        for i2 = i1+1 .. |ord_types|
          return nothing if not are_ptype_disjoint(t1, ord_types(i2));
      }

      // If the union of the target-specific types is the source type then we're jolly
      union_type = ne_union_superset(nonempty(values(overlapping_types_by_target)));
      if not is_eq(src_type, union_type) {
        ## HERE WE CAN DO BETTER THAN THIS
        return nothing;
      }

      // Splitting the source relvar
      split_rel_vars = [
        split_rel_var(src_rel_var, i) -> (if j == diff_idx then t else ot : ot @ j <- source_sgn)
        : t @ i <- nonempty(ord_types)
      ];

      return just((src_rel_var, split_rel_vars));
    }
  }
}