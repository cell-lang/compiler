
Result[PrgDecl*, <LexerError, ParError, ParserError>] lex_and_parse_src_file(String filename, Nat* chars) {
  lex_res = lex_src_file(chars);
  return failure(get_error(lex_res)) if is_failure(lex_res); ## BAD: TO SHUT UP THE TYPECHECKER IT HAS TO BE failure(get_error(lex_res)) INSTEAD OF JUST lex_res
  tokens = get_result(lex_res);

  return success(()) if tokens == ();

  rec_rules = (
    type:             rule_type,
    pretype:          rule_pretype,
    expr:             rule_expr,
    data:             rule_data_expr,
    stmt_pure:        rule_stmt(:pure),
    stmt_auto_method: rule_stmt(:auto_method),
    stmt_db_method:   rule_stmt(:db_method),
    stmt_update:      rule_stmt(:update),
    stmt_proc:        rule_stmt(:proc),
    ptrn:             rule_ptrn,
    basic_time_expr:  rule_basic_time_expr
  );

  maybe_err = parentheses_error(tokens);
  return failure(value(maybe_err)) if maybe_err != nothing;

  parser_res = parse_all(rule_amber_file, tokens, rec_rules);
  return failure(get_error(parser_res)) if is_failure(parser_res); ## BAD: SEE ABOVE COMMENT
  parser_match = get_result(parser_res);
  return success(build_amber_file_ast(parser_match.rule_match, filename, split_lines(chars)));
}

////////////////////////////////////////////////////////////////////////////////

type ParError       = parenthesis_not_closed(AnnotatedToken),
                      parenthesis_not_opened(AnnotatedToken),
                      mismatched_parenthesis(left: AnnotatedToken, right: AnnotatedToken);

////////////////////////////////////////////////////////////////////////////////

ParError parenthesis_not_closed(AnnotatedToken p)                    = :parenthesis_not_closed(p);
ParError parenthesis_not_opened(AnnotatedToken p)                    = :parenthesis_not_opened(p);
ParError mismatched_parenthesis(AnnotatedToken l, AnnotatedToken r)  = mismatched_parenthesis(left: l, right: r);

////////////////////////////////////////////////////////////////////////////////

Maybe[ParError] parentheses_error(AnnotatedToken* tokens) {
  par_stack = empty_stack;
  for at <- tokens:
    t = at.token;
    if t == left_parenthesis or t == left_bracket or t == left_brace:
      par_stack = push(par_stack, at);
    elif t == right_parenthesis or t == right_bracket or t == right_brace:
      return just(parenthesis_not_opened(at)) if par_stack == empty_stack;
      last_par = peek(par_stack);
      ## SHOULD FIND A WAY TO MAKE THIS SYNTACTLY PALATABLE
      return just(mismatched_parenthesis(last_par, at)) if match (last_par.token, t) left(pt1?), right(pt2?) = pt1 != pt2;
      par_stack = pop(par_stack);
    ;
  ;
  return if par_stack != empty_stack then just(parenthesis_not_closed(peek(par_stack))) else nothing;
}
