implicit syn_prg : SynPrg, artifact : Artifact, impl_args : [ImplArg], actual_arg_arity : Nat {
  ExprWFError* root_stmt_block_wf_errors(SynStmt+ stmts, (Atom, SynType)* typed_vars, [DefVar] ext_vars, Bool has_ret_val, Bool allow_proc_calls) {
    type_vars = match (artifact)
      top_level_fn_def()  |
      nested_fn_def()     = syn_type_vars(artifact.fndef),
      _                   = [];
    errs = ();
    for v, t @ i <- typed_vars {
      is_already_def = any((left(typed_vars(j)) == v : j < i)) or already_def(v, ext_vars);
      errs = (errs | vars_redef(typed_vars(i), [var(v)])) if is_already_def;
      errs = errs & param_type_wf_errors(t, def_type_vars);
    }
    return errs if errs != ();
    typed_loc_vars = [v : (v, _) <- typed_vars];
    let typed_loc_vars = typed_loc_vars, allow_proc_calls = allow_proc_calls {
      let has_return_value = has_ret_val, stmt_stack = ()
        errs = errs & stmts_wf_errors(stmts, ext_vars, []);
    }
    return if errs != () then errs else (missing_ret_stmt(stmts) if has_ret_val and syn_may_fall_through(stmts));
  }
}


implicit {
  syn_prg           : SynPrg,
  artifact          : Artifact,
  impl_args         : [ImplArg],
  typed_loc_vars    : [Atom],
  actual_arg_arity  : Nat,
  allow_proc_calls  : Bool,
  has_return_value  : Bool,
  stmt_stack        : <loop, let>*;


  ExprWFError* stmts_wf_errors(SynStmt+ stmts, [DefVar] ro_vars, [StdVar] rw_vars) {
    curr_rw_vars = rw_vars;
    for s @ i <- stmts {
      errs = stmt_wf_errors(s, ro_vars, curr_rw_vars);
      return errs if errs != ();
      new_vars = syn_new_vars(s);
      fail if not new_vars :: [StdVar]; ## BAD BAD BAD: FIX THIS
      curr_rw_vars = curr_rw_vars & new_vars;
      return (unreachable_stmt(stmts(i+1))) if not syn_may_fall_through(s) and i + 1 < |stmts|;
    }
    return ();
  }


  ExprWFError* stmt_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    errs = stmt_local_wf_errors(stmt, ro_vars, rw_vars);
    errs = stmt_nested_wf_errors(stmt, ro_vars, rw_vars) if errs == ();
    return (attach_anchor_obj_if_needed(e, stmt) : e <- errs);
  }


  ExprWFError* stmt_nested_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    all_vars = ro_vars & rw_vars;
    return match (stmt)
      assignment_stmt()       = expr_wf_errors(stmt.value, all_vars),
      return_stmt(e?)         = expr_wf_errors(e, all_vars),
      if_stmt()               = if_stmt_wf_errors(stmt, ro_vars, rw_vars, all_vars),
      loop_stmt()             = loop_stmt_wf_errors(stmt.cond, stmt.skip_first, stmt.body, ro_vars, rw_vars, all_vars),
      inf_loop_stmt(ss?)      = stmts_wf_errors(ss, ro_vars, rw_vars, stmt_stack = (stmt_stack | :loop)),
      for_stmt()              = for_stmt_wf_errors(stmt, ro_vars, rw_vars, all_vars),
      let_stmt()              = (),
      break_stmt              = (),
      fail_stmt()             = (),
      assert_stmt()           = expr_wf_errors(stmt.cond, all_vars),
      print_stmt(e?)          = expr_wf_errors(e, all_vars),
      seq_update_stmt()       = expr_wf_errors(stmt.idx, all_vars) & expr_wf_errors(stmt.value, all_vars),
      return_stmt             = (),
      proc_call_stmt()        = (),

      send_msg_stmt()         = expr_wf_errors(stmt.msg, all_vars),
      try_update_stmt()       = join((expr_wf_errors(e, all_vars) : e <- stmt.args)),
      set_memb_var_stmt()     = expr_wf_errors(stmt.value, all_vars),
      delete_stmt()           = join((join((expr_wf_errors(value(a), all_vars) : a <- e.args, a != nothing)) : e <- stmt.entries)),
      insert_stmt()           = insert_stmt_wf_errors(stmt.entries, all_vars),
      insert_with_attrs_stmt()  = insert_with_attrs_stmt_wf_errors(stmt, all_vars),

      set_input_ctrl_stmt()         = expr_wf_errors(stmt.value, all_vars),
      clear_input_ctrl_stmt()       = (),
      set_elapsed_time_ctrl_stmt()  = expr_wf_errors(stmt.time, all_vars),
      apply_ctrl_stmt()             = (),
      send_msg_ctrl_stmt()          = expr_wf_errors(stmt.msg, all_vars),
      read_state_ctrl_stmt()        = (),
      restore_state_ctrl_stmt()     = expr_wf_errors(stmt.state, all_vars);


    ExprWFError* loop_stmt_wf_errors(SynExpr cond, Bool skip_first, SynStmt+ body, [DefVar] ro_vars, [StdVar] rw_vars, [DefVar] all_vars) {
      body_errs = stmts_wf_errors(body, ro_vars, rw_vars, stmt_stack = (stmt_stack | :loop));
      return body_errs if body_errs != ();
      body_vars = if skip_first then syn_new_vars(body) else [];
      return expr_wf_errors(cond, all_vars & body_vars);
    }


    ExprWFError* if_stmt_wf_errors(SynIfStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars, [DefVar] all_vars) {
      branches_errs = join((expr_wf_errors(b.cond, all_vars) & stmts_wf_errors(b.body, ro_vars, rw_vars) : b <- stmt.branches));
      else_body = stmt.else;
      else_errs = if else_body != () then stmts_wf_errors(else_body, ro_vars, rw_vars) else ();
      return branches_errs & else_errs;
    }


    ExprWFError* for_stmt_wf_errors(SynForStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars, [DefVar] all_vars) {
      iter_errs = ();
      new_vars = [];
      for it <- stmt.loops {
        iter_errs = iter_errs & iter_wf_errors(it, new_vars & all_vars);
        new_vars = new_vars & syn_new_vars(it);
      }
      assert disjoint(new_vars, all_vars);
      let stmt_stack = (stmt_stack | :loop)
        body_errs = stmts_wf_errors(stmt.body, ro_vars & new_vars, rw_vars - new_vars);
      return iter_errs & body_errs;
    }


    ExprWFError* insert_stmt_wf_errors((var: Symbol, args: SynExpr+, iter: SynCollIter?)+ entries, [DefVar] vars) =
      join(({
        if e.iter? {
          errs = iter_wf_errors(e.iter, vars);
          return errs if errs != ();
        }
        args_vars = vars & if e.iter? then syn_new_vars(e.iter) else [];
        return join((expr_wf_errors(a, args_vars) : a <- e.args));
      } : e <- entries));


    ExprWFError* insert_with_attrs_stmt_wf_errors(SynInsertWithAttrsStmt stmt, [DefVar] vars) {
      errs = join((expr_wf_errors(a, vars) : a <- stmt.args));
      return errs if errs != ();
      for a <- stmt.attrs {
        if a.iter? {
          errs = iter_wf_errors(a.iter, vars);
          return errs if errs != ();
        }
        attr_vars = vars & if a.iter? then syn_new_vars(a.iter) else [];
        errs = expr_wf_errors(a.value, attr_vars);
        errs = errs & expr_wf_errors(a.cond, attr_vars) if a.cond?;
        return errs if errs != ();
      }
      return ();
    }


    // type SynCollIter = coll_value_iter(vars: Maybe[StdVar]+, idx_var: StdVar?, src_expr: SynExpr);
    ExprWFError* iter_wf_errors(SynCollIter iter, [DefVar] vars) {
      if not iter.idx_var? and iter.src_expr :: IdChain {
        symbs = destructure_id_chain(iter.src_expr);
        resols = resolve_by_priority_as_expr_or_rel_var(symbs, |iter.vars|, vars);
        if |resols| == 1
          return ();
        else if |resols| > 1
          return (ambiguous_expr(iter.src_expr, resols));
      }
      return expr_wf_errors(iter.src_expr, vars);
    }


    // type SynRelIter = rel_iter(vars: Maybe[StdVar]+, src_expr: SynExpr);
    ExprWFError* iter_wf_errors(SynRelIter iter, [DefVar] vars) {
      return (wrong_iter_arity(iter.vars)) if |iter.vars| > 3;

      if iter.src_expr :: IdChain {
        symbs = destructure_id_chain(iter.src_expr);
        resols = resolve_by_priority_as_expr_or_rel_var(symbs, |iter.vars|, vars);
        if |resols| == 1
          return ();
        else if |resols| > 1
          return (ambiguous_expr(iter.src_expr, resols));
      }
      return expr_wf_errors(iter.src_expr, vars);
    }


    // type SynFilteredIter = filtered_iter(vars: Maybe[Symbol]+, target: Symbol+, args: Maybe[SynExpr]+);
    ExprWFError* iter_wf_errors(SynFilteredIter iter, [DefVar] vars) {
      errs = join((expr_wf_errors(value(a), vars) : a <- iter.args, a != nothing));
      return errs if errs != ();

      target = iter.target;
      resols = resolve_by_priority_as_expr_or_rel_var(target, |iter.args|, vars);
      if |resols| == 1 {
        resol = only(resols);
        if resol :: AnyRelVar {
          exp_arity = relvar_arity(resol);
          return (invalid_rel_var_arity(last(target), |iter.args|, exp_arity) if |iter.args| != exp_arity);
        }
        else {
          return ();
        }
      }
      else if |resols| > 1 {
        // Building a "fake" expression to feed to ambiguous_expr()
        expr = const_or_var(head(target));
        for i = 1 .. |target|
          expr = syn_accessor(expr, target(i));
        return (ambiguous_expr(expr, resols));
      }
      return join((expr_wf_errors(value(a), vars) : a <- iter.args, a != nothing));
    }


    // type SynRangeIter = range_iter(var: StdVar?, start_val: SynExpr, end_val: SynExpr, end_val_incl: Bool);
    ExprWFError* iter_wf_errors(SynRangeIter iter, [DefVar] vars) =
      expr_wf_errors(iter.start_val, vars) & expr_wf_errors(iter.end_val, vars);
  }

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

  ExprWFError* stmt_local_wf_errors(SynStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) =
    assignment_stmt()         = asgn_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    return_stmt()             = ret_stmt_local_wf_errors(stmt, true),
    if_stmt()                 = if_stmt_local_wf_errors(stmt),
    for_stmt()                = for_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    let_stmt()                = let_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    seq_update_stmt()         = seq_update_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    proc_call_stmt()          = proc_call_stmt_local_wf_errors(stmt, ro_vars, rw_vars),
    return_stmt               = ret_stmt_local_wf_errors(stmt, false),
    break_stmt                = break_stmt_local_wf_errors(stmt),

    send_msg_stmt()           = send_msg_stmt_local_wf_errors,
    try_update_stmt()         = try_update_stmt_local_wf_errors(stmt.name, stmt.args, ro_vars, rw_vars),
    set_memb_var_stmt()       = set_memb_var_stmt_local_wf_errors(stmt.var, stmt.value, ro_vars, rw_vars),
    delete_stmt()             = join((delete_or_insert_stmt_local_wf_errors(e.var, |e.args|) : e <- stmt.entries)),
    insert_stmt()             = join((delete_or_insert_stmt_local_wf_errors(e.var, |e.args|) : e <- stmt.entries)),
    insert_with_attrs_stmt()  = insert_with_attrs_stmt_local_wf_errors(stmt),

    set_input_ctrl_stmt()     |
    clear_input_ctrl_stmt()   = set_or_clear_input_ctrl_stmt_local_wf_errors(stmt.var, stmt.input, ro_vars, rw_vars),
    set_elapsed_time_ctrl_stmt()  = react_auto_var_errors(loc_auto_var(stmt.var), ro_vars, rw_vars),
    apply_ctrl_stmt()         = apply_ctrl_stmt_local_wf_errors(stmt.auto_var, stmt.res_var, ro_vars, rw_vars),
    send_msg_ctrl_stmt()      = send_msg_ctrl_stmt_local_wf_errors(stmt.res_var, stmt.db_var, ro_vars, rw_vars),
    read_state_ctrl_stmt()    = read_state_ctrl_stmt_local_wf_errors(stmt.res_var, stmt.db_var, ro_vars, rw_vars),
    restore_state_ctrl_stmt() = restore_state_ctrl_stmt_local_wf_errors(stmt.res_var, stmt.db_var, ro_vars, rw_vars),

    assert_stmt(e?)           = (),
    print_stmt(e?)            = (),
    fail_stmt()               = (),
    loop_stmt()               = (),
    inf_loop_stmt(ss?)        = ();


  ExprWFError* if_stmt_local_wf_errors(SynIfStmt stmt) {
    errs = (
      match (b.cond)
        seq_expr(es?) = (parens_in_if_stmt_cond(stmt, b.cond) if |es| == 1),
        _             = ()
      : b <- stmt.branches
    );
    return join(errs);
  }


  ExprWFError* break_stmt_local_wf_errors(SynBreakStmt stmt) {
    outside_loop = not in(:loop, stmt_stack);
    invalid_jump = not outside_loop and stmt_stack != () and last(stmt_stack) == :let;
    return (break_outside_loop(stmt) if outside_loop, break_in_let_body(stmt) if invalid_jump);
  }


  ExprWFError* apply_ctrl_stmt_local_wf_errors(Atom auto_var, Atom res_var, [DefVar] ro_vars, [StdVar] rw_vars) {
    auto_var_errs = react_auto_var_errors(loc_auto_var(auto_var), ro_vars, rw_vars);
    res_var_errs = (ro_vars_asgnm([var(res_var)]) if already_def(res_var, ro_vars));
    return auto_var_errs & res_var_errs;
  }


  ExprWFError* send_msg_stmt_local_wf_errors {
    schema_def = curr_db_def;
    return (rel_auto_has_no_dependees(schema_def)) if schema_def.links == ();

    interface = db_interfaces(db_symbol(schema_def.name), !);
    for dependee <- interface.linked_dbs
      return () if handlers_by_db(dependee, _);

    return (no_dependee_has_handlers(schema_def));
  }


  ExprWFError* try_update_stmt_local_wf_errors(Atom name, SynExpr* args, [DefVar] ro_vars, [StdVar] rw_vars) {
    // The target database must have an update with the specified name and arity
    updates = lookup(updates_by_db, curr_db_def.name, []);
    arity = |args|;
    return () if (u <- updates : u.name == name and |u.args| == arity);
    arities = [|u.args| : u <- updates, u.name == name];
    return if arities == []
      then (unknown_update(name, curr_db_def.name))
      else (invalid_update_arity(name, arity, arities));

  }


  ExprWFError* set_memb_var_stmt_local_wf_errors(Atom var, SynExpr value, [DefVar] ro_vars, [StdVar] rw_vars) {
    // <var> must be a scalar member variable of the target database
    interface = db_interfaces[db_symbol(curr_db_def.name)];
    if interface.memb_vars(var)
      return ();
    else if interface.rel_vars(var, _)
      return (not_a_memb_var(var, curr_db_def));
    else
      return (unknown_memb_var(var, curr_db_def));
  }


  ExprWFError* insert_with_attrs_stmt_local_wf_errors(SynInsertWithAttrsStmt stmt) {
    errs = delete_or_insert_stmt_local_wf_errors(stmt.relvar, |stmt.args|);
    return errs if errs != ();
    for a <- stmt.attrs {
      errs = delete_or_insert_stmt_local_wf_errors(a.name, nz_nat(1 + |stmt.args|));
      return errs if errs != ();
    }
    return ();
  }


  ExprWFError* delete_or_insert_stmt_local_wf_errors(Atom var, NzNat arity) {
    // <var> must be a relational variable of the specified arity in the target database
    interface = db_interfaces[db_symbol(curr_db_def.name)];
    if interface.rel_vars(var, _) {
      relvar_arity = interface.rel_vars[var];
      return (invalid_rel_var_arity(var, arity, relvar_arity) if arity != relvar_arity);
    }
    else if interface.memb_vars(var)
      return (not_a_rel_var(var, curr_db_def));
    else
      return (unknown_rel_var(var, curr_db_def));
  }


  ExprWFError* asgn_stmt_local_wf_errors(SynAsgnStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    vars = set(values(stmt.vars));
    bad_vars = already_def_vars(vars, ro_vars) & [v : v <- vars, is_already_def_as_auto_or_db_var(bare_id(v))];
    dupl_vars = duplicates(values(stmt.vars));
    ## BAD BAD: HERE I'M TREATING AUTOMATON VARIABLES AS IF THEY WERE READ-ONLY SCALAR ONES
    return (ro_vars_asgnm(bad_vars) if bad_vars != []) & (dupl_var_mult_asgnm(v) : v <- rand_sort(dupl_vars));
  }


  ExprWFError* ret_stmt_local_wf_errors(<SynReturnStmt, return_stmt> stmt, Bool has_value) = (
    wrong_return(stmt) if has_value != has_return_value,
    return_in_let_body(stmt) if in(:let, stmt_stack)
  );


  ExprWFError* for_stmt_local_wf_errors(SynForStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    errs = ();
    new_vars = [];
    for it <- stmt.loops {
      dupl_vars = match (it)
        coll_value_iter() = duplicates(values(it.vars) & (it.idx_var if it.idx_var?)),
        rel_iter()        |
        filtered_iter()   = [var(v) : v <- duplicates(values(it.vars))],
        range_iter()      = [];
      errs = errs & (dupl_var_mult_asgnm(v) : v <- rand_sort(dupl_vars));
      it_vars = syn_new_vars(it);
      bad_vars = already_def_vars(it_vars, union([ro_vars, rw_vars, new_vars]));
      errs = (errs | vars_redef(stmt, bad_vars)) if bad_vars != [];
      errs = errs & match (it)
        filtered_iter()   = iter_wf_errors(it),
        coll_value_iter() |
        rel_iter()        |
        range_iter()      = ();
      new_vars = new_vars & it_vars;
    }
    return errs;


    ## WHY IS THIS HERE INSTEAD OF THE OTHER iter_wf_errors(..)?
    ExprWFError* iter_wf_errors(SynFilteredIter iter) {
      free_args_count = count(iter.args, $ == nothing);
      return (wrong_iter_arity(iter.vars, nz_nat(free_args_count)) if |iter.vars| != free_args_count);
    }
  }


  ExprWFError* let_stmt_local_wf_errors(SynLetStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    ## CHECK THAT THERE ARE NOT DUPLICATES AMONG IMPLICIT ARGUMENTS
    ## AND THAT THERE ARE NOT MUTUAL DEPENDENCIES
    exprs_errs = join((expr_wf_errors(e, ro_vars & rw_vars) : _, e <- stmt.asgnms));
    new_impl_args = impl_args & [left(a) : a <- stmt.asgnms];
    let impl_args = new_impl_args, stmt_stack = (stmt_stack | :let)
      body_errs = stmts_wf_errors(stmt.body, ro_vars, rw_vars);
    return exprs_errs & body_errs;
  }


  ExprWFError* seq_update_stmt_local_wf_errors(SynSeqUpdateStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    var = stmt.obj;
    // The variable whose content is updated must already exist.
    // Does it have to be a read/write one, or can it be a read-only one too?
    // It has to be a standard variable, so no searching through implicit parameters
    var_errs = (undef_update_var(stmt, var) if not in(var, ro_vars) and not in(var, rw_vars));
    return var_errs if var_errs != ();
    return (not_an_explicitly_typed_loc_var(stmt, var) if not typed_loc_vars(bare_id(var)));
  }


  ExprWFError* proc_call_stmt_local_wf_errors(SynProcCallStmt stmt, [DefVar] ro_vars, [StdVar] rw_vars) {
    return (proc_call_not_allowed(stmt)) if not allow_proc_calls;
    return (ro_vars_asgnm([stmt.res_var])) if stmt.res_var? and already_def(stmt.res_var, ro_vars);

    proc_name = stmt.proc_name;
    if not builtin_procs_map(proc_name, _) {
      return (undef_proc(stmt)) if not proc_defs_by_id(proc_name, _);
      args_info = proc_args_info(proc_name);
      has_ret_val = proc_defs_by_id(proc_name, !).res_type != nothing;
    }
    else
      args_info, has_ret_val = builtin_procs_map(proc_name, !);

    arity = |args_info|;

    errs = (
      wrong_proc_arity(stmt, arity) if |stmt.args| != arity,
      uncaught_ret_val(stmt)        if has_ret_val and not stmt.res_var?,
      proc_has_no_ret_val(stmt)     if not has_ret_val and stmt.res_var?
    );
    return errs if errs != ();

    errs = join((
      match (args_info(i))
        value_arg           = expr_wf_errors(e, ro_vars & rw_vars),
        rel_auto_arg        = rel_auto_arg_errs(e, nothing, i, proc_name, ro_vars, rw_vars),
        rel_auto_arg(id?)   = rel_auto_arg_errs(e, just(id), i, proc_name, ro_vars, rw_vars),
        react_auto_arg(id?) = react_auto_arg_errs(e, id, i, proc_name, ro_vars, rw_vars)
      : e @ i <- stmt.args
    ));
    return errs if errs != ();

    // if stmt.proc_name == proc_symbol(:load) or stmt.proc_name == proc_symbol(:set) {
    //   var_symb = match (stmt.args(0)) const_or_var(s?) = s;
    //   if in(var_symb, proc_auto_args)
    //     return (cannot_set_state_of_auto_arg(var_symb));
    // }

    return ();


    ExprWFError* rel_auto_arg_errs(SynExpr expr, Maybe[Symbol] maybe_auto_type, Nat idx, ProcSymbol proc, [DefVar] ro_vars, [StdVar] rw_vars) {
      if not expr :: ConstOrVar {
        auto_type = if maybe_auto_type != nothing
          then db_symbol(value(maybe_auto_type))
          else :any_rel_auto;
        return (actual_argument_not_an_auto_var(expr, proc, idx, auto_type));
      }
      var_symb = match (expr) const_or_var(s?) = s;
      auto_var = loc_db_var(var_symb);
      if not loc_db_vars(auto_var, _) {
        is_auto_var = loc_auto_vars(loc_auto_var(var_symb), _);
        is_obj_var = ro_vars(var(var_symb)) or rw_vars(var(var_symb));
        return (undef_static_auto_var(var_symb, is_auto_var, is_obj_var));
      }
      if maybe_auto_type != nothing {
        actual_auto_type = loc_db_vars(auto_var, !);
        exp_auto_type = db_symbol(value(maybe_auto_type));
        return (
          wrong_auto_type(proc: proc, idx: idx, actual: actual_auto_type, expected: exp_auto_type)
        ) if actual_auto_type != exp_auto_type;
      }
      return ();
    }


    ExprWFError* react_auto_arg_errs(SynExpr expr, Symbol maybe_auto_type, Nat idx, ProcSymbol proc, [DefVar] ro_vars, [StdVar] rw_vars) {
      ## CURRENTLY UNIMPLEMENTED, BECAUSE AT THE MOMENT A PROCEDURE IS
      ## NOT ACCEPTED IF ONE OF ITS ARGUMENTS IS A REACTIVE AUTOMATON
      return ();
    }
  }


  ExprWFError* set_or_clear_input_ctrl_stmt_local_wf_errors(Atom var_id, Atom input, [DefVar] ro_vars, [StdVar] rw_vars) {
    var = loc_auto_var(var_id);
    errs = react_auto_var_errors(var, ro_vars, rw_vars);
    return errs if errs != ();
    auto_def = auto_defs_by_id[auto_var_type(var)];
    return (unknown_input(input, auto_def) if not (i <- auto_def.inputs : i.name == input)); ## BAD, LINEAR SEARCH
  }


  ExprWFError* send_msg_ctrl_stmt_local_wf_errors(Atom res_var, Atom db_var, [DefVar] ro_vars, [StdVar] rw_vars) {
    errs = (
      ro_vars_asgnm([var(res_var)]) if already_def(res_var, ro_vars) or is_already_def_as_auto_or_db_var(res_var),
      undef_static_auto_var(db_var, loc_auto_vars(loc_auto_var(db_var), _), ro_vars(var(db_var)) or rw_vars(var(db_var)))
        if not loc_db_vars(loc_db_var(db_var), _)
    );
    return errs if errs != ();
    auto_var = resolve_auto_var(db_var);
    return (:send_msg_syntax_not_supported_anymore if auto_var :: LocDBVar);
  }


  ExprWFError* read_state_ctrl_stmt_local_wf_errors(Atom res_var_id, Atom auto_var_id, [DefVar] ro_vars, [StdVar] rw_vars) {
    errs = auto_var_errors(auto_var_id, ro_vars, rw_vars);
    res_var_already_def = already_def(res_var_id, ro_vars) or is_already_def_as_auto_or_db_var(res_var_id);
    errs = (errs | ro_vars_asgnm([var(res_var_id)])) if res_var_already_def;
    return errs if errs != ();
    auto_var = resolve_auto_var(auto_var_id);
    return (:read_state_syntax_not_supported_anymore if auto_var :: LocDBVar);
  }


  ExprWFError* restore_state_ctrl_stmt_local_wf_errors(Atom res_var_id, Atom auto_var_id, [DefVar] ro_vars, [StdVar] rw_vars) {
    errs = auto_var_errors(auto_var_id, ro_vars, rw_vars);
    return errs if errs != ();
    res_var_already_def = already_def(res_var_id, ro_vars) or is_already_def_as_auto_or_db_var(res_var_id);
    errs = (
      ro_vars_asgnm([var(res_var_id)]) if res_var_already_def,
      cannot_set_state_of_auto_arg(auto_var_id) if in(auto_var_id, proc_auto_args)
    );
    return errs if errs != ();
    auto_var = resolve_auto_var(auto_var_id);
    return (:restore_state_syntax_not_supported_anymore if auto_var :: LocDBVar);
  }

  //////////////////////////////////////////////////////////////////////////////

  Bool is_already_def_as_auto_or_db_var(Atom var_id) =
    loc_auto_vars(loc_auto_var(var_id), _)        or
    nested_auto_vars(nested_auto_var(var_id), _)  or
    loc_db_vars(loc_db_var(var_id), _);


  ExprWFError* react_auto_var_errors(LocAutoVar var, [DefVar] ro_vars, [StdVar] rw_vars) =
    (undef_react_auto_var(var, already_def(bare_id(var), ro_vars & rw_vars)) if not loc_auto_vars(var, _));


  ExprWFError* auto_var_errors(Atom var_id, [DefVar] ro_vars, [StdVar] rw_vars) = (
    undef_auto_var(var_id, already_def(var_id, ro_vars & rw_vars))
      if not loc_auto_vars(loc_auto_var(var_id), _) and not loc_db_vars(loc_db_var(var_id), _)
  );

}
