implicit program : Program, typedefs : [TypeName -> NeType] {
  // type ForeignKey = foreign_key(
  //                     source: (RelVar, (Maybe[Symbol], Maybe[NeType])+),
  //                     target: (RelVar, Maybe[Symbol]+)
  //                   );

  // type Database = data_base(
  //                   name:         DBSymbol,
  //                   links:        DBSymbol*,
  //                   state_vars:   [MembVar -> (type: NeType, init_value: Expr)],
  //                   rel_vars:     [RelVar -> (signatures: [+NeType+], keys: [[+Nat]], symmetric: Bool)],
  //                   foreign_keys: [ForeignKey],
  //                   nested_dbs:   [NestedDBVar -> DBSymbol],
  //                   methods:      [Method],
  //                   updates:      [Update],
  //                   handlers:     [Handler]
  //                 );

  [RelVar] required_insertions(DBSymbol rel_auto_id, RelVar rel_var, NeType+ args_types) {
    global_map = required_insertions_map;
    if global_map(rel_auto_id, *):
      rel_auto_map = global_map(rel_auto_id);
      if rel_auto_map(rel_var, *):
        rel_var_map = rel_auto_map(rel_var);
        return nonempty(union([rs : s, rs <- rel_var_map, not are_ptype_disjoint(s, args_types)]));
      ;
    ;
    return [];


    [DBSymbol -> [RelVar -> [NeType+ -> [RelVar]]]] required_insertions_map = [
      rel_auto.name -> {
        rel_data = [rv, s, info : k <- rel_auto.foreign_keys, rv, s, info <- required_insertions(rel_auto, k)];
        rel_vars = [r : r, unused_var_1, unused_var_2 <- rel_data];
        return [rv -> group_by_left_arg([s, ts : s, ts <- rel_data(rv, ?, ?)]) : rv <- rel_vars];
      } : rel_auto <- program.data_bases
    ];


    [RelVar, NeType+, RelVar] required_insertions(Database rel_auto, ForeignKey key) {
      src_rel_var, src_info = key.source;
      src_args, src_types = unzip(src_info);
      src_arity = |src_types|;
      tgt_rel_var, tgt_args = key.target;
      tgt_arity = |tgt_args|;

      insertion_required = match (src_args, tgt_args)
        (just()),         (just(), nothing)           = true,
        (just(), just()), (just(), just(), nothing)   = true,
        _,                _                           = false;
      return [] if not insertion_required;

      src_rel_var_sgns = rel_auto.rel_vars(src_rel_var).signatures;
      affected_src_sgns = nonempty([
        s : s <- src_rel_var_sgns, signature_overlaps_partial_signature(s, nonempty(src_types))
      ]);

      return [src_rel_var, s, tgt_rel_var : s <- affected_src_sgns];
    }
  }


  // tgt_keys = rel_auto.rel_vars(tgt_rel_var).keys;
  // multivalued = match (src_args, tgt_args)
  //   (just()),         (just(), nothing)           = keys([0]),
  //   (just(), just()), (just(), just(), nothing)   = keys([0, 1]);
}
