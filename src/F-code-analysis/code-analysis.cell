implicit program : Program, typedefs : [TypeName -> NeType] {
  [<Handler, Update> -> [+AnalysisError]] analysis_errors {
    return [
      artifact -> errs
      : auto <- program.data_bases,
        artifact <- auto.handlers | artifact <- auto.updates,
        errs = analysis_errors(artifact, context = auto),
        errs != []
    ];
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

implicit program : Program, typedefs : [TypeName -> NeType], context : Database {
  [AnalysisError] analysis_errors(Handler handler) {
    // type Handler  = handler(type: NeType, body: Statement*);
    env = [var(:this) -> handler.type];
    return analyse(handler.body, env, typed_vars = []);
  }


  [AnalysisError] analysis_errors(Update update) {
    // type Update   = update(name: UpdateSymbol, args: (NeType, StdVar)*, body: Statement*);
    env = [v -> t : t, v <~ update.args];
    return analyse(update.body, env, typed_vars = []);
  }
}


implicit program : Program, typedefs : [TypeName -> NeType], context : Database, typed_vars : [StdVar -> NeType] {
  [AnalysisError] analyse(Statement* stmts, [EnvVar -> Type] env) {
    curr_reqrs = [];
    curr_env = env;
    for s <- stmts:
      errs = match (s)
        insert_stmt()     |
        delete_stmt()     |
        assignment_stmt() = analyse(s, curr_reqrs, curr_env),
        _                 = [];
      return errs if errs != [];
      curr_reqrs = update_insert_requirement(s, curr_reqrs, curr_env);
      curr_env = update_env(s, curr_env);
    ;
    prob_stmts = [s : unused_var_1, unused_var_2, s <- curr_reqrs];
    return [
      possible_foreign_key_violation(s, nonempty([v : v, unused_var <- curr_reqrs(?, ?, s)]))
      : s <- prob_stmts
    ];
  }


  [AnalysisError] analyse(InsertStmt stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
    if is_one_to_one_attribute(context.name, stmt.var):
      key_args = take(stmt.args, |stmt.args| - 1);
      if not reqrs(stmt.var, key_args, *):
        bad_args = reqrs(stmt.var, *, *);
        return [out_of_place_one_to_one_attr_insertion(stmt, master_rel_var(context.name, stmt.var), bad_args)];
      ;
    ;
    return [];
  }


  // type DeleteStmt = delete_stmt(var: RelVar, args: Maybe[Expr]+);
  [AnalysisError] analyse(DeleteStmt stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
    if is_one_to_one_attribute(context.name, stmt.var):
      master = master_rel_var(context.name, stmt.var);
      if context.attr_map(master, stmt.var):
        return [deleting_one_to_one_attribute(stmt, master_rel_var(context.name, stmt.var))];
      ;
    ;
    return [];
  }


  [AnalysisError] analyse(AssignmentStmt stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
    req_vars = [r, v : r, es, unused_var_2 <- reqrs, e <~ es, v <- extern_vars(e)];
    violations = [r, v : v <~ stmt.vars, r <- req_vars(?, v)];
    return [assignment_with_pending_updates(stmt, violations) if violations != []];
  }

  //////////////////////////////////////////////////////////////////////////////

  [RelVar, Expr+, InsertStmt] update_insert_requirement(Statement stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
    return match (stmt)
      insert_stmt()   |
      foreach_stmt()  = update_reqrs(stmt, reqrs, env),
      _               = reqrs;


    // insert_stmt(var: RelVar, args: Expr+);
    [RelVar, Expr+, InsertStmt] update_reqrs(InsertStmt stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
      rel_auto = cast_database(context);
      args_types = (expr_type(a, env) : a <- stmt.args);
      return reqrs if not args_types :: NeType+;
      req_ins_rel_vars = required_insertions(rel_auto.name, stmt.var, args_types);
      rel_var = stmt.var;
      arity = |stmt.args|;
      if req_ins_rel_vars != []:
        new_reqrs = [v, as, s : v, as, s <- reqrs | v, as, s <- [v, stmt.args, stmt : v <- req_ins_rel_vars]];
      else
        new_reqrs = reqrs;
      ;
      if arity > 1:
        key_args = take(stmt.args, arity - 1);
        new_reqrs = [v, as, s : v, as, s <- new_reqrs, v != rel_var or as != key_args] if new_reqrs(rel_var, key_args, *);
      ;
      return new_reqrs;
    }


    // foreach_stmt(iter: CollValueIter, body: Statement+);
    // coll_value_iter(vars: Maybe[StdVar]+, idx_var: StdVar?, src_expr: Expr);
    [RelVar, Expr+, InsertStmt] update_reqrs(ForeachStmt stmt, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
      return reqrs if not iterates_at_least_once(stmt.iter, env);
      loop_env = env & loop_vars(stmt.iter, env);
      return update_reqrs(stmt.body, reqrs, loop_env);
    }


    // type CollValueIter = coll_value_iter(vars: Maybe[StdVar]+, idx_var: StdVar?, src_expr: Expr);
    Bool iterates_at_least_once(CollValueIter iter, [EnvVar -> Type] env) {
      coll_type = expr_type(iter.src_expr, env);
      ## BAD BAD BAD: WHAT ARE WE SUPPOSED TO DO IF THE TYPE OF THE SOURCE IS THE EMPTY TYPE?
      return coll_type != empty_type and
             not type_contains_obj(coll_type, ()) and
             not type_contains_obj(coll_type, []);
    }


    // type RelSubsetIter = rel_subset_iter(vars: Maybe[StdVar]+, src_expr: Expr, args: Maybe[Expr]+);
    Bool iterates_at_least_once(RelSubsetIter iter, [EnvVar -> Type] env) {
      src_type = expr_type(iter.src_expr, env);
      ## BAD BAD BAD: WHAT ARE WE SUPPOSED TO DO IF THE TYPE OF THE SOURCE IS THE EMPTY TYPE?
      return src_type != empty_type and
             not type_contains_obj(src_type, []) and
             not (a <~ iter.args : a != nothing);
    }


    // type RelVarIter = rel_var_iter(vars: Maybe[StdVar]+, rel_var: AnyRelVar, args: Maybe[Expr]+);
    Bool iterates_at_least_once(RelVarIter iter, [EnvVar -> Type] env) = false;


    [RelVar, Expr+, InsertStmt] update_reqrs(Statement+ stmts, [RelVar, Expr+, InsertStmt] reqrs, [EnvVar -> Type] env) {
      curr_reqrs = [];
      curr_env = env;
      for s <- stmts:
        curr_reqrs = update_insert_requirement(s, curr_reqrs, curr_env);
        curr_env = update_env(s, curr_env);
      ;
      // The body of the statement must have already been checked, so no insert requirement
      // that comes up in the body of the statement (as opposed to coming from the parent
      // block(s) of code) can remain unsatisfied at this point
      assert not (v, as, unused_var <- curr_reqrs : not reqrs(v, as, *));
      return curr_reqrs;
    }
  }
}
