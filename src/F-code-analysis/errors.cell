type AnalysisError  = annotated_analysis_error(error: AnalysisError, anchor: Any),
                      possible_foreign_key_violation(
                        orig_stmt: InsertStmt,
                        missing_insertions: [+RelVar]
                      );

////////////////////////////////////////////////////////////////////////////////

AnalysisError annotated_analysis_error(AnalysisError e, Any a) =
  annotated_analysis_error(error: e, anchor: a);

AnalysisError possible_foreign_key_violation(InsertStmt s, [+RelVar] vs) =
  possible_foreign_key_violation(orig_stmt: s, missing_insertions: vs);

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String* create_annotated_error_msg(AnalysisError error, Any anchor) {
  err_msg = create_error_msg(error);
  return ("Internal compiler error") if err_msg == ();
  maybe_data = fetch(anchor);
  if maybe_data != nothing:
    data = value(maybe_data);
    if data :: ((NzNat, NzNat), (NzNat, NzNat)):
      start_pos, end_pos = data;
      start_line = left(start_pos);
      end_line = left(end_pos);
      line_info = "Line" & if start_line == end_line then " " & printed(start_line) else "s " & printed(start_line) & "-" & printed(end_line);
      return (if i == 0 then line_info & ": " & l else l : l @ i <- err_msg);
    ;
  ;
  extra_line = "CANNOT DETERMINE LOCATION OF OFFENDING CODE";
  extra_line = extra_line & ": " & printed(value(maybe_data)) if maybe_data != nothing;
  return (err_msg | extra_line);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

String* create_error_msg(AnalysisError err) =
  annotated_analysis_error()        = create_annotated_error_msg(err.error, err.anchor),
  possible_foreign_key_violation()  = possible_foreign_key_violation_err_msg(err.orig_stmt, err.missing_insertions);

////////////////////////////////////////////////////////////////////////////////

String* possible_foreign_key_violation_err_msg(InsertStmt orig_stmt, [+RelVar] missing_insertions) = (
  "Any insertion into " & user_repr(orig_stmt.var) & " must be followed " &
  "by insertions into: " & append((user_repr(v) : v <- isort(missing_insertions)), ", ")
);


