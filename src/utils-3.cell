type CodeOutcome = fails, returns, breaks_loop, exits_block, falls_through;

<fails>         fails         = :fails;
<returns>       returns       = :returns;
<breaks_loop>   breaks_loop   = :breaks_loop;
<exits_block>   exits_block   = :exits_block;
<falls_through> falls_through = :falls_through;


[+CodeOutcome] code_outcomes(BasicInstr) = [:fails, falls_through];


[+CodeOutcome] code_outcomes(JumpInstr) =
  break_loop    = [breaks_loop],
  exit_block    = [exits_block],
  ret_val()     = [returns],
  terminate     = [fails];


[+CodeOutcome] code_outcomes(CompInstr instr) =
  branch()            = nonempty(code_outcomes(instr.when_true) & code_outcomes(instr.when_false)),
  switch_on_nat()     = nonempty(union([code_outcomes(c) : c <~ instr.cases])),
  symb_switch()       = nonempty(union([code_outcomes(right(c)) : c <- instr.cases]) & code_outcomes(instr.else)),
  repeat(is?)         = loop_outcomes(is),
  execute_block(is?)  = block_outcomes(is),
  try_block()         = { assert block_outcomes(instr.body) :: [<fails, falls_through>];
                          return [falls_through];
                        };


[+CodeOutcome] loop_outcomes(Instr+ body) {
  body_outcomes = code_outcomes(body);
  may_break = in(breaks_loop, body_outcomes);
  return nonempty((body_outcomes - [breaks_loop, falls_through]) & [if may_break then falls_through else fails]);
}


[+CodeOutcome] block_outcomes(Instr+ body) {
  body_outcomes = code_outcomes(body);
  may_exit = in(exits_block, body_outcomes);
  return nonempty((body_outcomes - [exits_block]) & [falls_through if may_exit]);
}


[+CodeOutcome] code_outcomes(Instr* instrs) {
  outcomes = [falls_through];
  for instr <- instrs:
    assert in(falls_through, outcomes);
    outcomes = (outcomes - [falls_through]) & code_outcomes(instr);
    break if not in(falls_through, outcomes);
  ;
  return nonempty(outcomes);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[T] retrieve_from_nested_low_level_exprs(BoolExpr expr, (AnyTypeExpr -> [T]) retrieve) {
  return [] if expr :: AtomicBoolExpr;
  return match (expr)
    is_symb(e?)               = retrieve(e),
    is_int(e?)                = retrieve(e),
    is_float(e?)              = retrieve(e),
    is_ne_set(e?)             = retrieve(e),
    is_ne_seq(e?)             = retrieve(e),
    is_ne_map(e?)             = retrieve(e),
    is_ne_bin_rel(e?)         = retrieve(e),
    is_ne_tern_rel(e?)        = retrieve(e),
    is_tagged_obj(e?)         = retrieve(e),
    is_eq_bool()              = retrieve(expr.expr1) & retrieve(expr.expr2),
    is_eq_int()               = retrieve(expr.expr1) & retrieve(expr.expr2),
    is_eq()                   = retrieve(expr.expr1) & retrieve(expr.expr2),
    // is_gt()                   = retrieve(expr.expr1) & retrieve(expr.expr2),
    // is_ge()                   = retrieve(expr.expr1) & retrieve(expr.expr2),
    is_lt()                   = retrieve(expr.expr1) & retrieve(expr.expr2),
    is_le()                   = retrieve(expr.expr1) & retrieve(expr.expr2),
    inline_is_eq()            = retrieve(expr.expr),
    is_flt(e1?, e2?)          = retrieve(e1) & retrieve(e2),
    is_fle(e1?, e2?)          = retrieve(e1) & retrieve(e2),
    is_out_of_range()         = [],
    is_blank(v?)              = retrieve(v),
    is_null(v?)               = if v :: NullableVar ## NOT SURE ABOUT THIS ONE...
                                  then retrieve(v)
                                  else {assert v :: PendingInputVar; return [];},
    has_elem()                = retrieve(expr.set) & retrieve(expr.elt),
    has_field()               = retrieve(expr.record),
    contains()                = retrieve(expr.coll) & seq_union((retrieve(e) : e <- expr.entry)),
    table_contains()          = seq_union((retrieve(e) : e <- expr.tuple)),
    is_member()               = retrieve(expr.obj),
    state_is_def()            = [],
    neg(e?)                   = retrieve(e),
    and(es?)                  = seq_union((retrieve(e) : e <- es)),
    or(es?)                   = seq_union((retrieve(e) : e <- es)),
    and_then(es?)             = seq_union((retrieve(e) : e <- es)),
    or_else(es?)              = seq_union((retrieve(e) : e <- es));
}


[] retrieve_from_nested_low_level_exprs(<Int, IntVar> expr, (AnyTypeExpr -> [T]) retrieve) = [];

[T] retrieve_from_nested_low_level_exprs(IntConst expr, (AnyTypeExpr -> [T]) retrieve) = retrieve(expr.time_slot);

[T] retrieve_from_nested_low_level_exprs(NatIntOp expr, (AnyTypeExpr -> [T]) retrieve) =
  get_int_val(e?)       = retrieve(e),
  get_size(e?)          = retrieve(e),
  minus(e?)             = retrieve(e),
  add()                 = retrieve(expr.val1) & retrieve(expr.val2),
  sub()                 = retrieve(expr.val1) & retrieve(expr.val2),
  mult()                = retrieve(expr.val1) & retrieve(expr.val2),
  div()                 = retrieve(expr.val1) & retrieve(expr.val2),
  mod()                 = retrieve(expr.val1) & retrieve(expr.val2),
  bitwise_and(e1?, e2?) = retrieve(e1) & retrieve(e2),
  bitwise_or(e1?, e2?)  = retrieve(e1) & retrieve(e2),
  bitwise_xor(e1?, e2?) = retrieve(e1) & retrieve(e2),
  float_bits(e?)        = retrieve(e),
  mantissa(e?)          = retrieve(e),
  dec_exp(e?)           = retrieve(e),
  lookup_value()        = retrieve(expr.value),
  lookup_value_ex()     = retrieve(expr.value),
  get_tuple_field()     = [],
  rand_nat(e?)          = retrieve(e),
  unique_nat            = [],
  ticks                 = [];


[T] retrieve_from_nested_low_level_exprs(InlineObj, (AnyTypeExpr -> [T]) retrieve) = [];


[T] retrieve_from_nested_low_level_exprs(ObjVar v, (AnyTypeExpr -> [T]) retrieve) = [];


[T] retrieve_from_nested_low_level_exprs(NatObjOp expr, (AnyTypeExpr -> [T]) retrieve) =
  at()                = retrieve(expr.seq) & retrieve(expr.idx),
  lookup()            = retrieve(expr.rel) & retrieve(expr.key),
  lookup_field()      = retrieve(expr.record),
  get_tag(e?)         = retrieve(e),
  get_inner_obj(e?)   = retrieve(e),
  bool_obj(e?)        = retrieve(e),
  int_obj(e?)         = retrieve(e),
  obj_neg(e?)         = retrieve(e),
  to_symb(e?)         = retrieve(e),
  get_curr_obj()      = [],
  get_curr_arg()      = [],
  rand_elem(e?)       = retrieve(e);


[T] retrieve_from_nested_low_level_exprs(FloatExpr expr, (AnyTypeExpr -> [T]) retrieve) =
  float_lit()         = [],
  mk_float()          = [],
  neg_float(v?)       = retrieve(v),
  add_floats(vs?)     = seq_union((retrieve(e) : e <- vs)),
  sub_floats(vs?)     = seq_union((retrieve(e) : e <- vs)),
  mult_floats(vs?)    = seq_union((retrieve(e) : e <- vs)),
  div_floats(vs?)     = seq_union((retrieve(e) : e <- vs)),
  exp_floats(vs?)     = seq_union((retrieve(e) : e <- vs)),
  square_root(v?)     = retrieve(v),
  ceiling_op(v?)      = retrieve(v),
  int_to_float(v?)    = retrieve(v);


[T] retrieve_from_nested_low_level_exprs(RefObjExpr expr, (AnyTypeExpr -> [T]) retrieve) =
  mk_set_from_stream()        = [],
  mk_set()                    = retrieve(expr.size),
  mk_seq_from_stream()        = [],
  mk_seq()                    = retrieve(expr.size),
  build_const_int_seq()       = [],
  mk_map_from_streams()       = [],
  mk_map()                    = retrieve(expr.size),
  mk_bin_rel_from_streams()   = [],
  mk_bin_rel()                = retrieve(expr.size),
  mk_tern_rel_from_streams()  = [],
  mk_tern_rel()               = retrieve(expr.size),
  mk_tagged_obj()             = retrieve(expr.tag) & retrieve(expr.obj),
  mk_array()                  = retrieve(expr.size),
  get_seq_slice()             = retrieve(expr.seq) & retrieve(expr.idx_first) & retrieve(expr.len),
  append_to_seq()             = retrieve(expr.seq) & retrieve(expr.new_elem),
  update_seq_at()             = retrieve(expr.seq) & retrieve(expr.idx) & retrieve(expr.value),
  join_seqs()                 = retrieve(expr.left) & retrieve(expr.right),
  rev_seq()                   = retrieve(expr.seq),
  parse_value()               = retrieve(expr.value),
  print_value()               = retrieve(expr.value),
  internal_sort()             = retrieve(expr.set),
  symb_to_str(e?)             = retrieve(e),
  copy_state()                = [],
  copy_table()                = [],
  copy_persistent_state()     = [],
  lookup_surrogate()          = retrieve(expr.surrogate),
  read_pending_var()          = [];

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

[T] retrieve_from_nested_low_level_instrs(<BasicInstr, JumpInstr>, (Instr -> [T]) retrieve) = [];


[T] retrieve_from_nested_low_level_instrs(CompInstr instr, (Instr -> [T]) retrieve) =
  branch()            = retrieve_from_nested_low_level_instrs(instr.when_true & instr.when_false, retrieve),
  repeat(is?)         = retrieve_from_nested_low_level_instrs(is, retrieve),
  execute_block(is?)  = retrieve_from_nested_low_level_instrs(is, retrieve),
  try_block()         = retrieve_from_nested_low_level_instrs(instr.body, retrieve),
  switch_on_nat()     = retrieve_from_nested_low_level_instrs(join(instr.cases), retrieve),
  symb_switch()       = union([retrieve_from_nested_low_level_instrs(right(c), retrieve) : c <- instr.cases]) &
                        retrieve_from_nested_low_level_instrs(instr.else, retrieve);


[T] retrieve_from_nested_low_level_instrs(Instr* instrs, (Instr -> [T]) retrieve) = seq_union((retrieve(i) : i <- instrs));
