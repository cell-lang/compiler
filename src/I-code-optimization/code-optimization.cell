CompiledPrg optimize_compiled_code(CompiledPrg prg) {
  opt_static_blocks = [optimize_static_block(b) : b <- prg.static_blocks];
  return compiled_prg(
    typedefs:       prg.typedefs,
    opt_reprs:      prg.opt_reprs,
    bool_procs:     prg.bool_procs,
    procs:          prg.procs,
    react_blocks:   prg.react_blocks,
    static_blocks:  opt_static_blocks,
    int_seqs:       prg.int_seqs
  );
}


StaticBlock optimize_static_block(StaticBlock block) =
  static_block(
    name:                     block.name,
    links:                    block.links,
    state_vars:               block.state_vars,
    value_stores:             block.value_stores,
    tables:                   block.tables,
    foreign_keys:             block.foreign_keys,
    nested_blocks:            block.nested_blocks,
    init_code:                block.init_code,
    cleanup_code:             block.cleanup_code,
    copy_state_code:          block.copy_state_code,
    set_state_code:           block.set_state_code,
    foreign_keys_check_code:  block.foreign_keys_check_code,
    methods:                  [id -> optimize_static_block_method(def) : id, def <- block.methods],
    updates:                  [id -> optimize_static_block_update(def) : id, def <- block.updates],
    accessors:                block.accessors,
    msg_memb_pred:            block.msg_memb_pred
  );


CompiledMethod optimize_static_block_method(CompiledMethod method) {
  opt_code = if method.code != () then optimize_code(method.code) else ();
  return compiled_method(
    args_vars:        method.args_vars,
    args_types:       method.args_types,
    args_memb_preds:  method.args_memb_preds,
    ret_type:         method.ret_type,
    code:             opt_code
  );
}


CompiledUpdate optimize_static_block_update(CompiledUpdate update) {
  opt_body = if update.body != () then optimize_code(update.body) else ();
  return compiled_update(update.args_vars, opt_body);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Instr+ optimize_code(Instr+ instrs) {
  leaf_nodes, code_tree = build_root_code_graph(instrs);
  assert reconstruct_code(code_tree, leaf_nodes) == instrs;
  flow_map = build_flow_map(code_tree, leaf_nodes);
  no_end_node_flow_map = ((n : n <- ns, n != end_node) : ns <- flow_map);
  rev_flow_map = reverse_flow_map(no_end_node_flow_map);

  prop_info = propagate(leaf_nodes, (no_prop_info : unused_var <- leaf_nodes), rev_flow_map);
  rewritten_nodes = (rewrite_node(n, prop_info(i)) : n @ i <- leaf_nodes);
  live_vars_before_map, live_vars_after_map = build_live_vars_maps(rewritten_nodes, no_end_node_flow_map);
  assert |rewritten_nodes| == |live_vars_after_map|;
  rewritten_nodes_2 = (erase_useless_instrs(n, live_vars_after_map(i)) : n @ i <- rewritten_nodes);
  opt_instrs = reconstruct_code(code_tree, rewritten_nodes_2);

  return nonempty(opt_instrs);
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

type PropInfo = prop_info(
                  surrs:    [Int32Var, AnyValueStoreId, StdVar], // #0 is the surrogate of #2 in #1
                  ex_surrs: [Int32Var,    ValueStoreId, StdVar], // #0 is the extended surrogate of #2 in #1
                  non_null: [Int32Var]                           // #0 != -1
                );

////////////////////////////////////////////////////////////////////////////////

PropInfo no_prop_info = prop_info(surrs: [], ex_surrs: [], non_null: []);

////////////////////////////////////////////////////////////////////////////////

PropInfo merge(PropInfo info1, PropInfo info2) =
  prop_info(
    surrs:    [iv, vs, v : iv, vs, v <- info1.surrs, info2.surrs(iv, vs, v)],
    ex_surrs: [iv, vs, v : iv, vs, v <- info1.ex_surrs, info2.ex_surrs(iv, vs, v)],
    non_null: [v : v <- info1.non_null, info2.non_null(v)]
  );


PropInfo update_surr(PropInfo info, Int32Var var, AnyValueStoreId store, StdVar value) {
  cleared_info = clear(info, var);
  surrs = [iv, vs, v : iv, vs, v <- cleared_info.surrs | iv, vs, v <- [var, store, value;]];
  return prop_info(surrs: surrs, ex_surrs: cleared_info.ex_surrs, non_null: cleared_info.non_null);
}


PropInfo update_ex_surr(PropInfo info, Int32Var var, ValueStoreId store, StdVar value) {
  cleared_info = clear(info, var);
  ex_surrs = [iv, vs, v : iv, vs, v <- cleared_info.ex_surrs | iv, vs, v <- [var, store, value;]];
  non_null = cleared_info.non_null & [var];
  return prop_info(surrs: cleared_info.surrs, ex_surrs: ex_surrs, non_null: non_null);
}


PropInfo clear(PropInfo info, Int32Var var) =
  prop_info(
    surrs:    [iv, vs, v : iv, vs, v <- info.surrs, iv != var],
    ex_surrs: [iv, vs, v : iv, vs, v <- info.ex_surrs, iv != var],
    non_null: [v : v <- info.non_null, v != var]
  );


PropInfo clear(PropInfo info, StdVar var) =
  prop_info(
    surrs:    [iv, vs, v : iv, vs, v <- info.surrs, v != var],
    ex_surrs: [iv, vs, v : iv, vs, v <- info.ex_surrs, v != var],
    non_null: info.non_null
  );

////////////////////////////////////////////////////////////////////////////////

Maybe[Int32Var] surr_of(StdVar var, AnyValueStoreId store, PropInfo info) {
  vars = [v : v <- info.surrs(?, store, var)];
  return if vars != [] then just(an_elem(vars)) else nothing;
}


Maybe[Int32Var] ex_surr_of(StdVar var, ValueStoreId store, PropInfo info) {
  vars = [v : v <- info.ex_surrs(?, store, var)];
  return if vars != [] then just(an_elem(vars)) else nothing;
}


Bool is_surr_of(Int32Var var, AnyValueStoreId store, StdVar value, PropInfo info) =
  info.surrs(var, store, value);


Bool is_ex_surr_of(Int32Var var, ValueStoreId store, StdVar value, PropInfo info) =
  info.ex_surrs(var, store, value);

////////////////////////////////////////////////////////////////////////////////

PropInfo* propagate(NodeInfo* nodes, PropInfo* init_info, [Nat]* rev_flow_map) {
  assert |nodes| == |rev_flow_map|;
  info = init_info;
  loop
    in_info  = (merge_prop_info(ns, info) : ns <- rev_flow_map);
    out_info = (outgoing_prop_info(n, in_info(i)) : n @ i <- nodes);
    return in_info if out_info == info;
    info = out_info;
  ;
}


PropInfo merge_prop_info([Nat] in_nodes, PropInfo* infos) {
  return no_prop_info if in_nodes == [];
  in_infos = (infos(i) : i <- isort(in_nodes));
  return foldl(in_infos, merge);
}


PropInfo outgoing_prop_info(NodeInfo node, PropInfo info) {
  return match (node)
    std_node(instr?)  = instr_update_info(instr, info),
    _                 = info;


  PropInfo instr_update_info(<BasicInstr, JumpInstr> instr, PropInfo info) =
    set_ivar32()          = set_ivar32_update_info(instr.var, instr.value, info),
    set_rc_var()          = set_rc_var_update_info(instr.var, instr.value, info),

    set_var()             = clear_any(info, instr.var),
    call_proc()           = if instr.var? then clear_any(info, instr.var) else info,
    call_cls()            = clear_any(info, instr.var),
    invoke_auto_method()  = clear_any(info, instr.res_var),
    invoke_db_method()    = clear_any(info, instr.res_var),

    lookup_or_queue_insert_value()  = if instr.value :: StdVar
                                        then update_ex_surr(info, instr.res_var, instr.store, instr.value)
                                        else clear(info, instr.res_var),

    ## REVIEW AGAIN THE LIST OF INSTRUCTIONS THAT SET THE VALUE OF LOCAL VARIABLES

    ## THESE SHOULD NOT AFFECT ANYTHING, BUT...
    // set_at()              =
    // write_rec_field()     =
    // finish_init()         =

    _                     = info;


  PropInfo set_ivar32_update_info(Int32Var var, Int32Expr value, PropInfo info) =
    match (value)
      value_to_surr() = if value.value :: StdVar
                          then update_surr(info, var, value.store, value.value)
                          else clear(info, var),
      _                 = info;


  PropInfo set_rc_var_update_info(<WriteObjVar, LocOptTagRecVar> var, RefObjExpr value, PropInfo info) =
    var(),  surr_to_value()   = update_surr(info, value.surrogate, value.store, var),
    _,      _                 = info;


  PropInfo clear_any(PropInfo info, AnyVar var) = if var :: <StdVar, Int32Var> then clear(info, var) else info;
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NodeInfo rewrite_node(NodeInfo node, PropInfo info) =
  std_node(i?)  = std_node(rewrite_instr(i, info)),
  _             = node;


<BasicInstr, JumpInstr> rewrite_instr(<BasicInstr, JumpInstr> instr, PropInfo info) {
  return match (instr)
    set_ivar32()                    = rewrite_set_ivar32(instr, instr.var, instr.value, info),
    lookup_or_queue_insert_value()  = rewrite_lookup_or_queue_insert_value(instr, instr.res_var, instr.store, instr.value, info),
    _                               = instr;


  BasicInstr rewrite_lookup_or_queue_insert_value(BasicInstr instr, Int32Var res_var, ValueStoreId store, AtomicExpr value, PropInfo info) =
    if value :: StdVar and is_ex_surr_of(res_var, store, value, info)
      then :no_op
      else instr;


  BasicInstr rewrite_set_ivar32(BasicInstr instr, Int32Var var, Int32Expr value, PropInfo info) =
    match (value)
      value_to_surr()   = if value.value :: StdVar then
                            if is_surr_of(var, value.store, value.value, info)
                              then :no_op
                              else set_ivar32(var, rewrite_value_to_surr_expr(value.store, value.value, info))
                          else
                            instr,
      _                 = instr;


  Int32Expr rewrite_value_to_surr_expr(AnyValueStoreId store, AtomicExpr val, PropInfo info) {
    if val :: StdVar:
      maybe_surr = surr_of(val, store, info);
      return value(maybe_surr) if maybe_surr != nothing;
    ;
    return value_to_surr(store, val);
  }
}

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

NodeInfo erase_useless_instrs(NodeInfo node, [TrkVar] live_vars_after) =
  std_node(set_rc_var() i?) = if not live_vars_after(i.var) then std_node(:no_op) else node,
  _                         = node;

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

Instr* reconstruct_code(CodeTree code_tree, NodeInfo+ nodes) {
  return match (code_tree)
    std_node(id?)       = {match (nodes(id)) std_node(i?) = (i if i != :no_op)},
    branch_node()       = reconstruct_branch(code_tree.idx, code_tree.if_body, code_tree.else_body, nodes),
    nat_switch_node()   = reconstruct_nat_switch(code_tree.idx, code_tree.cases, nodes),
    symb_switch_node()  = reconstruct_symb_switch(code_tree.idx, code_tree.cases, code_tree.else, nodes),
    loop_node(ts?)      = (repeat(nonempty(reconstruct(ts, nodes)))),
    block_node(ts?)     = (execute_block(nonempty(reconstruct(ts, nodes)))),
    try_block_node()    = (try_block(code_tree.var, nonempty(reconstruct(code_tree.body, nodes)))),
    root_node(ts?)      = reconstruct(ts, nodes);


  Instr* reconstruct_branch(Nat idx, CodeTree+ if_code_trees, CodeTree* else_code_trees, NodeInfo+ nodes) {
    cond = match (nodes(idx)) branch_node(e?) = e;
    if_body = reconstruct(if_code_trees, nodes);
    else_body = reconstruct(else_code_trees, nodes);
    return (branch(cond, if_body, else_body));
  }


  Instr* reconstruct_nat_switch(Nat idx, CodeTree*+ cases, NodeInfo+ nodes) {
    expr = match (nodes(idx)) nat_switch_node(e?) = e;
    cases_code = (reconstruct(c, nodes) : c <- cases);
    return (switch_on_nat(expr, cases_code));
  }


  Instr* reconstruct_symb_switch(Nat idx, CodeTree++ cases, CodeTree* else, NodeInfo+ nodes) {
    node = match (nodes(idx)) symb_switch_node() n? = n;
    cases_code = (nonempty(reconstruct(c, nodes)) : c <- cases);
    else_code = reconstruct(else, nodes);
    return (symb_switch(node.value, set(nonempty(zip(node.cases, cases_code))), else_code));
  }


  Instr* reconstruct(CodeTree* code_trees, NodeInfo+ nodes) =
    join((reconstruct_code(t, nodes) : t <- code_trees));
}
