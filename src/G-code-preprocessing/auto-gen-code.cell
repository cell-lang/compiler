implicit program : Program, typedefs : [TypeName -> NeType] {
  (Program, [DBSymbol -> [MethodId]]) prg_plus_auto_gen_code {
    gen_accessors = [add_auto_gen_code(a) : a <- program.data_bases];
    new_prg = program(
      typedefs:       program.typedefs,
      fndefs:         program.fndefs,
      proc_defs:      program.proc_defs,
      aggr_fn_defs:   program.aggr_fn_defs,
      auto_defs:      program.auto_defs,
      data_bases:     [left(a) : a <- gen_accessors]
    );
    memb_test_accessors_ids = [left(a).name -> right(a) : a <- gen_accessors];
    return (new_prg, memb_test_accessors_ids);
  }


  (Database, [MethodId]) add_auto_gen_code(Database rel_auto) {
    gen_methods, memb_test_method_ids = auto_gen_methods(database = rel_auto);
    new_rel_auto = data_base(
      name:         rel_auto.name,
      links:        rel_auto.links,
      state_vars:   rel_auto.state_vars,
      rel_vars:     rel_auto.rel_vars,
      attr_map:     rel_auto.attr_map,
      foreign_keys: rel_auto.foreign_keys,
      methods:      rel_auto.methods & gen_methods,
      updates:      rel_auto.updates,
      handlers:     rel_auto.handlers
    );
    return (new_rel_auto, memb_test_method_ids);
  }
}


implicit program : Program, typedefs : [TypeName -> NeType], database : Database {
  ([Method], [MethodId]) auto_gen_methods {
    methods = [bare_id(m.id.symbol), arity(m) : m <- database.methods];

    memb_var_accessors = [
      state_var_accessor(v) : v, unused_var <- database.state_vars, not methods(bare_id(v), 0)
    ];

    rel_auto_id = database.name;
    gen_rel_vars = [logical_rel_var(v) : v, unused_var <- database.rel_vars];

    unary_rel_accessors = [
      unary_rel_accessor(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 1,
        not methods(bare_id(v), 0)
    ];

    unary_rel_memb_tests = [
      unary_rel_memb_test(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 1,
        not methods(bare_id(v), 1)
    ];

    bin_rel_accessors = [
      bin_rel_accessor(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 2,
        not methods(bare_id(v), 0)
    ];

    bin_rel_indexed_accessors = [
      bin_rel_indexed_accessor(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 2,
        in([0], rel_var_keys(rel_auto_id, v)),
        not methods(bare_id(v), 1)
    ];

    bin_rel_memb_tests = [
      bin_rel_memb_test(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 2,
        ## info.keys == []
        not methods(bare_id(v), 2)
    ];

    tern_rel_accessors = [
      tern_rel_accessor(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 3,
        not methods(bare_id(v), 0)
    ];

    tern_rel_indexed_accessors = [
      tern_rel_indexed_accessor(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 3,
        in([0, 1], rel_var_keys(rel_auto_id, v)),
        not methods(bare_id(v), 2)
    ];

    tern_rel_memb_tests = [
      tern_rel_memb_test(v)
      : v <- gen_rel_vars,
        arity(rel_auto_id, v) == 3,
        ## info.keys == []
        not methods(bare_id(v), 3)
    ];

    methods = union([
      memb_var_accessors,
      unary_rel_accessors,
      unary_rel_memb_tests,
      bin_rel_accessors,
      bin_rel_indexed_accessors,
      bin_rel_memb_tests,
      tern_rel_accessors,
      tern_rel_indexed_accessors,
      tern_rel_memb_tests
    ]);

    memb_test_method_ids = [
      m.id : m <- unary_rel_memb_tests | m <- bin_rel_memb_tests | m <- tern_rel_memb_tests
    ];

    return (methods, memb_test_method_ids);


    Method state_var_accessor(MembVar var) =
      method(method_symbol(bare_id(var)), (), database.state_vars(var).type, var);


    Method unary_rel_accessor(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        (),
        type_set(ne_union_superset([only_unsafe(s) : s <- rel_var_signatures(database, rel_var)])),
        set_comp(var(:x), relvar_clause((var(:x)), rel_var, (nothing)))
      );


    Method unary_rel_memb_test(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        (( ne_union_superset([only_unsafe(s) : s <- rel_var_signatures(database, rel_var)]),
           just(var(:id))
        )),
        type_bool,
        relvar_memb_test(rel_var, (just(var(:id))))
      );


    Method bin_rel_accessor(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        (),
        type_set(
          ne_tuple_type((
            ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]),
            ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)])
          ))
        ),
        set_comp(
          tuple_expr((var(:x), var(:y))),
          relvar_clause((var(:x), var(:y)), rel_var, (nothing, nothing))
        )
      );


    Method bin_rel_indexed_accessor(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        (( ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]),
           just(var(:x))
        )),
        ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)]),
        relvar_lookup(rel_var, (just(var(:x)), nothing))
      );


    Method bin_rel_memb_test(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        ( (ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]), just(var(:x))),
          (ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)]), just(var(:y)))
        ),
        type_bool,
        relvar_memb_test(rel_var, (just(var(:x)), just(var(:y))))
      );


    Method tern_rel_accessor(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        (),
        type_set(
          ne_tuple_type((
            ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]),
            ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)]),
            ne_union_superset([s(2) : s <- rel_var_signatures(database, rel_var)])
          ))
        ),
        set_comp(
          tuple_expr((var(:x), var(:y), var(:z))),
          relvar_clause((var(:x), var(:y), var(:z)), rel_var, (nothing, nothing, nothing))
        )
      );


    Method tern_rel_indexed_accessor(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        ( (ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]), just(var(:x))),
          (ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)]), just(var(:y)))
        ),
        ne_union_superset([s(2) : s <- rel_var_signatures(database, rel_var)]),
        relvar_lookup(rel_var, (just(var(:x)), just(var(:y)), nothing))
      );


    Method tern_rel_memb_test(RelVar rel_var) =
      method(
        method_symbol(bare_id(rel_var)),
        ( (ne_union_superset([s(0) : s <- rel_var_signatures(database, rel_var)]), just(var(:x))),
          (ne_union_superset([s(1) : s <- rel_var_signatures(database, rel_var)]), just(var(:y))),
          (ne_union_superset([s(2) : s <- rel_var_signatures(database, rel_var)]), just(var(:z)))
        ),
        type_bool,
        relvar_memb_test(rel_var, (just(var(:x)), just(var(:y)), just(var(:z))))
      );
  }
}
